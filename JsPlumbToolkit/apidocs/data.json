{
    "project": {},
    "files": {
        "dist/js/demo-support.js": {
            "name": "dist/js/demo-support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit-angular-1.x.js": {
            "name": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "modules": {},
            "classes": {
                "jsPlumbToolkit directive.": 1,
                "jsPlumb Palette directive": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit-drop.js": {
            "name": "dist/js/jsplumbtoolkit-drop.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit-editable-connectors.js": {
            "name": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit-print.js": {
            "name": "dist/js/jsplumbtoolkit-print.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit-testing.js": {
            "name": "dist/js/jsplumbtoolkit-testing.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit-undo-redo.js": {
            "name": "dist/js/jsplumbtoolkit-undo-redo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/js/jsplumbtoolkit.js": {
            "name": "dist/js/jsplumbtoolkit.js",
            "modules": {},
            "classes": {
                "Mottle": 1,
                "FaraheyInstance": 1,
                "Selection": 1,
                "Node": 1,
                "Port": 1,
                "Edge": 1,
                "Group": 1,
                "Cluster": 1,
                "Graph": 1,
                "jsPlumbToolkitInstance": 1,
                "jsPlumbToolkit.Model": 1,
                "Path": 1,
                "jsPlumbToolkit.Support": 1,
                "Layouts.AbstractLayout": 1,
                "Layouts.EmptyLayout": 1,
                "Layouts.Mistletoe": 1,
                "Layouts.AbsoluteBackedLayout": 1,
                "Layouts.Absolute": 1,
                "Layouts.AbstractHierarchicalLayout": 1,
                "Layouts.Hierarchical": 1,
                "Layouts.Spring": 1,
                "jsPlumbToolkit.Renderers.AbstractRenderer": 1,
                "ZoomWidget": 1,
                "Surface": 1,
                "jsPlumbToolkit.Renderers.Miniview": 1,
                "jsPlumbToolkit.Widgets.Lasso": 1,
                "jsPlumbToolkit.Dialogs": 1,
                "jsPlumbToolkit.DrawingTools": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "jsPlumbToolkit directive.": {
            "name": "jsPlumbToolkit directive.",
            "shortname": "jsPlumbToolkit directive.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 481,
            "description": "Provides an angular directive to create an instance of the Toolkit. Params discussed here are\nprovided as attributes to the element, for instance:\n\n<jsplumb-toolkit jtk-id=\"myToolkit\" params=\"SomeController.myToolkitParams\" .../>\n\nNote that of course since they are attributes then their real types are String, but the types discussed\nhere are the required types of objects resolved through Angular's DI.",
            "params": [
                {
                    "name": "jtk-id",
                    "description": "ID of the Toolkit to create. You will want to use this if you need to subsequently\naccess the Toolkit instance from the `jsPlumbService`.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "surface-id",
                    "description": "Optional ID of the Surface widget.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "params",
                    "description": "Optional parameters for the Toolkit constructor.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "renderParams",
                    "description": "Optional parameters for the Surface widget. It is highly likely you will\nwant to supply something here.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Optional data to load at create time.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "init",
                    "description": "Optional function to call back at the end of the Toolkit's `link` function.\nThis function is passed the current scope (which contains the Toolkit and Surface objects), as well as the\nelement into which the Toolkit was rendered, and the attributes that were set on the `jsplumb-toolkit` element.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "jsPlumb Palette directive": {
            "name": "jsPlumb Palette directive",
            "shortname": "jsPlumb Palette directive",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 506,
            "description": "Provides an Angular directive for configuring a set of droppable nodes for a Surface.",
            "params": [
                {
                    "name": "typeExtractor",
                    "description": "Function used to extract the type of a dropped node from the element that was dropped.",
                    "type": "Function"
                },
                {
                    "name": "dataGenerator",
                    "description": "Optional function that can prepare some initial data for a dropped node.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "dragOptions",
                    "description": "Options for the drag. If these are omitted then some sensible (at least, what\njsPlumb considers sensible) defaults are used.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "onDrop",
                    "description": "Optional function to call after a Node or Group is dropped. The new Node or Group is passed\nas a paremeter to the provided function.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Mottle": {
            "name": "Mottle",
            "shortname": "Mottle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1035,
            "description": "Mottle offers support for abstracting out the differences\nbetween touch and mouse devices, plus \"smart click\" functionality\n(don't fire click if the mouse has moved between mousedown and mouseup),\nand synthesized click/tap events.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clickThreshold",
                            "description": "Threshold, in milliseconds beyond which a touchstart followed by a touchend is not considered to be a click.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "250"
                        },
                        {
                            "name": "dblClickThreshold",
                            "description": "Threshold, in milliseconds beyond which two successive tap events are not considered to be a click.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "450"
                        },
                        {
                            "name": "smartClicks",
                            "description": "If true, won't fire click events if the mouse has moved between mousedown and mouseup. Note that this functionality\nrequires that Mottle consume the mousedown event, and so may not be viable in all use cases.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "FaraheyInstance": {
            "name": "FaraheyInstance",
            "shortname": "FaraheyInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16369,
            "description": "Applies repulsive magnetism to a set of elements relative to a given point, with a specified\namount of padding around the point.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "Element that contains the elements to magnetize. Only required if you intend to use the `executeAtEvent` method.",
                            "type": "Selector|Element",
                            "optional": true
                        },
                        {
                            "name": "getContainerPosition",
                            "description": "Function that returns the position of the container (as an object of the form `{left:.., top:..}`) when requested. Only required if you intend to use the `executeAtEvent` method.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "getPosition",
                            "description": "A function that takes an element and returns its position. It does not matter to which element this position is computed as long as you remain consistent with this method, `setPosition` and the `origin` property.",
                            "type": "Function"
                        },
                        {
                            "name": "setPosition",
                            "description": "A function that takes an element and position, and sets it. See note about offset parent above.",
                            "type": "Function"
                        },
                        {
                            "name": "getSize",
                            "description": "A function that takes an element and returns its size, in pixels.",
                            "type": "Function"
                        },
                        {
                            "name": "padding",
                            "description": "Optional padding for x and y directions. Defaults to 20 pixels in each direction.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "constrain",
                            "description": "Optional function that takes an id and a proposed amount of movement in each axis, and returns the allowed amount of movement in each axis. You can use this to constrain your elements to a grid, for instance, or a path, etc.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "The origin of magnetization, in pixels. Defaults to 0,0. You can also supply this to the `execute` call.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "elements",
                            "description": "List, or object hash, of elements on which to operate.",
                            "type": "Selector|String[]|Element[]"
                        },
                        {
                            "name": "executeNow",
                            "description": "Whether or not to execute the routine immediately.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "filter",
                            "description": "Optional function that takes an element id and returns whether or not that element can be moved.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "orderByDistanceFromOrigin",
                            "description": "Whether or not to sort elements first by distance from origin. Can have better results but takes more time.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "Selection": {
            "name": "Selection",
            "shortname": "Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19218,
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolkit",
                            "description": "jsPlumb Toolkit instance to which this Selection belongs.",
                            "type": "JsPlumbToolkitInstance"
                        },
                        {
                            "name": "generator",
                            "description": "Optional function that can be called to fill the selection. You'd use this\nwhen you are rendering individual selections and you need to be able to refresh the whole view based on some\nchange in the data model.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onReload",
                            "description": "Optional. called after a reload when a `generator` was supplied.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeReload",
                            "description": "Optional. called before the selection is cleared at the beginning of a reload, when a `generator` is supplied.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "autoFill",
                            "description": "Defaults to false. If true, and a `generator` is supplied,",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onClear",
                            "description": "Optional function to call when the selection is cleared.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19824,
            "description": "This is a Node in the Graph. Each Node can have one or more Edges to any other Node; this Edge may be\ndirected.  A Node may also have zero or more Ports, which themselves may have one or more Edges to other Nodes\nor to Ports on other Nodes.\n\nEvery Node has an associated *indegree centrality* and *outdegree centrality*. These are measurements of the number\nof links to and from the Node. Whenever an Edge is added or removed the indegree and outdegree centrality\nvalues for the Node are recomputed. For further reading we suggest [Wikipedia](http://en.wikipedia.org/wiki/Centrality#Degree_centrality).\n\nYou can instantiate a Node with any type of backing data you wish.  If you supply a String,\nthat value is assumed to be the Node's ID. If you supply a JSON object, an ID is extracted from that object,\neither with the supplied `idFunction`, or, if that is null, by assuming that the ID exists in the JSON as the\n`id` member.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Optional data backing the node. This object can be of any type you like, but if you supply a String, that value will be assumed to be the Node's ID.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "idFunction",
                    "description": "Optional function that can take a Node's data and return its ID. By default this looks for an `id` member in the backing data.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "graph",
                    "description": "Graph the Vertex belongs to.",
                    "type": "Graph"
                }
            ]
        },
        "Port": {
            "name": "Port",
            "shortname": "Port",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20283,
            "description": "A Port resides on a Node, and may be the source/target of one or more connections. A convenient way to think\nof Ports is as the columns in a database table: they belong to a table, but it is the columns themselves that\nhave relationships with other columns.",
            "extends": "Node",
            "is_constructor": 1
        },
        "Edge": {
            "name": "Edge",
            "shortname": "Edge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20331,
            "description": "This is an Edge in the graph.  There can be one or zero of these for every pair of Nodes/Ports in the Graph.  Each Edge has an associated \"cost\", and may be either bidirectional\nor unidirectional.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Edge parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "Optional backing data for the edge.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "source",
                            "description": "Edge's source.",
                            "type": "Node|Port"
                        },
                        {
                            "name": "target",
                            "description": "Edge's target.",
                            "type": "Node|Port"
                        },
                        {
                            "name": "cost",
                            "description": "Edge's cost. Defaults to 1.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Whether or not the Edge is directed. Default is true.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Group": {
            "name": "Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20428,
            "description": "Models a group of Nodes.",
            "is_constructor": 1
        },
        "Cluster": {
            "name": "Cluster",
            "shortname": "Cluster",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20529,
            "description": "A cluster of connected Nodes/Groups. Currently a basic implementation; we can in future expand the API of\nthis object to provide more information about the cluster such as edge count, interdependency etc.\n\nClusters are not created directly. The internal API creates these in response to a `getClusters` call\non a Graph.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "seed",
                    "description": "The first Node/Group in the Cluster.",
                    "type": "Node|Group"
                }
            ]
        },
        "Graph": {
            "name": "Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20546,
            "description": "A Graph.  Contains a list of Vertex objects, each of which has 0..N Ports, and a list of Edge objects. Every instance\nof the jsPlumb Toolkit is backed by an instance of this class.\n\nA good discussion on Graphs can be found on Wikipedia: http://en.wikipedia.org/wiki/Graph_(mathematics).\n\nYou will not typically need to construct a Graph directly (at least not when using the Toolkit; there is nothing\nstopping you from using this class directly for other purposes).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters. Optional. The Graph class has sensible defaults.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultDirected",
                            "description": "Whether edges are directed by default.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "idFunction",
                            "description": "Function to use to extract an appropriate ID from the JSON for a give node. Defaults to returning the 'id' property of the JSON.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "enableSubgraphs",
                            "description": "If true, Nodes are Graphs themselves, and can have child Nodes. If you enable this then you cannot use slashes (/) in your Node ids, as they will be treated as components of a path to a Node in a nested Graph.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "defaultCost",
                            "description": "Default cost for Edges.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "portSeparator",
                            "description": "The character(s) used to separate ports from nodes in port ids.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\".\""
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkitInstance": {
            "name": "jsPlumbToolkitInstance",
            "shortname": "jsPlumbToolkitInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21818,
            "description": "An instance of the jsPlumb Toolkit.  Each instance is backed by a `Graph`, and has zero or more `Renderer`s attached.\n\n#### Creating an instance\nYou create an instance of the jsPlumb Toolkit via the static method `jsPlumbToolkit.newInstance(params)`. The contents of `params` are\nany valid constructor parameters as detailed here.\n#### Rendering data\nAn instance of the jsPlumb Toolkit does not itself handle rendering the data to your UI; to do that, you must call the `render`\nmethod of your Toolkit instance:\n```\nvar myToolkit = jsPlumbToolkit.newInstance();\nvar aRenderer = myToolkit.render({\n  container:\"someElementId\",\n  ...other params, possibly..\n});\n```\n#### Operating on the dataset\nIn general, you will operate on the dataset via the `jsPlumbToolkitInstance` object, because any attached `Renderers` will\nfor the most part sort themselves out based on the data model. Occasionally you will want to perform some view-specific\noperation such as highlighting a Path, or hiding some Nodes, etc.  These sorts of operations are executed on the\n`Renderer` and not on the Toolkit object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "idFunction",
                            "description": "Optional function to use to extract an id from a Node's data. The default\nis to retrieve the `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "typeFunction",
                            "description": "Optional function to use to extract a type identifier from a Node's data.\nThe default is to retrieve the property defined by `typeProperty`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "typeProperty",
                            "description": "Optional name of the property that identifies a Node's type from its data.\nThe default is `type`.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"type\""
                        },
                        {
                            "name": "edgeIdFunction",
                            "description": "Optional function to use to extract an id from an Edge's data. The\ndefault is to retrieve the `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeTypeFunction",
                            "description": "Optional function to use to extract a type identifier from an Edge's data.\nThe default is to retrieve the property defined by `edgeTypeProperty`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeTypeProperty",
                            "description": "Optional name of the property that identifies an Edge's type from its data.\nThe default is `type`.",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "\"type\""
                        },
                        {
                            "name": "portIdFunction",
                            "description": "Optional function to use to extract an id from a Port's data. The\ndefault is to retrieve the `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portTypeFunction",
                            "description": "Optional function to use to extract a type identifier from a Port's\ndata. The default is to retrieve the `type` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "model",
                            "description": "Model of Node, Edge and Port definitions.  See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "beforeConnect",
                            "description": "Optional function that will be called prior to any edge being\nestablished (either programmatically or via the mouse). It is passed the (source, target) of the proposed edge\nand if it returns anything other than boolean true, the edge is aborted.\nIf not supplied, the default behaviour of this function is to honor the `allowLoopback`, `allowNodeLoopback`\nand `maxConnections` parameters on any Node or Port definitions you supplied to this Toolkit via the `model`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeMoveConnection",
                            "description": "Optional function that will be called prior to any existing edge\nbeing moved (either programmatically or via the mouse). It is passed the source and target of the existing edge,\nas well as the edge itself, and if it returns anything other than boolean true, the edge move is aborted.\nIf not supplied, the default behaviour of this function is to honor the `allowLoopback`, `allowNodeLoopback` and\n`maxConnections` parameters on any Node or Port definitions you supplied to this Toolkit via the `model`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeStartConnect",
                            "description": "Optional function that will be called prior to an edge being\nestablished. This is different from `beforeConnect` in that this function is called right at the beginning of a\nconnection drag by attached renderers, and the function is given the node/port that is the source, plus the edge\ntype. If you return false the Edge is aborted. Otherwise your return value is used as the Edge data.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeDetach",
                            "description": "Optional function that can be used to override connection detachment from\nthe mouse. The function is given (source, target, edge) and is expected to return true to confirm the detach\nshould occur. Any other return value will abort the detach.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeStartDetach",
                            "description": "Optional function that can be used to override connection detachment\nfrom the mouse. Distinct from `beforeDetach` in that this function is called as soon as the user begins to drag.\nThe function is given (source, target, edge) and is expected to return true to confirm the detach should occur.\nAny other return value will abort the detach.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "nodeFactory",
                            "description": "Function to use to generate data for a new Node. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFactory",
                            "description": "Function to use to generate data for a new Edge. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portFactory",
                            "description": "Function to use to generate data for a new Port. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "groupFactory",
                            "description": "Function to use to generate data for a new Group. Default is to create an\nobject with an `id` property.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portExtractor",
                            "description": "Optional function to call whenever a Node is added; it extracts, from\nthe Node's data, any Ports that are associated with the Node.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portUpdater",
                            "description": "Optional function to call whenever a Port is added, updated or removed. It is\nexpected to return a new value for the Node's backing data, computed from the current list of Ports. See Toolkit docs\nabout data model for more details.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "portDataProperty",
                            "description": "Optional name of a property that represents the ports on some node.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "portOrderProperty",
                            "description": "Optional name of a property in the backing data of each port that represents its ordering in a node. For some datasets the ordering\nof ports is important. This is only used if you do not supply your own `portExtractor`, and if you also have supplied a `portDataProperty`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "autoSave",
                            "description": "Whether or not to automatically save the dataset when changes occur. You\nmust supply the `saveUrl` property if you set this to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "saveUrl",
                            "description": "Url to use when saving automatically.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "saveHeaders",
                            "description": "Optional HTTP headers to pass when auto saving. If not provided the Toolkit\nwill use its default of `Content-Type:\"application/json\"`.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "autoSaveDebounceTimeout",
                            "description": "Supply this if you want the auto saver to \"debounce\" save events, that is to set a timer\nwhen a save event occurs and only perform a save if no other changes are made while the timer counts down. If another save event occurs while the\ntimer is running, the timer is restarted.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "autoSaveHandler",
                            "description": "Supply this if you want to handle the auto save yourself - the Toolkit will handle knowing about when auto\nsave should occur, and any debounce timeout, but your function will do the save. If you supply this then all of the `on...` callback arguments are ignored,\nas are `saveUrl` and `saveHeaders`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onAutoSaveSuccess",
                            "description": "Optional function to call on autoSave success.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onAutoSaveError",
                            "description": "Optional function to call on autoSave error.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeAutoSave",
                            "description": "Optional function to call before autoSave.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onAfterAutoSave",
                            "description": "Optional function to call after autoSave, regardless of auto save success or failure.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotUpdateOriginalData",
                            "description": "If true, won't try to update the original data when a\nNode/Edge is removed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "maxSelectedEdges",
                            "description": "Optional limit for the number of edges allowed to be selected at any\none time.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "maxSelectedNodes",
                            "description": "Optional limit for the number of nodes allowed to be selected at any\none time.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "selectionCapacityPolicy",
                            "description": "Optional selection capacity policy. See\n`setSelectionCapacityPolicy` docs.",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "createMissingGroups",
                            "description": "If true, when a Node is added that has a `group` data member that\nidentifies a Group not known by the Toolkit, a Group with that ID is created.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit.Model": {
            "name": "jsPlumbToolkit.Model",
            "shortname": "jsPlumbToolkit.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23980,
            "description": "A Model describes the appearance and behaviour of a set of Nodes, Edges, Ports and Groups. You do not\ncreate one of these directly; instead you pass a definition to a `jsPlumbToolkit.render` or\n`jsPlumbToolkit.newInstance()` call. Although the Model has the same syntax in each context, you are\nencouraged to configure model-specific things in the Model you pass to the `newInstance` method (such as,\nwhich Nodes/Ports can be connected to which others, what is the maximum number of connections, etc), and\nview-specific things (such as css classes, paint styles, connector appearance etc) to the model you pass to\nthe `render` method. The `render` method automatically merges in a Node/Port/Edge definition from a Model\ndefined on the associated Toolkit, if there is one.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Model parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "nodes",
                            "description": "Node definitions.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "edges",
                            "description": "Edge definitions.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "ports",
                            "description": "Port definitions.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "groups",
                            "description": "Group definitions.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "_jsPlumb",
                    "description": "An instance of jsPlumb on which to register associated Connection and Endpoint types.\nOnly the Surface widget provides this. The Toolkit instance creates a Model but it is headless.",
                    "type": "JsPlumbInstance",
                    "optional": true
                }
            ]
        },
        "Path": {
            "name": "Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24487,
            "description": "Models the path between two Nodes/Ports, which consists of a series of [Node/Port, Edge] pairs."
        },
        "jsPlumbToolkit.Support": {
            "name": "jsPlumbToolkit.Support",
            "shortname": "jsPlumbToolkit.Support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24904,
            "description": "Support functionality for working with existing jsPlumb instances in the Toolkit. Using the `ingest` method in this\nclass, you can ingest an existing jsPlumb instance into a new instance of the Toolkit; this for many people may\nprove to be a logical upgrade path from their existing jsPlumb code.\n\nWhen you ingest an existing jsPlumb instance, its `Container` is configured to be a `Surface` widget, which makes\nit pannable and zoomable, and the set of Nodes and Edges it is managing are loaded into the Toolkit's data model."
        },
        "Layouts.AbstractLayout": {
            "name": "Layouts.AbstractLayout",
            "shortname": "Layouts.AbstractLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25120,
            "description": "The parent for all layouts. This class maintains an array of element positions and\nsizes, and provides the key methods for executing layout functionality.  When using the Toolkit\nyou will not ordinarily need to interact directly with a layout, but if you write your own layout\nthen you need to extend this class and implement the abstract methods you need.\n\n##### Custom Layouts\n\nThe general syntax for writing a custom layout is to call `AbstractLayout`'s constructor and assign the\nreturn value to a variable:\n\n```\njsPlumbToolkit.Layouts[\"MyLayout\"] = function(params) {\n  var _super = jsPlumbToolkit.Layouts.AbstractLayout.apply(this, arguments);\n  ...\n };\n```\n\n##### Lifecycle\n\nThe lifecycle of a layout - controlled by this class - is as follows:\n\n- `begin(_jsPlumbToolkit, parameters)` This is an optional method.\n- `step(_jsPlumbToolkit, parameters)` This is called repeatedly until your code has indicated that the layout is complete (see below)\n- `end(_jsPlumbToolkit, parameters)` Also an optional method.\n\n##### Layout Completion\n\nYou are required to inform the superclass when your layout is complete, via this method:\n\n```\n_super.setDone(true);\n```\n\n#### Other Optional Methods\nYour layout can implement several optional methods should you need finer grained control of the lifecycle:\n\n- `_nodeAdded` - Notification that a new Node was added to the dataset.\n- `_nodeRemoved` - Notification that a new Node was added to the dataset.\n- `_nodeMoved` - Notification that a Node was moved.",
            "abstract": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "draggable",
                            "description": "Whether or not elements should be draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dragOptions",
                            "description": "Drag options to set on individual elements.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.EmptyLayout": {
            "name": "Layouts.EmptyLayout",
            "shortname": "Layouts.EmptyLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25896,
            "description": "A layout that does very little beyond implementing the functions present in the layout API",
            "extends": "Layouts.AbstractLayout"
        },
        "Layouts.Mistletoe": {
            "name": "Layouts.Mistletoe",
            "shortname": "Layouts.Mistletoe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25947,
            "description": "Mistletoe layout grows on another layout and does nothing except override lifecycle events and then\nupdate itself once all the hard work has been done. It is used by the Miniview component.",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params.layout",
                    "description": "The layout on which to leech.",
                    "type": "Layouts.AbstractLayout"
                }
            ]
        },
        "Layouts.AbsoluteBackedLayout": {
            "name": "Layouts.AbsoluteBackedLayout",
            "shortname": "Layouts.AbsoluteBackedLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26018,
            "description": "Mixin for layouts that have an absolute backing.  This includes, of course, the `Absolute` layout,\nwhich is actually just a direct reference to this class.\nThe default behaviour is to look for a `left` and `top` member in each Node/Group, but you\ncan supply a `locationFunction` parameter to the constructor to derive your own\nposition from each Node/Group.",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "locationFunction] Takes a Node/Group and returns an [x,y",
                            "description": "array indicating\nthe location of the given Node/Group. The backing data for a Node/Group is available as the `data` property.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.Absolute": {
            "name": "Layouts.Absolute",
            "shortname": "Layouts.Absolute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26095,
            "description": "This layout places elements with absolute positioning. The default is to look for a `left` and `top`\nmember in each Node/Group, but you can supply your own `locationFunction` parameter to the constructor to\nderive your own position from each Node/Group.",
            "extends": "Layouts.AbsoluteBackedLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "locationFunction] Takes Node/Group data and returns an [x,y",
                            "description": "array indicating the location of the given Node/Group.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.AbstractHierarchicalLayout": {
            "name": "Layouts.AbstractHierarchicalLayout",
            "shortname": "Layouts.AbstractHierarchicalLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26110,
            "description": "Mixin for hierarchical layouts (those that expect a root node). This class takes care of\nputting `rootNode` and `root` values in the parameters that are subsequently passed into the\nvarious lifecycle methods of the layout. The layout supports multiple root elements; if you do not supply a root then\nthe default behaviour is to look for all top level Nodes and Groups that are not the target of any Edges. You can switch off multiple\nroots, and then the root element is the first Node (or Group, if there are no top level Nodes) found in the Graph (ie the first Node\nor Group you added to the Graph)",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ignoreLoops",
                            "description": "Whether or not to ignore loops in the layout. When false,\nan exception will be thrown if a loop is found.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "multipleRoots",
                            "description": "If false, multiple root elements are not supported.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "getRootNode",
                            "description": "Optional function that can return the Node(s)/Group(s) that should be the root(s)\nof the hierarchy. If this is not provided and `multipleRoots` is not set to false, all top level Nodes and all Groups that are not the target\nof any Edges form the set of root elements. If `multipleRoots` is set to false then the first top level Node in the Toolkit is used, or if no such Node\nexists, then the first Group is used.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "getChildEdges",
                            "description": "Optional function to be used to get edges to child elements for each Node/Group. The\ndefault is simply to look for Nodes/Groups that are targets of an Edge from the focus Node/Group (or one of a Node's port)s. Note that here we\nuse the term \"children\" to mean elements that should appear in the next row/column from the focus element; the children\nof a Group itself are a different concept.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "ignorePorts",
                            "description": "If true, Ports will not be considered when looking for edges (by the default getChildEdges function..if you\nprovide your own getChildEdges function this parameter is ignored.)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "Layouts.Hierarchical": {
            "name": "Layouts.Hierarchical",
            "shortname": "Layouts.Hierarchical",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26311,
            "description": "Provides a hierarchical tree layout, oriented either horizontally or vertically.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "orientation",
                            "description": "Orientation of the layout. Valid values are `\"vertical\"` and `\"horizontal\"`.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"horizontal\""
                        },
                        {
                            "name": "padding] Array of padding values for x and y axes. Default is `[60, 60",
                            "description": "`.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "spacing",
                            "description": "Indicates how the nodes should be spaced in the orthogonal axis to the layout. Valid values are \"auto\" (the default),\nand \"compress\". Auto is the original spacing mechanism, in which all nodes in a certain level of the hierarchy are aligned. \"compress\" disregards the\nsize of the other elements in each level and just spaces nodes according to the padding values.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"auto\""
                        },
                        {
                            "name": "invert",
                            "description": "If true, the layout will be inverted, ie. the root node will be at the bottom for horizontal layouts, and to the right for vertical layouts.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "align",
                            "description": "Valid values are \"center\", \"start\" and \"end\". This instructs the layout where to place child elements in relation to their parents. By default the layout centers child elements relative to their parents.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "compress",
                    "description": "DEPRECATED - use `spacing:\"compress\"`. If true, the layout will use a regular spacing between each node and its parent. Otherwise\nthe layout pushes each node down by the maximum size of some element in that level of the hierarchy. For complex\nhierarchies in which any given node may have children, that is better. But for simple hierarchies, setting\n`compress` can give good results.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "Layouts.Spring": {
            "name": "Layouts.Spring",
            "shortname": "Layouts.Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26789,
            "description": "Provides a force directed graph layout in which connections between nodes are modelled as springs. By default, this Layout\nswitches on the magnetizer, to ensure that no nodes overlap.  You can switch it off via the `magnetize:false` argument\nin the `layout` parameters of a `render` call.",
            "extends": "Layouts.AbstractLayout",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "absoluteBacked",
                            "description": "Whether or not the layout will fall back to absolute positions stored in the data.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "stiffness",
                            "description": "A measure of how stiff the springs are modelled to be.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "200"
                        },
                        {
                            "name": "repulsion",
                            "description": "A measure of how much each Node repels every other Node.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "200"
                        },
                        {
                            "name": "damping",
                            "description": "A measure of how quickly the system settles. This parameter should always be\nset to a value less than 1. A higher value for this parameter will cause the layout to take longer to run.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "limit",
                            "description": "The threshold below which the system is assumed to be stable enough for the\nlayout to exit. This value is related to the values you provide for stiffness and repulsion (and damping, of course,\nbut to a lesser extent).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1000"
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit.Renderers.AbstractRenderer": {
            "name": "jsPlumbToolkit.Renderers.AbstractRenderer",
            "shortname": "jsPlumbToolkit.Renderers.AbstractRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27710,
            "description": "Superclass for renderers",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "view",
                            "description": "Parameters for Node, Port and Edge definitions. Although this is not a required parameter, the vast majority of applications will",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "elementsDraggable",
                            "description": "Whether or not elements should be made draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "elementsDroppable",
                            "description": "If true, elements can be dragged onto other elements and events will be fired.\nWhat you choose to do with that event is up to you.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "id",
                            "description": "Optional id for this renderer. If you provide this you can then subsequently retrieve it via `toolkit.getRenderer(<id>)`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "refreshAutomatically",
                            "description": "Whether or not to automatically refresh the associated layout whenever a Node is added or deleted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enhancedView",
                            "description": "If false, there will be no support for preconfigured parameters or functions in the definitions inside a view. You will want to set this for Angular if you use the 2-way data binding.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "assignPosse",
                            "description": "optional function that, given each node, can return the id of the posse to which the node belongs. a Posse is a group of nodes that should all be dragged together.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "modelLeftAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the x position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "modelTopAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the y position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"top\""
                        },
                        {
                            "name": "debug",
                            "description": "If true, the widget will generate debug information when various events occur.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "refreshLayoutOnEdgeConnect",
                            "description": "If true, the layout will be refreshed each time a new edge is established. This used to be the default behaviour\nof the Surface widget but it now seems unnecessary. We've moved the behaviour to a flag in case anyone experiences issues with the UI not updating correctly after a new edge is added.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "objectFilter",
                            "description": "Optional function that is given every Node or Group that is added, and is expected to return true if the Node/Group should be rendererm\nor false if it should be ignored.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "ignoreGroups",
                            "description": "With this set to true, groups will not be rendered, and nodes that are inside groups will be rendered directly to the canvas as if\nthey are not inside a group. Using this in conjunction with a suitable `objectFilter` gives you the ability to create a renderer for a single group.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "ZoomWidget": {
            "name": "ZoomWidget",
            "shortname": "ZoomWidget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 31609,
            "description": "Provides Pan/Zoom functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "canvas",
                            "description": "The element to apply pan/zoom to.",
                            "type": "Selector|Element"
                        },
                        {
                            "name": "viewport",
                            "description": "The element that will act as the viewport for the canvas.",
                            "type": "Selector|Element"
                        },
                        {
                            "name": "bind",
                            "description": "Function that can bind to an event on an element.",
                            "type": "Function"
                        },
                        {
                            "name": "unbind",
                            "description": "Function that can unbind from an event on an element.",
                            "type": "Function"
                        },
                        {
                            "name": "height",
                            "description": "A function that can return the height for some element.",
                            "type": "Function"
                        },
                        {
                            "name": "width",
                            "description": "A function that can return the width for some element.",
                            "type": "Function"
                        },
                        {
                            "name": "offset",
                            "description": "A function that can return {left:.., top:..} for some element",
                            "type": "Function"
                        },
                        {
                            "name": "id",
                            "description": "A function that can return an id for some element.",
                            "type": "Function"
                        },
                        {
                            "name": "domElement",
                            "description": "A function that can translate between objects referenced by the widget and DOM elements. It might be\nthe case that no tranlation is required - you deal only in DOM elements. But also you might use this with jQuery,\nand pass around jQuery selectors. So this function just normalises elements. If not supplied, the default function\nassumes elements are already DOM elements.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "Optional map of event handlers",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "zoom",
                                    "description": "Optional function callback for when zoom changes.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "pan",
                                    "description": "Optional function callback for when pan changes.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "mousedown",
                                    "description": "Optional function callback for mousedown event.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "mouseup",
                                    "description": "Optional function callback for mouseup event.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "mousemove",
                                    "description": "Optional function callback for mousemove event.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "maybeZoom",
                                    "description": "Optional interceptor for zoom. Returning false prevents zoom from occurring.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "transformOrigin] Optional function callback for transform origin change. This is given the [x,y] (in percent) of the new origin, and the [left, top",
                                    "description": "(in absolute values) of the canvas.",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "clamp",
                            "description": "Whether to clamp when panning such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampZoom",
                            "description": "Whether to clamp when zooming such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampToBackground",
                            "description": "Whether or not to clamp to the background image. This flag means the widget will always ensure at least some of the background is visible. See `clampToBackgroundExtents` for a variant of this.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "clampToBackgroundExtents",
                            "description": "Clamps movement so that when zoomed out, the background image always fills the viewport.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onBackgroundReady",
                            "description": "Optional callback to hit when the background image has loaded.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "panDistance",
                            "description": "How far, in pixels, to pan on pan nudge.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "zoom",
                            "description": "Initial zoom for the widget.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "zoomRange",
                            "description": "Zoom range for the widget.",
                            "type": "Number[]",
                            "optional": true,
                            "optdefault": "[0.05, 3]"
                        },
                        {
                            "name": "enableWheelZoom",
                            "description": "Whether or not wheel zoom is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "wheelFilter",
                            "description": "Optional function to call to check if wheel zooming should be enabled for the current event target.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "wheelReverse",
                            "description": "Optional Defaults to false. If true, the zoom direction is reversed: wheel up zooms out, and wheel down zooms in.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "wheelZoomMetaKey",
                            "description": "If true, the \"meta\" key (CMD on Mac, Ctrl on windows/linux) must\nbe pressed in order for wheel zoom to operate. This can be useful if your UI fills the screen in one or more axes and\nyour users would not be able to scroll past the Surface widget.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enablePan",
                            "description": "Whether or not pan is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enablePanButtons",
                            "description": "Whether or not wheel pan buttons are drawn and enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableAnimation",
                            "description": "Enable animations for panning. Defaults to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enabled",
                            "description": "Whether or not the widget is enabled, ie. responding to mouse input.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "background",
                            "description": "Optional background image parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "url",
                                    "description": "URL for the background. Required for both single images and tiled backgrounds.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "type",
                                    "description": "\"simple\" or \"tiled\" - the type of background.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"simple\""
                                },
                                {
                                    "name": "tileSize",
                                    "description": "For tiled backgrounds, provides the width and height of tiles. Every tile is assumed to have these dimensions, even if the tile has whitespace in it.",
                                    "type": "Number[]",
                                    "optional": true
                                },
                                {
                                    "name": "width",
                                    "description": "Required for tiled backgrounds. Indicates the width of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Required for tiled backgrounds. Indicates the height of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "maxZoom",
                                    "description": "Required for tiled backgrounds. Indicates the maximum zoom level. Zoom starts at 0 - fully zoomed out - and increases in integer values from there. Eash successive zoom level is twice the zoom of the previous level, meaning two times as many tiles in each direction.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "filter",
                            "description": "Optional filter that will be called on down event, with the event target and the event. Returning true from this function means the widget should respond to the event.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "consumeRightClick",
                            "description": "Useful for development: set this to false if you don't want the widget to consume context menu clicks.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "smartMinimumZoom",
                            "description": "Means that the lower zoom bound refers to a multiple of the content bounds, not the viewport.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "[params.padding] Optional values for padding in the x/y axes to leave around the content. This is only of any use if you have disabled panning via mouse drag,\nsince in that case the user sees only scroll bars and has no way of navigating beyond the content. Some padding makes the UI nicer to use. Default is [0,0]",
                    "description": ".",
                    "type": "Number[]"
                }
            ]
        },
        "Surface": {
            "name": "Surface",
            "shortname": "Surface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33943,
            "description": "A widget that provides pan/zoom functionality, as well as the ability to load/store state in the browser.\nYou do not construct an instance of this class manually: you obtain an instance of Surface via a call to the `render`\nmethod on a `jsPlumbToolkitInstance`. But the supported parameters to that `render` method are whatever is supported by\nthe Surface constructor, as documented here.",
            "extends": "AbstractRenderer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "Element to convert into a Surface.",
                            "type": "Element|Selector"
                        },
                        {
                            "name": "elementsDraggable",
                            "description": "Whether or not elements in the Surface should be draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dragOptions",
                            "description": "Options for draggable nodes.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "Optional event bindings. See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "miniview",
                            "description": "Optional miniview configuration.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "container",
                                    "description": "Container for the miniview.  An Element, an element id, or a selector.",
                                    "type": "Element|String|Selector",
                                    "optional": true
                                },
                                {
                                    "name": "initiallyVisible",
                                    "description": "Whether or not the miniview should be invisible until some data is loaded.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "mode",
                            "description": "Mode to initialize the Surface in.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"pan\""
                        },
                        {
                            "name": "panDistance",
                            "description": "How far a pan nudge should move the UI (in pixels).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "zoom",
                            "description": "Initial zoom for the widget.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "zoomRange",
                            "description": "Zoom range for the widget.",
                            "type": "Number[]",
                            "optional": true,
                            "optdefault": "[0.05, 3]"
                        },
                        {
                            "name": "enablePan",
                            "description": "Whether or not panning (via mouse drag) is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableWheelZoom",
                            "description": "Whether or not zooming with the mouse wheel is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "directRender",
                            "description": "If this is set, pan and zoom are disabled, and elements are not draggable. After each time the layout runs, the size of the canvas\nis set to the extents of the contained nodes, and a transform is applied to each axis to account for any elements whose position is negative in that axis. This flag is\nuseful for rendering a diagram in place, without pan/zoom (but with events mapped), and knowing that the container element will always fully enclose the content.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableAnimation",
                            "description": "Enable animations for panning. Defaults to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "wheelFilter",
                            "description": "Optional CSS selector representing elements that should not respond to wheel zoom.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "panFilter",
                            "description": "Optional; either a CSS selector representing elements that should allow a pan event to begin, or a function that will be\n                         called with the event target. Returning true from this function means the widget should respond to the event.",
                            "type": "String|Function",
                            "optional": true
                        },
                        {
                            "name": "wheelSensitivity",
                            "description": "How many pixels each click of the mouse wheel represents when zooming. Note that this value, while expressed in pixels, is mapped in a variety of ways depending on the browser.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "wheelReverse",
                            "description": "Optional Defaults to false. If true, the zoom direction is reversed: wheel up zooms out, and wheel down zooms in.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "wheelZoomMetaKey",
                            "description": "If true, the \"meta\" key (CMD on Mac, Ctrl on windows/linux) must\nbe pressed in order for wheel zoom to operate. This can be useful if your UI fills the screen in one or more axes and\nyour users would not be able to scroll past the Surface widget.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "wheelPan",
                            "description": "Optional Defaults, to false. If true, two finger scrolling on a trackpad will cause the surface to pan its content, and the Control (or Command on mac) key must be\nheld down in order to zoom. Note that IE and Opera do not support horizontal scrolling at all, so if you use this you are making a decision about limiting browser support.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "enablePanButtons",
                            "description": "Whether or not to show the pan nudge buttons on the borders of the widgets.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "lassoFilter",
                            "description": "Optional selector for elements on which a mousedown should not cause the lasso to activate.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "lassoInvert",
                            "description": "If true, the lasso operates by masking the unselected parts of the display.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "lassoSelectionFilter",
                            "description": "Optional function that can be used to filter the set of nodes a lasso drag is selecting. The function is given each candidate Node in turn; returning false indicates the Node should not be selected.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "consumeRightClick",
                            "description": "Useful for development: set this to false if you don't want the widget to consume context menu clicks.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "stateHandle",
                            "description": "If supplied, this will be used as the default handle for state save/restore operations.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "clamp",
                            "description": "Whether to clamp when panning such that there is always content visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clampToBackground",
                            "description": "If a background is set, whether to clamp movement such that some part of the background is always visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "clampToBackgroundExtents",
                            "description": "If a background is set, whether to clamp movement such that the background fills as much of the viewport as it can.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "background",
                            "description": "Optional background image parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "url",
                                    "description": "URL for the background. Required for both single images and tiled backgrounds.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "type",
                                    "description": "\"simple\" or \"tiled\" - the type of background.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"simple\""
                                },
                                {
                                    "name": "tileSize",
                                    "description": "For tiled backgrounds, provides the width and height of tiles. Every tile is assumed to have these dimensions, even if the tile has whitespace in it.",
                                    "type": "Number[]",
                                    "optional": true
                                },
                                {
                                    "name": "width",
                                    "description": "Required for tiled backgrounds. Indicates the width of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Required for tiled backgrounds. Indicates the height of the full image.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "maxZoom",
                                    "description": "Required for tiled backgrounds. Indicates the maximum zoom level. Zoom starts at 0 - fully zoomed out - and increases in integer values from there. Eash successive zoom level is twice the zoom of the previous level, meaning two times as many tiles in each direction.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "jsPlumb",
                            "description": "Optional set of jsPlumb Defaults to use for this renderer. The format and allowed properties is that of\nthe Defaults object in jsPlumb. You can also set display properties in the view.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "autoExitSelectMode",
                            "description": "When true (which is the default), the Surface will automatically jump back into Pan mode after some nodes have been selected.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "zoomToFit",
                            "description": "If true, content will be zoomed to fit the viewport when a dataLoadEnd event is received.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "zoomToFitIfNecessary",
                            "description": "If true, content will be zoomed to fit the viewport, if necessary (meaning if it fits inside the viewport already it wont be zoomed, which is different from how `zoomToFit` works) when a dataLoadEnd event is received. If this and `zoomToFit` are both set, this takes precedence.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "storePositionsInModel",
                            "description": "By default, the left/top positions of nodes that have been dragged will be written into the data for each node after drag stops. You can set this to false to disable that behaviour.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "modelLeftAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the x position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "modelTopAttribute",
                            "description": "Optional; specifies the name of the attribute by which to store the y position of a dragged node of `storePositionsInModel` is true.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"top\""
                        },
                        {
                            "name": "assignPosse",
                            "description": "optional function that, given each node, can return the id of the posse to which the node belongs. a Posse is a group of nodes that should all be dragged together.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "relayoutOnGroupUpdate",
                            "description": "If true, any change to a Group's nodes will cause a relayout.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "tags",
                            "description": "Optional array of custom tag specs.",
                            "type": "Array<CustomTagSpec>",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[params.padding] Optional values for padding in the x/y axes to leave around the content. This is only of any use if you have disabled panning via mouse drag,\nsince in that case the user sees only scroll bars and has no way of navigating beyond the content. Some padding makes the UI nicer to use. Default is [0,0]",
                    "description": ".",
                    "type": "Number[]"
                }
            ]
        },
        "jsPlumbToolkit.Renderers.Miniview": {
            "name": "jsPlumbToolkit.Renderers.Miniview",
            "shortname": "jsPlumbToolkit.Renderers.Miniview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35895,
            "description": "The Miniview widget. A single instance of this is paired with an instance of Surface.\n\nThe fundamental difference between this and a Surface is that a Miniview does not draw connections. Plus, it\ncalculates its own zoom based on the ratio of the size of its viewport compared to the size of the viewport of\nthe related Surface. In reality, a Miniview could reside inside an element that is much bigger than that in which\nthe related Surface resides, but it does not seem likely that that would normally be the case.\n\nThe Miniview widget provides a floating window that represents a scaled version of the viewport of the related\nSurface. Dragging this window around causes the related Surface to pan.  Resizing (via grabbing a corner and\ndragging) the window causes the Surface to zoom in/out (within its allowed zoom range).\n\nAll of the visual aspects of the Miniview can be controlled via CSS, and you can provide a custom CSS class\nto allow you to target the styles for an individual Miniview more easily.\n\nYou do not create a Miniview directly - you either specify its parameters in a `render` call on a `jsPlumbToolkitInstance`,\nor you call `createMiniview` on an existing `Surface`.",
            "constructorg": ""
        },
        "jsPlumbToolkit.Widgets.Lasso": {
            "name": "jsPlumbToolkit.Widgets.Lasso",
            "shortname": "jsPlumbToolkit.Widgets.Lasso",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36537,
            "description": "The Lasso widget allows users to select an area with the mouse. You will not typically need to interact with\nthis widget, or create one manually, since the `Surface` widget handles all of that for you.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for the widget.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pageLocation",
                            "description": "Function that can return a page location for an event.",
                            "type": "Function"
                        },
                        {
                            "name": "canvas",
                            "description": "DOM Element on which the Lasso will operate.",
                            "type": "Element"
                        },
                        {
                            "name": "invert",
                            "description": "If true, the lasso is drawn as blank space over the selected area, with\nelements filling the excluded area.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onStart",
                            "description": "Optional function to call at the start of a lasso operation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onEnd",
                            "description": "Optional function to call at the end of a lasso operation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSelect",
                            "description": "Optional function to call on each mousemove during a lasso operation.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "Optional CSS selector identifying elements that should be filtered and not begin a lasso operation.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "jsPlumbToolkit.Dialogs": {
            "name": "jsPlumbToolkit.Dialogs",
            "shortname": "jsPlumbToolkit.Dialogs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36704,
            "description": "A library for providing simple dialogs to use with an instance of the jsPlumb Toolkit."
        },
        "jsPlumbToolkit.DrawingTools": {
            "name": "jsPlumbToolkit.DrawingTools",
            "shortname": "jsPlumbToolkit.DrawingTools",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37280,
            "description": "Provides a set of drawing tools to use in conjunction with a Surface in the Toolkit - select, drag, resize.\nEverything this tool adds to the UI has an associated CSS class, so you can skin it very easily. There are no\nmethods on this class - you just construct one with the parameters you need.",
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "renderer",
                            "description": "Surface renderer to associate the tools with.",
                            "type": "Surface"
                        },
                        {
                            "name": "widthAttribute",
                            "description": "Name of the attribute used to store the node's width in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"w\""
                        },
                        {
                            "name": "heightAttribute",
                            "description": "Name of the attribute used to store the node's height in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"h\""
                        },
                        {
                            "name": "leftAttribute",
                            "description": "Name of the attribute used to store the node's left position in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "topAttribute",
                            "description": "Name of the attribute used to store the node's top position in its data.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"top\""
                        }
                    ]
                },
                {
                    "name": "onDemand",
                    "description": "When true, the drawing tools are only launched when the user calls `edit` with a node/group. By default\nthe drawing tools are launched whenever a node/group is added to the selection.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "dist/js/demo-support.js",
            "line": 1,
            "description": "This is just a collection of utility methods used by the jsPlumb Toolkit demos to get random datasets for\ndemo purposes.",
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 63,
            "description": "Create an instance of the jsPlumb Toolkit.",
            "itemtype": "method",
            "name": "instance",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 284,
            "description": "Generate a Miniview directive.",
            "itemtype": "method",
            "name": "miniview",
            "return": {
                "description": "A Miniview directive definition.",
                "type": "Object"
            },
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 359,
            "description": "Binds to some event related to the toolkit with the given id, which may or may not yet exist, and in fact\nfor the case for which this functionality was added - a ready event - it most likely does not.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "event",
                    "description": "ID of the event to bind to. Currently we support `ready` only.",
                    "type": "String"
                },
                {
                    "name": "toolkitId",
                    "description": "ID of the Toolkit to bind the event to.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the event fires. The function is passed (toolkit, toolkitId, eventId) as args.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 374,
            "description": "Gets an instance of the jsPlumb Toolkit by the ID used to create it.",
            "itemtype": "method",
            "name": "getToolkit",
            "params": [
                {
                    "name": "id",
                    "description": "ID used to create the Toolkit instance you want to retrieve.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Optional parameters for the Toolkit instance's constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An instance of the jsPlumb Toolkit; null if not found.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 389,
            "description": "Resets the toolkit with the given id - which is to say, deletes it, so that the next request\nfor it returns null and it gets recreated.",
            "itemtype": "method",
            "name": "resetToolkit",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the toolkit to reset.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 407,
            "description": "Registers a Surface. If any extra components have been registered for this Surface they will be initialised now.",
            "itemtype": "method",
            "name": "addSurface",
            "params": [
                {
                    "name": "id",
                    "description": "ID to register the Surface with.",
                    "type": "String"
                },
                {
                    "name": "surface",
                    "description": "Surface instance.",
                    "type": "Surface"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 430,
            "description": "Retrieve a Surface by id. You will have set the id of the Surface via the `surface-id` attribute on the directive\nelement.",
            "itemtype": "method",
            "name": "getSurface",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Surface to retrieve.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 440,
            "description": "Add a component to the Surface with the given id. If the Surface already exists and has been initialised the component\nwill be added immediately; otherwise it will be enqueued for later processing.",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "surfaceId",
                    "description": "ID of the Surface to add the component to.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Constructor parameters for the component.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of component to add.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 452,
            "description": "Add a Palette to the Surface with the given id. If the Surface already exists and has been initialised the Palette\nwill be added immediately; otherwise it will be enqueued for later processing. This is really just a wrapper around\naddComponent.",
            "itemtype": "method",
            "name": "addPalette",
            "params": [
                {
                    "name": "surfaceId",
                    "description": "ID of the Surface to add the Palette to.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Constructor parameters for the Palette.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-angular-1.x.js",
            "line": 464,
            "description": "Add a Miniview to the Surface with the given id. If the Surface already exists and has been initialised the Miniview\nwill be added immediately; otherwise it will be enqueued for later processing. This is just a wrapper around addComponent.",
            "itemtype": "method",
            "name": "addMiniview",
            "params": [
                {
                    "name": "surfaceId",
                    "description": "ID of the Surface to add the Miniview to.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Constructor parameters for the Miniview.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit directive."
        },
        {
            "file": "dist/js/jsplumbtoolkit-drop.js",
            "line": 212,
            "description": "sets whether or not dragging is currently enabled.",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-drop.js",
            "line": 254,
            "description": "find all the connectors in the canvas, computing their position in page coords (taking into account the viewport\nposition of the surface and its current zoom). We return [ connection, connector, bounding rect ] for each connector.",
            "return": {
                "description": "",
                "type": "Array<EdgeSpec>"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 81,
            "description": "on detach event, deactivate the editor.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 274,
            "description": "Repaints the current connection, passing some arguments, optionally. These are retrieved inside `refresh`,\nand are ultimately handed off to the subclass's `repaint` method. Subclasses should call this on things like handle\ndragging, as the existence (and nature of ) args can subsequently be used by their `repaint` method to decide whether or not\nto redraw all the handles (such as you would in the event of an external paint event), or just to reposition the existing\nones. During a drag, of course, blowing away the current handle would be bad.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 286,
            "description": "Fires a connection edit event, passing the current connection, and the current\nconnection's exported geometry.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 296,
            "description": "Redraw anchor placeholders and editor handles.",
            "params": [
                {
                    "name": "args",
                    "description": "Optional args to pass to the subclass repaint method."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 308,
            "description": "Draws, or repositions if they exist already, the anchor placeholders for the current connection.",
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 364,
            "description": "Removes anchor placeholders.",
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 406,
            "description": "Activate the editor, with the given Connection. First we\ncall `deactivate`, so there's only ever one edit happening at a time.\nThen we set the current connection, and override its paint method.",
            "params": [
                {
                    "name": "connection",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 459,
            "description": "Deactivates the editor, removing all editor handles and anchor placeholders etc.",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 504,
            "description": "relocate the given continuous anchor according to the given proximity of `pos` to each of the anchor's supported faces. the face is changed\non the anchor itself (and the anchor is locked), and in this case we simply return the current value of `pos`, meaning the user sees the drag proxy\nunder the mouse cursor, which is probably not where the anchor is now positioned, but it makes for a better UX. on drag stop, for all anchor types,\nthe anchor proxy is relocated to the current value.",
            "params": [
                {
                    "name": "anchor",
                    "description": ""
                },
                {
                    "name": "ep",
                    "description": ""
                },
                {
                    "name": "pos",
                    "description": ""
                },
                {
                    "name": "dragEl",
                    "description": ""
                },
                {
                    "name": "constrainRect",
                    "description": ""
                },
                {
                    "name": "elementSize",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 562,
            "description": "relocate the given dynamic anchor according to the given proximity of `pos` to each of the anchor's supported locations. the face is changed\non the anchor itself (and the anchor is locked), and in this case we simply return the current value of `pos`, meaning the user sees the drag proxy\nunder the mouse cursor, which is probably not where the anchor is now positioned, but it makes for a better UX. on drag stop, for all anchor types,\nthe anchor proxy is relocated to the current value.",
            "params": [
                {
                    "name": "anchor",
                    "description": ""
                },
                {
                    "name": "pos",
                    "description": ""
                },
                {
                    "name": "dragEl",
                    "description": ""
                },
                {
                    "name": "constrainRect",
                    "description": ""
                },
                {
                    "name": "elementSize",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 716,
            "description": "Starts editing of the given Edge, Connection, or Edge ID.",
            "itemtype": "method",
            "name": "startEditing",
            "params": [
                {
                    "name": "edgeOrConnection",
                    "description": "Either an Edge, or a Connection, or an Edge ID.",
                    "type": "String|Edge|Connection"
                },
                {
                    "name": "params",
                    "description": "Optional params for the start edit call.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 750,
            "description": "Stops editing, if editing is happening right now. Otherwise does nothing.",
            "itemtype": "method",
            "name": "stopEditing",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 762,
            "description": "Clears edits for the given Edge, Connection, or Edge ID.",
            "params": [
                {
                    "name": "edgeOrConnection",
                    "description": "Either an Edge, or a Connection, or an Edge ID.",
                    "type": "String|Edge|Connection"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 823,
            "description": "for the given set of segments, use the absolute coordinates to figure out the origin of the\nconnector, then translate to coords relative to this origin. also populate the orientation value.",
            "params": [
                {
                    "name": "segments",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 865,
            "description": "Flowchart connector, editable.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 900,
            "description": "export the current geometry in a format that _importGeometry can handle. this connector exports\nthe source/target points as `source` and `target` respectively, as well as an array labelled\n`segments`, which is the list of corner points.  There are, therefore, n+1 segments in a geometry\nwhose segments array contains n entries.",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1255,
            "description": "For a given segment, find it - and its index - inside our current list.",
            "params": [
                {
                    "name": "segment",
                    "description": "The segment to locate",
                    "type": "Segment"
                },
                {
                    "name": "findRelatives",
                    "description": "If true, look also for segments with the same orientation in both forwards and backwards directions. These latter are used when\ntrying to decide of a segment can be deleted.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "If found, a context object containing the segment, its index, its previous/next segments (if defined),\nand optionally (if requested) segments with the same orientation in both forwards and backwards directions. These latter are used when\ntrying to decide of a segment can be deleted.",
                "type": "SegmentContext"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1475,
            "description": "Attaches a delegated drag listener for segment handles. When dragged,\na handle is constrained to move in the perpendicular axis to that of the segment,\nand each time it moves the underlying editable flowchart connector is informed.\nIt is the connector itself that decides what happens to the path; it returns the\nnew full list of segments from the `setSegmentPosition` method. This drag handler\nthen stores the new geometry for the segment being dragged, and calls\n`repaintConnection`, which is a method on the superclass. We pass in the current\nsegment to this method, which itself calls `repaint` on the Connection, passing in\nany parameters we gave it.\n\nThis method - or at least the behaviour of this method - is\nspecific to the flowchart editor. the bezier editor also\nsupport handle dragging, but it does different stuff.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1536,
            "description": "Repaint the editor. This may or may not have come\nabout as the result of a call by this class to `repaintConnection` - if\n`internalEditorRepaint` and/or `args` is set, then that is the case.",
            "override": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1562,
            "description": "clear all handles, except, optionally, the one provided.",
            "params": [
                {
                    "name": "excludeHandle",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "override": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1575,
            "description": "Activates the editor, on the given connection.",
            "override": "",
            "params": [
                {
                    "name": "conn",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1588,
            "description": "updates the current origin of the connector's SVG element (the location of its to left corner wrt\nthe origin of the jsplumb instance's container). Then updates the offset of the source and target points\nfrom the origin of the SVG element. Finally, extracts the control point information from the connection,\neither as geometry (if previously edited or set) or from the computed control points.",
            "override": "",
            "access": "protected",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-editable-connectors.js",
            "line": 1625,
            "description": "Trims any segments that are now of length zero, then\nconcatenates subsequent segments that are in the same axis.\nthen instructs the superclass to repaint (which will\nresult in this class redrawing all its handles)",
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-print.js",
            "line": 3,
            "description": "A collection of utilities that are helpful when printing with the Toolkit.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 61,
            "description": "Tests that the two values are no further than `amount` apart.",
            "params": [
                {
                    "name": "v1",
                    "description": "First value to compare"
                },
                {
                    "name": "v2",
                    "description": "Second value to compare"
                },
                {
                    "name": "amount",
                    "description": "Optional, defaults to 0.0005."
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 74,
            "description": "Make an event for the given element. Events use page coordinates so we just use the getBoundingClientRect()\nmethod on the given element. The event is positioned on the center of the given element.",
            "params": [
                {
                    "name": "surface",
                    "description": ""
                },
                {
                    "name": "el",
                    "description": ""
                }
            ],
            "return": {
                "description": "}",
                "type": "ClientY: *, clientX: *, pageY: *, screenX: *, pageX: *, screenY: *"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 92,
            "description": "Transpose the given event by dx + dy",
            "params": [
                {
                    "name": "evt",
                    "description": "event to transpose"
                },
                {
                    "name": "dx",
                    "description": "amount to shift in x axis"
                },
                {
                    "name": "dy",
                    "description": "amount to shift in y axis"
                }
            ],
            "return": {
                "description": "}",
                "type": "ClientY: *, clientX: *, pageY: *, screenX: *, pageX: *, screenY: *"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 231,
            "description": "Drag the given element to the given x,y on the canvas. We adjust for the container's page position, but the\nx,y passed in here is the position on the canvas. This is important to remember.",
            "params": [
                {
                    "name": "surface",
                    "description": ""
                },
                {
                    "name": "el",
                    "description": ""
                },
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 256,
            "description": "Drag the element by the given dx,dy.",
            "params": [
                {
                    "name": "surface",
                    "description": "The Surface instance we're operating on."
                },
                {
                    "name": "el",
                    "description": "DOM Element to move"
                },
                {
                    "name": "dx",
                    "description": "Distance in X axis to move"
                },
                {
                    "name": "dy",
                    "description": "Distance in Y axis to move"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 279,
            "description": "Synthesize an event",
            "params": [
                {
                    "name": "l",
                    "description": ""
                },
                {
                    "name": "t",
                    "description": ""
                }
            ],
            "return": {
                "description": "}",
                "type": "ClientY: *, clientX: *, pageY: *, screenX: *, pageX: *, screenY: *"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 379,
            "description": "Randomly drag a node around. Can be useful to ensure the model is being updated, or you're getting\ncallbacks you expect, etc. We use this internally when we just want a node to move and we don't care where\nit moves to.",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 389,
            "description": "Randomly drag a DOM element around",
            "params": [
                {
                    "name": "el",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 397,
            "description": "Connect, using the mouse, `obj1` to `obj2`. This will throw an Error if either or both of the arguments cannot be\nresolved. Any interceptors you have setup on the underlying Toolkit\ninstance will be invoked - this functions just as if the user had used the mouse to drag a connection from\none object to the other.",
            "params": [
                {
                    "name": "obj1",
                    "description": "An node/group/port ID, or node/group/port, or a DOM element."
                },
                {
                    "name": "obj2",
                    "description": "An node/group/port ID, or node/group/port, or a DOM element."
                },
                {
                    "name": "callbacks",
                    "description": "Optional map of callbacks for the connection.",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 422,
            "description": "Shortcut to the underlying `load` method of the toolkit.",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 431,
            "description": "Shortcut to the underlying `clear` method of the toolkit.",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 439,
            "description": "For the given argument, find and return the corresponding DOM element.",
            "params": [
                {
                    "name": "obj",
                    "description": "A node/group/port id, or node/group/port, or a DOM element."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 449,
            "description": "For the given argument, find and return the underlying Connection used to render it.",
            "params": [
                {
                    "name": "obj",
                    "description": "An edge ID, or an Edge."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 458,
            "description": "Drag the given node into the given group.",
            "params": [
                {
                    "name": "node",
                    "description": "Node id, Node, or DOM element."
                },
                {
                    "name": "group",
                    "description": "Group id, Group, or DOM element."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 476,
            "description": "Gets a Group from the underlying Toolkit.",
            "params": [
                {
                    "name": "obj",
                    "description": "Group Id, DOM element, or Group."
                }
            ],
            "return": {
                "description": "",
                "type": "Group"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 485,
            "description": "Gets a Node from the underlying Toolkit.",
            "params": [
                {
                    "name": "obj",
                    "description": "Node Id, DOM element, or Node."
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 494,
            "description": "Find the corresponding Toolkit object for the given input.",
            "params": [
                {
                    "name": "obj",
                    "description": "A string representing an ID, a DOM element, or an existing Toolkit object."
                }
            ],
            "return": {
                "description": "",
                "type": "Node|Port|Group|Edge"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 503,
            "description": "Drag the given Node to the given [x,y], which are canvas coordinates.",
            "params": [
                {
                    "name": "obj",
                    "description": "Node id, node, or DOM element."
                },
                {
                    "name": "x",
                    "description": "Location on canvas in X axis to position top left corner of the node."
                },
                {
                    "name": "y",
                    "description": "Location on canvas in Y axis to position top left corner of the node."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 518,
            "description": "Drag the given Node by the given x/y amounts.",
            "params": [
                {
                    "name": "obj",
                    "description": "Node id, node, or DOM element."
                },
                {
                    "name": "x",
                    "description": "Amount to move in X axis"
                },
                {
                    "name": "y",
                    "description": "Amount to move in Y axis"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 533,
            "description": "Drag the given DOM element by the given x/y amounts.",
            "params": [
                {
                    "name": "obj",
                    "description": "DOM element."
                },
                {
                    "name": "x",
                    "description": "Amount to move in X axis"
                },
                {
                    "name": "y",
                    "description": "Amount to move in Y axis"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 543,
            "description": "Connect the given source and target via a call on the Toolkit, ie. without using the mouse.",
            "params": [
                {
                    "name": "source",
                    "description": "Node/Port/Group id, node/port/group, or DOM element."
                },
                {
                    "name": "target",
                    "description": "Node/Port/Group id, node/port/group, or DOM element."
                },
                {
                    "name": "data",
                    "description": "Optional data for the edge."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 560,
            "description": "Drag the given Group to the given [x,y], which are canvas coordinates.",
            "params": [
                {
                    "name": "obj",
                    "description": "Group id, group, or DOM element."
                },
                {
                    "name": "x",
                    "description": "Location on canvas in X axis to position top left corner of the group."
                },
                {
                    "name": "y",
                    "description": "Location on canvas in Y axis to position top left corner of the group."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 568,
            "description": "Trigger the event with the given name on the given object. By default the event will occur in the middle of the DOM element\nrepresenting the object.",
            "params": [
                {
                    "name": "obj",
                    "description": "Node/Port/Group id, node/port/group, or DOM element."
                },
                {
                    "name": "eventName",
                    "description": "eg 'click', 'mouseover'"
                },
                {
                    "name": "evt",
                    "description": "Optional, an event you previously created via #makeEvent. Sometimes you want to control the specific location\nof the event.",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 586,
            "description": "Synthesize an event for the given object.",
            "params": [
                {
                    "name": "obj",
                    "description": "Node/Port/Group id, node/port/group, or DOM element."
                },
                {
                    "name": "dx",
                    "description": "Optional offset from the center of the x axis of the related DOM element to position the event.",
                    "optional": true
                },
                {
                    "name": "dy",
                    "description": "Optional offset from the center of the y axis of the related DOM element to position the event.",
                    "optional": true
                }
            ],
            "return": {
                "description": "|void}",
                "type": "ClientY: *, clientX: *, pageY: *, screenX: *, pageX: *, screenY: *"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 607,
            "description": "Gets an Edge.",
            "params": [
                {
                    "name": "obj",
                    "description": "Edge ID, or Edge object."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 616,
            "description": "Updates an Edge.",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge, or edge ID."
                },
                {
                    "name": "data",
                    "description": "Data to update the edge with."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 625,
            "description": "Gets all edges in the underlying Toolkit.",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 633,
            "description": "Gets the Endpoint that was rendered for some port.",
            "params": [
                {
                    "name": "obj",
                    "description": "Port, or port ID."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 642,
            "description": "Add a Node to the Toolkit.",
            "params": [
                {
                    "name": "data",
                    "description": "Data for the Node."
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 651,
            "description": "Update a Node in to the Toolkit.",
            "params": [
                {
                    "name": "obj",
                    "description": "Node, or Node Id."
                },
                {
                    "name": "data",
                    "description": "Data for the Node."
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 661,
            "description": "Clicks on the node with the given ID.",
            "params": [
                {
                    "name": "nodeId",
                    "description": "ID of the node to click on."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 669,
            "description": "Clicks on an element inside the node with the given ID.",
            "params": [
                {
                    "name": "nodeId",
                    "description": "ID of the node to click on."
                },
                {
                    "name": "selector",
                    "description": "CSS selector identifying the child element to click on."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 678,
            "description": "Clicks on the given edge",
            "params": [
                {
                    "name": "spec",
                    "description": "ID of the edge, or the Edge"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 686,
            "description": "Clicks on the overlay with the given ID, on the given Edge.",
            "params": [
                {
                    "name": "edgeSpec",
                    "description": "ID of the Edge, or the Edge"
                },
                {
                    "name": "overlayId",
                    "description": "ID of the overlay to click on."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 695,
            "description": "Clicks on the port with the given ID on the node with given node id.",
            "params": [
                {
                    "name": "nodeId",
                    "description": "ID of the node containing the port"
                },
                {
                    "name": "portId",
                    "description": "ID of the port to click on."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 704,
            "description": "Returns the count of Edges in the underlying Toolkit.",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 712,
            "description": "Create a new Undo manager and attach to our Surface.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-testing.js",
            "line": 722,
            "description": "Drag the given element onto the canvas, optionally at a specific x,y. Use this when you want to test drag/drop\nfrom some palette.",
            "params": [
                {
                    "name": "el",
                    "description": "Element to drop onto the canvas."
                },
                {
                    "name": "x",
                    "description": "Optional, defaults to 250."
                },
                {
                    "name": "y",
                    "description": "Optional, defaults to 250."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 14,
            "description": "Superclass for edge add/remove.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 191,
            "description": "One update action for all types",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 261,
            "description": "Compounds a set of actions into one. An example of this is a node remove, in which all of its edges and ports are also\nremoved.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 309,
            "description": "Perhaps compound the given remove action with any prior edge remove actions whose source or target is the focus of the terminus\nremove. we search down the undo stack looking for EdgeRemoveActions that are for edges connected to the terminus that is being removed,\nadding them to a list of candidates until we fail to match. If this list of candidates is of non zero length, we compound them all\ninto one action, prepending (this is important - the terminus has to exist before the edges on undo) the terminus remove action. we then\nsplice the undo stack to remove all the candidates we found, and return a compound action, which is added to the top of the undo stack.",
            "params": [
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "UndoRedoAction"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 348,
            "description": "Add a terminus remove action - node or group. pulled into a common method since they both do the same thing, but also\nterminus remove actions are a candidate for \"compounding\" with any prior edge remove events.",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 365,
            "description": "Bind listeners to the events in the Toolkit we are interested in.",
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 440,
            "description": "Fire the on change event, if there's a listener registered.",
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 447,
            "description": "add a command to the undo stack, clearing the redo stack.",
            "params": [
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 467,
            "description": "Notification that some edge has been replaced with a copy. This occurs when an edge removed is undone or an edge add is\nredone. we need to update all references to the previous edge with this new one, as the toolkit no longer knows about\nthe old edge. This is not a method that should be called from outside of the undo manager.",
            "params": [
                {
                    "name": "previousId",
                    "description": ""
                },
                {
                    "name": "newEdge",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 488,
            "description": "Execute undo on the last command in the undo stack, if it isn't empty.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 501,
            "description": "Re-execute the last command in the redo stack, if it isn't empty.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 514,
            "description": "Clears both stacks and fires an update event.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit-undo-redo.js",
            "line": 523,
            "description": "Run a series of operations as a single transaction in the undo stack, meaning that they will all be undone/redone\nat once.",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1,
            "description": "jsBezier\n\nCopyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n\nlicensed under the MIT license.\n\na set of Bezier curve functions that deal with Beziers, used by jsPlumb, and perhaps useful for other people.  These functions work with Bezier\ncurves of arbitrary degree.\n\n- functions are all in the 'jsBezier' namespace.\n\n- all input points should be in the format {x:.., y:..}. all output points are in this format too.\n\n- all input curves should be in the format [ {x:.., y:..}, {x:.., y:..}, {x:.., y:..}, {x:.., y:..} ]\n\n- 'location' as used as an input here refers to a decimal in the range 0-1 inclusive, which indicates a point some proportion along the length\nof the curve.  location as output has the same format and meaning.\n\n\nFunction List:\n--------------\n\ndistanceFromCurve(point, curve)\n\n\tCalculates the distance that the given point lies from the given Bezier.  Note that it is computed relative to the center of the Bezier,\nso if you have stroked the curve with a wide pen you may wish to take that into account!  The distance returned is relative to the values\nof the curve and the point - it will most likely be pixels.\n\ngradientAtPoint(curve, location)\n\n\tCalculates the gradient to the curve at the given location, as a decimal between 0 and 1 inclusive.\n\ngradientAtPointAlongCurveFrom (curve, location)\n\n\tCalculates the gradient at the point on the given curve that is 'distance' units from location.\n\nnearestPointOnCurve(point, curve)\n\n\tCalculates the nearest point to the given point on the given curve.  The return value of this is a JS object literal, containing both the\npoint's coordinates and also the 'location' of the point (see above), for example:  { point:{x:551,y:150}, location:0.263365 }.\n\npointOnCurve(curve, location)\n\n\tCalculates the coordinates of the point on the given Bezier curve at the given location.\n\npointAlongCurveFrom(curve, location, distance)\n\n\tCalculates the coordinates of the point on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\nspace as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n\nlocationAlongCurveFrom(curve, location, distance)\n\n\tCalculates the location on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\nspace as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n\nperpendicularToCurveAt(curve, location, length, distance)\n\n\tCalculates the perpendicular to the given curve at the given location.  length is the length of the line you wish for (it will be centered\non the point at 'location'). distance is optional, and allows you to specify a point along the path from the given location as the center of\nthe perpendicular returned.  The return value of this is an array of two points: [ {x:...,y:...}, {x:...,y:...} ].",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 84,
            "description": "Calculates the distance that the point lies from the curve.",
            "params": [
                {
                    "name": "point",
                    "description": "a point in the form",
                    "type": "X:567, y:3342"
                },
                {
                    "name": "curve",
                    "description": "a Bezier curve in the form [, {x:..., y:...}, {x:..., y:...}, {x:..., y:...}].  note that this is currently\nhardcoded to assume cubiz beziers, but would be better off supporting any degree.",
                    "type": "x:..., y:..."
                }
            ],
            "return": {
                "description": "a JS object literal containing location and distance, for example: .  Location is analogous to the location\nargument you pass to the pointOnPath function: it is a ratio of distance travelled along the curve.  Distance is the distance in pixels from\nthe point to the curve.",
                "type": "location:0.35, distance:10"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 117,
            "description": "finds the nearest point on the curve to the given point.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 156,
            "description": "counts how many roots there are.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 291,
            "description": "calculates a point on the curve, for a Bezier of arbitrary order.",
            "params": [
                {
                    "name": "curve",
                    "description": "an array of control points, eg [, {x:50,y:50}, {x:100,y:100}, {x:120,y:100}].  For a cubic bezier this should have four points.",
                    "type": "X:10,y:20"
                },
                {
                    "name": "location",
                    "description": "a decimal indicating the distance along the curve the point should be located at.  this is the distance along the curve as it travels, taking the way it bends into account.  should be a number from 0 to 1, inclusive."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 315,
            "description": "finds the point that is 'distance' along the path from 'location'.  this method returns both the x,y location of the point and also\nits 'location' (proportion of travel along the path); the method below - _pointAlongPathFrom - calls this method and just returns the\npoint.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 362,
            "description": "finds the point that is 'distance' along the path from 'location'.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 369,
            "description": "finds the location that is 'distance' along the path from 'location'.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 376,
            "description": "returns the gradient of the curve at the given location, which is a decimal between 0 and 1 inclusive.\n\nthanks // http://bimixual.org/AnimationLibrary/beziertangents.html",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 388,
            "description": "returns the gradient of the curve at the point which is 'distance' from the given location.\nif this point is greater than location 1, the gradient at location 1 is returned.\nif this point is less than location 0, the gradient at location 0 is returned.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 400,
            "description": "calculates a line that is 'length' pixels long, perpendicular to, and centered on, the path at 'distance' pixels from the given location.\nif distance is not supplied, the perpendicular for the given location is computed (ie. we set distance to zero).",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 414,
            "description": "Calculates all intersections of the given line with the given curve.",
            "params": [
                {
                    "name": "x1",
                    "description": ""
                },
                {
                    "name": "y1",
                    "description": ""
                },
                {
                    "name": "x2",
                    "description": ""
                },
                {
                    "name": "y2",
                    "description": ""
                },
                {
                    "name": "curve",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 466,
            "description": "Calculates all intersections of the given box with the given curve.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of top left corner of box"
                },
                {
                    "name": "y",
                    "description": "Y position of top left corner of box"
                },
                {
                    "name": "w",
                    "description": "width of box"
                },
                {
                    "name": "h",
                    "description": "height of box"
                },
                {
                    "name": "curve",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 484,
            "description": "Calculates all intersections of the given bounding box with the given curve.",
            "params": [
                {
                    "name": "boundingBox",
                    "description": "Bounding box, in  format.",
                    "type": "x:.., y:..., w:..., h:..."
                },
                {
                    "name": "curve",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 591,
            "description": "Creates a Touch object.",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "pageX",
                    "description": ""
                },
                {
                    "name": "pageY",
                    "description": ""
                },
                {
                    "name": "screenX",
                    "description": ""
                },
                {
                    "name": "screenY",
                    "description": ""
                },
                {
                    "name": "clientX",
                    "description": ""
                },
                {
                    "name": "clientY",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Touch"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 618,
            "description": "Create a synthetic touch list from the given list of Touch objects.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 630,
            "description": "Create a Touch object and then insert it into a synthetic touch list, returning the list.s",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "pageX",
                    "description": ""
                },
                {
                    "name": "pageY",
                    "description": ""
                },
                {
                    "name": "screenX",
                    "description": ""
                },
                {
                    "name": "screenY",
                    "description": ""
                },
                {
                    "name": "clientX",
                    "description": ""
                },
                {
                    "name": "clientY",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1071,
            "description": "Removes an element from the DOM, and deregisters all event handlers for it. You should use this\nto ensure you don't leak memory.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "el",
                    "description": "Element, or id of the element, to remove.",
                    "type": "String|Element"
                }
            ],
            "return": {
                "description": "The current Mottle instance; you can chain this method.",
                "type": "Mottle"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1096,
            "description": "Register an event handler, optionally as a delegate for some set of descendant elements. Note\nthat this method takes either 3 or 4 arguments - if you supply 3 arguments it is assumed you have\nomitted the `children` parameter, and that the event handler should be bound directly to the given element.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "el",
                    "description": "Either an Element, or a CSS spec for a list of elements, or an array of Elements.",
                    "type": "Element[]|Element|String"
                },
                {
                    "name": "children",
                    "description": "Comma-delimited list of selectors identifying allowed children.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "Event ID.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Event handler function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The current Mottle instance; you can chain this method.",
                "type": "Mottle"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1117,
            "description": "Cancel delegate event handling for the given function. Note that unlike with 'on' you do not supply\na list of child selectors here: it removes event delegation from all of the child selectors for which the\ngiven function was registered (if any).",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "el",
                    "description": "Element - or ID of element - from which to remove event listener.",
                    "type": "Element[]|Element|String"
                },
                {
                    "name": "event",
                    "description": "Event ID.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Event handler function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The current Mottle instance; you can chain this method.",
                "type": "Mottle"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1132,
            "description": "Triggers some event for a given element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element for which to trigger the event.",
                    "type": "Element"
                },
                {
                    "name": "event",
                    "description": "Event ID.",
                    "type": "String"
                },
                {
                    "name": "originalEvent",
                    "description": "The original event. Should be optional of course, but currently is not, due\nto the jsPlumb use case that caused this method to be added.",
                    "type": "Event"
                },
                {
                    "name": "payload",
                    "description": "Optional object to set as `payload` on the generated event; useful for message passing.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current Mottle instance; you can chain this method.",
                "type": "Mottle"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1206,
            "description": "Static method to assist in 'consuming' an element: uses `stopPropagation` where available, or sets\n`e.returnValue=false` where it is not.",
            "itemtype": "method",
            "name": "Mottle.consume",
            "params": [
                {
                    "name": "e",
                    "description": "Event to consume",
                    "type": "Event"
                },
                {
                    "name": "doNotPreventDefault",
                    "description": "If true, does not call `preventDefault()` on the event.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1223,
            "description": "Gets the page location corresponding to the given event. For touch events this means get the page location of the first touch.",
            "itemtype": "method",
            "name": "Mottle.pageLocation",
            "params": [
                {
                    "name": "e",
                    "description": "Event to get page location for.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "[left, top] for the given event.",
                "type": "Number[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1231,
            "description": "Forces touch events to be turned \"on\". Useful for testing: even if you don't have a touch device, you can still\ntrigger a touch event when this is switched on and it will be captured and acted on.",
            "itemtype": "method",
            "name": "setForceTouchEvents",
            "params": [
                {
                    "name": "value",
                    "description": "If true, force touch events to be on.",
                    "type": "Boolean"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1241,
            "description": "Forces mouse events to be turned \"on\". Useful for testing: even if you don't have a mouse, you can still\ntrigger a mouse event when this is switched on and it will be captured and acted on.",
            "itemtype": "method",
            "name": "setForceMouseEvents",
            "params": [
                {
                    "name": "value",
                    "description": "If true, force mouse events to be on.",
                    "type": "Boolean"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1258,
            "description": "Biltong v0.4.0\n\nVarious geometry functions written as part of jsPlumb and perhaps useful for others.\n\nCopyright (c) 2017 jsPlumb\nhttps://jsplumbtoolkit.com\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1306,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates the gradient of a line between the two points.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The gradient of a line between the two points.",
                "type": "Float"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1324,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates the gradient of a normal to a line between the two points.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The gradient of a normal to a line between the two points.",
                "type": "Float"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1335,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates the length of a line between the two points.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The length of a line between the two points.",
                "type": "Float"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1348,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates the quadrant in which the angle between the two points lies.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The quadrant - 1 for upper right, 2 for lower right, 3 for lower left, 4 for upper left.",
                "type": "Integer"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1369,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates the angle between the two points.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The angle between the two points.",
                "type": "Float"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1388,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates whether or not the two rectangles intersect.",
            "params": [
                {
                    "name": "r1",
                    "description": "First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`",
                    "type": "Rectangle"
                },
                {
                    "name": "r2",
                    "description": "Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "True if the rectangles intersect, false otherwise.",
                "type": "Boolean"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1409,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates whether or not r2 is completely enclosed by r1.",
            "params": [
                {
                    "name": "r1",
                    "description": "First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`",
                    "type": "Rectangle"
                },
                {
                    "name": "r2",
                    "description": "Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`",
                    "type": "Rectangle"
                },
                {
                    "name": "allowSharedEdges",
                    "description": "If true, the concept of enclosure allows for one or more edges to be shared by the two rectangles.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if r1 encloses r2, false otherwise.",
                "type": "Boolean"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1427,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates a point on the line from `fromPoint` to `toPoint` that is `distance` units along the length of the line.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "Point on the line, in the form `{ x:..., y:... }`.",
                "type": "Point"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1444,
            "name": "",
            "itemtype": "method",
            "desc": "Calculates a line of length `length` that is perpendicular to the line from `fromPoint` to `toPoint` and passes through `toPoint`.",
            "params": [
                {
                    "name": "p1",
                    "description": "First point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Second point, either as a 2 entry array or object with `left` and `top` properties.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "Perpendicular line, in the form `[ { x:..., y:... }, { x:..., y:... } ]`.",
                "type": "Line"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1561,
            "description": "Finds all elements matching the given selector, for the given parent. In order to support \"scoped root\" selectors,\nie. things like \"> .someClass\", that is .someClass elements that are direct children of `parentElement`, we have to\njump through a small hoop here: when a delegate draggable is registered, we write a `katavorio-draggable` attribute\non the element on which the draggable is registered. Then when this method runs, we grab the value of that attribute and\nprepend it as part of the selector we're looking for.  So \"> .someClass\" ends up being written as\n\"[katavorio-draggable='...' > .someClass]\", which works with querySelectorAll.",
            "params": [
                {
                    "name": "availableSelectors",
                    "description": ""
                },
                {
                    "name": "parentElement",
                    "description": ""
                },
                {
                    "name": "childElement",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1853,
            "description": "Sets whether or not the Drag is constrained. A value of 'true' means constrain to parent bounds; a function\nwill be executed and returns true if the position is allowed.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 1871,
            "description": "Sets a function to call on drag stop, which, if it returns true, indicates that the given element should\nrevert to its position before the previous drag.",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2093,
            "description": "Returns the element that was last dragged. This may be some original element from the DOM, or if `clone` is\nset, then its actually a copy of some original DOM element. In some client calls to this method, it is the\nactual element that was dragged that is desired. In others, it is the original DOM element that the user\nwishes to get - in which case, pass true for `retrieveOriginalElement`.",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2365,
            "description": "A drop event. `drag` is the corresponding Drag object, which may be a Drag for some specific element, or it\nmay be a Drag on some element acting as a delegate for elements contained within it.",
            "params": [
                {
                    "name": "drag",
                    "description": ""
                },
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2482,
            "description": "Gets the selector identifying which input elements to filter from drag events.",
            "itemtype": "method",
            "name": "getInputFilterSelector",
            "return": {
                "description": "Current input filter selector.",
                "type": "String"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2489,
            "description": "Sets the selector identifying which input elements to filter from drag events.",
            "itemtype": "method",
            "name": "setInputFilterSelector",
            "params": [
                {
                    "name": "selector",
                    "description": "Input filter selector to set.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Current instance; method may be chained.",
                "type": "Katavorio"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2500,
            "description": "Either makes the given element draggable, or identifies it as an element inside which some identified list\nof elements may be draggable.",
            "params": [
                {
                    "name": "el",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2543,
            "name": "",
            "itemtype": "method",
            "desc": "Adds an element to the current selection (for multiple node drag)",
            "params": [
                {
                    "name": "DOM",
                    "description": "element - or id of the element - to add.",
                    "type": "Element|String"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2563,
            "name": "",
            "itemtype": "method",
            "desc": "Removes an element from the current selection (for multiple node drag)",
            "params": [
                {
                    "name": "DOM",
                    "description": "element - or id of the element - to remove.",
                    "type": "Element|String"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2731,
            "description": "Either completely remove drag functionality from the given element, or remove a specific event handler. If you\ncall this method with a single argument - the element - all drag functionality is removed from it. Otherwise, if\nyou provide an event name and listener function, this function is de-registered (if found).",
            "params": [
                {
                    "name": "el",
                    "description": "Element to update"
                },
                {
                    "name": "evt",
                    "description": "Optional event name to unsubscribe",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fn",
                    "description": "Optional function to unsubscribe",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2747,
            "description": "Either completely remove drop functionality from the given element, or remove a specific event handler. If you\ncall this method with a single argument - the element - all drop functionality is removed from it. Otherwise, if\nyou provide an event name and listener function, this function is de-registered (if found).",
            "params": [
                {
                    "name": "el",
                    "description": "Element to update"
                },
                {
                    "name": "evt",
                    "description": "Optional event name to unsubscribe",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fn",
                    "description": "Optional function to unsubscribe",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2795,
            "description": "Add the given element to the posse with the given id, creating the group if it at first does not exist.",
            "itemtype": "method",
            "name": "addToPosse",
            "params": [
                {
                    "name": "el",
                    "description": "Element to add.",
                    "type": "Element"
                },
                {
                    "name": "spec",
                    "description": "Variable args parameters. Each argument can be a either a String, indicating\nthe ID of a Posse to which the element should be added as an active participant, or an Object containing\n`{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\ntrue.",
                    "type": "String...|Object..."
                }
            ],
            "return": {
                "description": "The Posse(s) to which the element(s) was/were added.",
                "type": "Posse|Posse[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2816,
            "description": "Sets the posse(s) for the element with the given id, creating those that do not yet exist, and removing from\nthe element any current Posses that are not specified by this method call. This method will not change the\nactive/passive state if it is given a posse in which the element is already a member.",
            "itemtype": "method",
            "name": "setPosse",
            "params": [
                {
                    "name": "el",
                    "description": "Element to set posse(s) on.",
                    "type": "Element"
                },
                {
                    "name": "spec",
                    "description": "Variable args parameters. Each argument can be a either a String, indicating\nthe ID of a Posse to which the element should be added as an active participant, or an Object containing\n`{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\ntrue.",
                    "type": "String...|Object..."
                }
            ],
            "return": {
                "description": "The Posse(s) to which the element(s) now belongs.",
                "type": "Posse|Posse[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2850,
            "description": "Remove the given element from the given posse(s).",
            "itemtype": "method",
            "name": "removeFromPosse",
            "params": [
                {
                    "name": "el",
                    "description": "Element to remove.",
                    "type": "Element"
                },
                {
                    "name": "posseId",
                    "description": "Varargs parameter: one value for each posse to remove the element from.",
                    "type": "String..."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2873,
            "description": "Remove the given element from all Posses to which it belongs.",
            "itemtype": "method",
            "name": "removeFromAllPosses",
            "params": [
                {
                    "name": "el",
                    "description": "Element to remove from Posses.",
                    "type": "Element|Element[]"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2891,
            "description": "Changes the participation state for the element in the Posse with the given ID.",
            "params": [
                {
                    "name": "el",
                    "description": "Element(s) to change state for.",
                    "type": "Element|Element[]"
                },
                {
                    "name": "posseId",
                    "description": "ID of the Posse to change element state for.",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "True to make active, false to make passive.",
                    "type": "Boolean"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2927,
            "description": "Tests if the given object is an Array.",
            "params": [
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 2935,
            "description": "Tests if the given object is a Number.",
            "params": [
                {
                    "name": "n",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3120,
            "description": "Take the given model and expand out any parameters. 'functionPrefix' is optional, and if present, helps jsplumb figure out what to do if a value is a Function.\n if you do not provide it (and doNotExpandFunctions is null, or false), jsplumb will run the given values through any functions it finds, and use the function's\n output as the value in the result. if you do provide the prefix, only functions that are named and have this prefix\n will be executed; other functions will be passed as values to the output.",
            "params": [
                {
                    "name": "model",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "functionPrefix",
                    "description": ""
                },
                {
                    "name": "doNotExpandFunctions",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3178,
            "description": "Find the index of a given object in an array.",
            "params": [
                {
                    "name": "a",
                    "description": "The array to search"
                },
                {
                    "name": "f",
                    "description": "The function to run on each element. Return true if the element matches."
                }
            ],
            "return": {
                "description": "-1 if not found, otherwise the index in the array.",
                "type": "Number"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3195,
            "description": "Remove some element from an array by matching each element in the array against some predicate function. Note that this\nis an in-place removal; the array is altered.",
            "params": [
                {
                    "name": "a",
                    "description": "The array to search"
                },
                {
                    "name": "f",
                    "description": "The function to run on each element. Return true if the element matches."
                }
            ],
            "return": {
                "description": "true if removed, false otherwise.",
                "type": "Boolean"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3210,
            "description": "Remove some element from an array by simple lookup in the array for the given element. Note that this\nis an in-place removal; the array is altered.",
            "params": [
                {
                    "name": "l",
                    "description": "The array to search"
                },
                {
                    "name": "v",
                    "description": "The value to remove."
                }
            ],
            "return": {
                "description": "true if removed, false otherwise.",
                "type": "Boolean"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3225,
            "description": "Add some element to the given array, unless it is determined that it is already in the array.",
            "params": [
                {
                    "name": "list",
                    "description": "The array to add the element to."
                },
                {
                    "name": "item",
                    "description": "The item to add."
                },
                {
                    "name": "hashFunction",
                    "description": "A function to use to determine if the given item already exists in the array."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3237,
            "description": "Add some element to a list that is contained in a map of lists.",
            "params": [
                {
                    "name": "map",
                    "description": "The map of [ key -> list ] entries"
                },
                {
                    "name": "key",
                    "description": "The name of the list to insert into"
                },
                {
                    "name": "value",
                    "description": "The value to insert"
                },
                {
                    "name": "insertAtStart",
                    "description": "Whether or not to insert at the start; defaults to false."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3254,
            "description": "Add an item to a list, unless it is already in the list. The test for pre-existence is a simple list lookup.\nIf you want to do something more complex, perhaps #addWithFunction might help.",
            "params": [
                {
                    "name": "list",
                    "description": "List to add the item to"
                },
                {
                    "name": "item",
                    "description": "Item to add"
                },
                {
                    "name": "insertAtHead",
                    "description": "Whether or not to insert at the start; defaults to false."
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3274,
            "description": "Extends the given obj (which can be an array) with the given constructor function, prototype functions, and class members, any of which may be null.",
            "params": [
                {
                    "name": "child",
                    "description": ""
                },
                {
                    "name": "parent",
                    "description": ""
                },
                {
                    "name": "_protoFn",
                    "description": ""
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3345,
            "description": "Trim a string.",
            "params": [
                {
                    "name": "s",
                    "description": "String to trim"
                }
            ],
            "return": {
                "description": "the String with leading and trailing whitespace removed."
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 3442,
            "description": "Wraps one function with another, creating a placeholder for the\nwrapped function if it was null. this is used to wrap the various\ndrag/drop event functions - to allow jsPlumb to be notified of\nimportant lifecycle events without imposing itself on the user's\ndrag/drop functionality.",
            "itemtype": "method",
            "name": "jsPlumbUtil.wrap",
            "params": [
                {
                    "name": "wrappedFunction",
                    "description": "original function to wrap; may be null.",
                    "type": "Function"
                },
                {
                    "name": "newFunction",
                    "description": "function to wrap the original with.",
                    "type": "Function"
                },
                {
                    "name": "returnOnThisValue",
                    "description": "Optional. Indicates that the wrappedFunction should\nnot be executed if the newFunction returns a value matching 'returnOnThisValue'.\nnote that this is a simple comparison and only works for primitives right now.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 4680,
            "description": "inits a draggable if it's not already initialised.\nTODO: somehow abstract this to the adapter, because the concept of \"draggable\" has no\nplace on the server.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5011,
            "description": "private method to do the business of toggling hiding/showing.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5039,
            "description": "gets an id for the given element, creating and setting one if\nnecessary.  the id is of the form\n\n   jsPlumb_<instance index>_<index in instance>\n\nwhere \"index in instance\" is a monotonically increasing integer that starts at 0,\nfor each instance.  this method is used not only to assign ids to elements that do not\nhave them but also to connections and endpoints.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5080,
            "description": "Returns a map of all the elements this jsPlumbInstance is currently managing.",
            "return": {
                "description": "Map of [id-> {el, endpoint[], connection, position}] information.",
                "type": "Object"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5193,
            "description": "checks for a listener for the given condition, executing it if found, passing in the given value.\ncondition listeners would have been attached using \"bind\" (which is, you could argue, now overloaded, since\nfiring click events etc is a bit different to what this does).  i thought about adding a \"bindCondition\"\nor something, but decided against it, for the sake of simplicity. jsPlumb will never fire one of these\ncondition events anyway.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5404,
            "description": "Deletes a Connection.",
            "itemtype": "method",
            "name": "deleteConnection",
            "params": [
                {
                    "name": "connection",
                    "description": "Connection to delete"
                },
                {
                    "name": "params",
                    "description": "Optional delete parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fireEvent",
                            "description": "If false, a connection detached event will not be fired. Otherwise one will.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "force",
                            "description": "If true, the connection will be deleted even if a beforeDetach interceptor tries to stop the deletion.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "True if the connection was deleted, false otherwise.",
                "type": "Boolean"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5442,
            "description": "Remove all Connections from all elements, but leaves Endpoints in place ((unless a connection is set to auto delete its Endpoints).",
            "itemtype": "method",
            "name": "deleteEveryConnection",
            "params": [
                {
                    "name": "params",
                    "description": "optional params object for the call",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fireEvent",
                            "description": "Whether or not to fire detach events",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "forceDetach",
                            "description": "If true, this call will ignore any `beforeDetach` interceptors.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The number of connections that were deleted.",
                "type": "Number"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5461,
            "description": "Removes all an element's Connections.",
            "itemtype": "method",
            "name": "deleteConnectionsForElement",
            "params": [
                {
                    "name": "el",
                    "description": "Either the id of the element, or a selector for the element.",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Optional parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fireEvent",
                            "description": "Whether or not to fire the detach event.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "forceDetach",
                            "description": "If true, this call will ignore any `beforeDetach` interceptors.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current jsPlumb instance.",
                "type": "JsPlumbInstance"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5787,
            "description": "Gets the list of Endpoints for a given element.",
            "itemtype": "method",
            "name": "getEndpoints",
            "params": [
                {
                    "name": "el",
                    "description": "The element to get endpoints for.",
                    "type": "String|Element|Selector"
                }
            ],
            "return": {
                "description": "An array of Endpoints for the specified element.",
                "type": "Endpoint[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5910,
            "description": "updates the offset and size for a given element, and stores the\nvalues. if 'offset' is not null we use that (it would have been\npassed in from a drag call) because it's faster; but if it is null,\nor if 'recalc' is true in order to force a recalculation, we get the current values.",
            "itemtype": "method",
            "name": "updateOffset",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 5962,
            "description": "callback from the current library to tell us to prepare ourselves (attach\nmouse listeners etc; can't do that until the library has provided a bind method)",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 6054,
            "description": "makes a list of anchors from the given list of types or coords, eg\n[\"TopCenter\", \"RightMiddle\", \"BottomCenter\", [0, 1, -1, -1] ]",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 6071,
            "description": "Makes a dynamic anchor from the given list of anchors (which may be in shorthand notation as strings or dimension arrays, or Anchor\nobjects themselves) and the given, optional, anchorSelector function (jsPlumb uses a default if this is not provided; most people will\nnot need to provide this - i think).",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 6812,
            "description": "Remove the given element, including cleaning up all endpoints registered for it.\nThis is exposed in the public API but also used internally by jsPlumb when removing the\nelement associated with a connection drag.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 7919,
            "description": "private but must be exposed.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 7955,
            "description": "returns a connection from the pool; used when dragging starts.  just gets the head of the array if it can.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 8549,
            "description": "private but needs to be exposed.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10313,
            "description": "Anchors model a position on some element at which an Endpoint may be located.  They began as a first class citizen of jsPlumb, ie. a user\nwas required to create these themselves, but over time this has been replaced by the concept of referring to them either by name (eg. \"TopMiddle\"),\nor by an array describing their coordinates (eg. [ 0, 0.5, 0, -1 ], which is the same as \"TopMiddle\").  jsPlumb now handles all of the\ncreation of Anchors without user intervention.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10406,
            "description": "An Anchor that floats. its orientation is computed dynamically from\nits position relative to the anchor it is floating relative to.  It is used when creating\na connection through drag and drop.\n\nTODO FloatingAnchor could totally be refactored to extend Anchor just slightly.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10466,
            "description": "notification the endpoint associated with this anchor is hovering\nover another anchor; we want to assume that anchor's orientation\nfor the duration of the hover.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10475,
            "description": "notification the endpoint associated with this anchor is no\nlonger hovering over another anchor; we should resume calculating\norientation as we normally do.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10615,
            "description": "Attempt to match an anchor with the given coordinates and then set it.",
            "params": [
                {
                    "name": "coords",
                    "description": ""
                }
            ],
            "return": {
                "description": "true if matching anchor found, false otherwise."
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10946,
            "description": "Function: findClosestPointOnPath\nFinds the closest point on this segment to the given [x, y],\nreturning both the x and y of the point plus its distance from\nthe supplied point, and its location along the length of the\npath inscribed by the segment.  This implementation returns\nInfinity for distance and null values for everything else;\nsubclasses are expected to override.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10973,
            "description": "Computes the list of points on the segment that intersect the given line.",
            "itemtype": "method",
            "name": "lineIntersection",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array<[number, number]>"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 10986,
            "description": "Computes the list of points on the segment that intersect the box with the given origin and size.",
            "itemtype": "method",
            "name": "boxIntersection",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array<[number, number]>"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11004,
            "description": "Computes the list of points on the segment that intersect the given bounding box, which is an object of the form { x:.., y:.., w:.., h:.. }.",
            "itemtype": "method",
            "name": "lineIntersection",
            "params": [
                {
                    "name": "box",
                    "description": "",
                    "type": "BoundingRectangle"
                }
            ],
            "return": {
                "description": "",
                "type": "Array<[number, number]>"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11053,
            "description": "returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n0 to 1 inclusive. for the straight line segment this is simple maths.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11070,
            "description": "returns the gradient of the segment at the given point - which for us is constant.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11077,
            "description": "returns the point on the segment's path that is 'distance' along the length of the path from 'location', where\n'location' is a decimal from 0 to 1 inclusive, and 'distance' is a number of pixels.\nthis hands off to jsPlumbUtil to do the maths, supplying two points and the distance.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11109,
            "description": "Function: findClosestPointOnPath\nFinds the closest point on this segment to [x,y]. See\nnotes on this method in AbstractSegment.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11159,
            "description": "Calculates all intersections of the given line with this segment.",
            "params": [
                {
                    "name": "_x1",
                    "description": ""
                },
                {
                    "name": "_y1",
                    "description": ""
                },
                {
                    "name": "_x2",
                    "description": ""
                },
                {
                    "name": "_y2",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11224,
            "description": "Calculates all intersections of the given box with this segment. By default this method simply calls `lineIntersection` with each of the four\nfaces of the box; subclasses can override this if they think there's a faster way to compute the entire box at once.",
            "params": [
                {
                    "name": "x",
                    "description": "X position of top left corner of box"
                },
                {
                    "name": "y",
                    "description": "Y position of top left corner of box"
                },
                {
                    "name": "w",
                    "description": "width of box"
                },
                {
                    "name": "h",
                    "description": "height of box"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11242,
            "description": "Calculates all intersections of the given bounding box with this segment. By default this method simply calls `lineIntersection` with each of the four\nfaces of the box; subclasses can override this if they think there's a faster way to compute the entire box at once.",
            "params": [
                {
                    "name": "box",
                    "description": "Bounding box, in  format.",
                    "type": "x:.., y:..., w:..., h:..."
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11363,
            "description": "returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n0 to 1 inclusive.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11387,
            "description": "returns the gradient of the segment at the given point.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11530,
            "description": "returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n0 to 1 inclusive.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11539,
            "description": "returns the gradient of the segment at the given point.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11647,
            "description": "Function: findSegmentForPoint\nReturns the segment that is closest to the given [x,y],\nnull if nothing found.  This function returns a JS\nobject with:\n\n  d   -   distance from segment\n  l   -   proportional location in segment\n  x   -   x point on the segment\n  y   -   y point on the segment\n  s   -   the segment itself.\n  connectorLocation - the location on the connector of the point, expressed as a decimal between 0 and 1 inclusive.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11715,
            "description": "returns [segment, proportion of travel in segment, segment index] for the segment\nthat contains the point which is 'location' distance along the entire path, where\n'location' is a decimal between 0 and 1 inclusive. in this connector type, paths\nare made up of a list of segments, each of which contributes some fraction to\nthe total length.\nFrom 1.3.10 this also supports the 'absolute' property, which lets us specify a location\nas the absolute distance in pixels, rather than a proportion of the total path.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11941,
            "description": "Class: Endpoints.Dot\nA round endpoint, with default radius 10 pixels.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 11946,
            "description": "Function: Constructor\n\nParameters:\n\n   radius    -    radius of the endpoint.  defaults to 10 pixels.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 12011,
            "description": "Class: Endpoints.Image\nDraws an image as the Endpoint.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 12015,
            "description": "Function: Constructor\n\nParameters:\n\n   src    -    location of the image to use.\n\n    TODO: multiple references to self. not sure quite how to get rid of them entirely. perhaps self = null in the cleanup\n    function will suffice\n\n    TODO this class still might leak memory.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 13132,
            "description": "helper method to add a segment.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 13637,
            "description": "utility methods for other objects to use.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 14290,
            "description": "Manages dragging for some instance of jsPlumb.\n\nTODO instead of this being accessed directly, it should subscribe to events on the jsPlumb instance: every method\nin here is called directly by jsPlumb. But what should happen is that we have unpublished events that this listens\nto.  The only trick is getting one of these instantiated with every jsPlumb instance: it needs to have a hook somehow.\nBasically the general idea is to pull ALL the drag code out (prototype method registrations plus this) into a\ndedicated drag script), that does not necessarily need to be included.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 14306,
            "description": "register some element as draggable.  right now the drag init stuff is done elsewhere, and it is\npossible that will continue to be the case.",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 14388,
            "description": "notification that an endpoint was added to the given el.  we go up from that el's parent\nnode, looking for a parent that has been registered as a draggable. if we find one, we add this\nel to that parent's list of elements to update on drag (if it is not there already)",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 14791,
            "description": "Gets the absolute position of some element as read from the left/top properties in its style.",
            "itemtype": "method",
            "name": "getAbsolutePosition",
            "params": [
                {
                    "name": "el",
                    "description": "The element to retrieve the absolute coordinates from. **Note** this is a DOM element, not a selector from the underlying library.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "[left, top] pixel values.",
                "type": "Number[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 14807,
            "description": "Sets the absolute position of some element by setting the left/top properties in its style.",
            "itemtype": "method",
            "name": "setAbsolutePosition",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the absolute coordinates on. **Note** this is a DOM element, not a selector from the underlying library.",
                    "type": "Element"
                },
                {
                    "name": "xy",
                    "description": "x and y coordinates",
                    "type": "Number[]"
                },
                {
                    "name": "animateFrom",
                    "description": "Optional previous xy to animate from.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "animateOptions",
                    "description": "Options for the animation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 14827,
            "description": "gets the size for the element, in an array : [ width, height ].",
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 15636,
            "params": [
                {
                    "name": "_jsPlumb",
                    "description": "Associated jsPlumb instance.",
                    "type": "JsPlumbInstance"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "el",
                            "description": "The DOM element representing the Group.",
                            "type": "Element"
                        },
                        {
                            "name": "id",
                            "description": "Optional ID for the Group. A UUID will be assigned as the Group's ID if you do not provide one.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "constrain",
                            "description": "If true, child elements will not be able to be dragged outside of the Group container.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "revert",
                            "description": "By default, child elements revert to the container if dragged outside. You can change this by setting `revert:false`. This behaviour is also overridden if you set `orphan` or `prune`.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "orphan",
                            "description": "If true, child elements dropped outside of the Group container will be removed from the Group (but not from the DOM).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "prune",
                            "description": "If true, child elements dropped outside of the Group container will be removed from the Group and also from the DOM.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "dropOverride",
                            "description": "If true, a child element that has been dropped onto some other Group will not be subject to the controls imposed by `prune`, `revert` or `orphan`.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 15945,
            "description": "Adds a group to the jsPlumb instance.",
            "itemtype": "method",
            "name": "addGroup",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The newly created Group.",
                "type": "Group"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 15968,
            "description": "Add an element to a group.",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group, or ID of the group, to add the element to.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "Element to add to the group.",
                    "type": "Element"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 15991,
            "description": "Remove an element from a group, and sets its DOM element to be a child of the container again.  ??",
            "itemtype": "method",
            "name": "removeFromGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group, or ID of the group, to remove the element from.",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "Element to add to the group.",
                    "type": "Element"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16002,
            "description": "Remove a group, and optionally remove its members from the jsPlumb instance.",
            "itemtype": "method",
            "name": "removeGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group to delete, or ID of Group to delete.",
                    "type": "String|Group"
                },
                {
                    "name": "deleteMembers",
                    "description": "If true, group members will be removed along with the group. Otherwise they will\njust be 'orphaned' (returned to the main container).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "} When deleteMembers is false, this method returns a map of {id->position}",
                "type": "Map[String, Position"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16014,
            "description": "Remove all groups, and optionally remove their members from the jsPlumb instance.",
            "itemtype": "method",
            "name": "removeAllGroup",
            "params": [
                {
                    "name": "deleteMembers",
                    "description": "If true, group members will be removed along with the groups. Otherwise they will\njust be 'orphaned' (returned to the main container).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16024,
            "description": "Get a Group",
            "itemtype": "method",
            "name": "getGroup",
            "params": [
                {
                    "name": "groupId",
                    "description": "ID of the group to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Group with the given ID, null if not found.",
                "type": "Group"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16034,
            "description": "Gets all the Groups managed by the jsPlumb instance.",
            "return": {
                "description": "List of Groups. Empty if none.",
                "type": "Group[]"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16042,
            "description": "Expands a group element. jsPlumb doesn't do \"everything\" for you here, because what it means to expand a Group\nwill vary from application to application. jsPlumb does these things:\n\n- Hides any connections that are internal to the group (connections between members, and connections from member of\nthe group to the group itself)\n- Proxies all connections for which the source or target is a member of the group.\n- Hides the proxied connections.\n- Adds the jtk-group-expanded class to the group's element\n- Removes the jtk-group-collapsed class from the group's element.",
            "itemtype": "method",
            "name": "expandGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group to expand, or ID of Group to expand.",
                    "type": "String|Group"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16060,
            "description": "Collapses a group element. jsPlumb doesn't do \"everything\" for you here, because what it means to collapse a Group\nwill vary from application to application. jsPlumb does these things:\n\n- Shows any connections that are internal to the group (connections between members, and connections from member of\nthe group to the group itself)\n- Removes proxies for all connections for which the source or target is a member of the group.\n- Shows the previously proxied connections.\n- Adds the jtk-group-collapsed class to the group's element\n- Removes the jtk-group-expanded class from the group's element.",
            "itemtype": "method",
            "name": "expandGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group to expand, or ID of Group to expand.",
                    "type": "String|Group"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16083,
            "description": "Collapses or expands a group element depending on its current state. See notes in the collapseGroup and expandGroup method.",
            "itemtype": "method",
            "name": "toggleGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group to expand/collapse, or ID of Group to expand/collapse.",
                    "type": "String|Group"
                }
            ],
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16111,
            "description": "Gets the Group that the given element belongs to, null if none.",
            "itemtype": "method",
            "name": "getGroupFor",
            "params": [
                {
                    "name": "el",
                    "description": "Element, or element ID.",
                    "type": "String|Element"
                }
            ],
            "return": {
                "description": "A Group, if found, or null.",
                "type": "Group"
            },
            "class": "Mottle"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16486,
            "description": "Runs the magnetize routine.",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "o] Optional origin to use. You may have set this in the constructor and do not wish to supply it, or you may be happy with the default of [0,0",
                    "description": ".",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Options to override defaults.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "gather",
                            "description": "If true, will first gather the elements around the given origin before applying the magnetizer.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "Optional function to indicate whether a given element may be moved or not. Returning boolean false indicates it may not.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "padding] Optional [x,y",
                            "description": "padding values for elements.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "iterations",
                            "description": "Optional max number of iterations to run. The greater this number, the more comprehensive the magnetisation,\nbut the slower it runs. The default is 2.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "exclude",
                            "description": "Optional function to return whether or not a given element should be completely excluded from the magnetisation: it neither\nmoves, nor has any bearing on the movement of other elements.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "excludeFocus",
                            "description": "If true, do not pad any elements around the focus point.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16506,
            "description": "Computes the center of all the nodes and then uses that as the magnetization origin when it runs the routine.",
            "itemtype": "method",
            "name": "executeAtCenter",
            "params": [
                {
                    "name": "options",
                    "description": "Options to override defaults.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "gather",
                            "description": "If true, will first gather the elements around their center before applying the magnetizer.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "Optional function to indicate whether a given element may be moved or not. Returning boolean false indicates it may not.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "padding] Optional [x,y",
                            "description": "padding values for elements.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "iterations",
                            "description": "Optional max number of iterations to run. The greater this number, the more comprehensive the magnetisation,\nbut the slower it runs. The default is 2.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "exclude",
                            "description": "Optional function to return whether or not a given element should be completely excluded from the magnetisation: it neither\nmoves, nor has any bearing on the movement of other elements.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "excludeFocus",
                            "description": "If true, do not pad any elements around the focus point.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16528,
            "description": "Runs the magnetize routine using the location of the given event as the origin. To use this\nmethod you need to have provided a `container`,  and a `getContainerPosition` function to the\nconstructor.",
            "itemtype": "method",
            "name": "executeAtEvent",
            "params": [
                {
                    "name": "e",
                    "description": "Event to get origin location from.",
                    "type": "Event"
                },
                {
                    "name": "options",
                    "description": "Options to override defaults.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "gather",
                            "description": "If true, will first gather the elements around the event location before applying the magnetizer.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "Optional function to indicate whether a given element may be moved or not. Returning boolean false indicates it may not.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "padding] Optional [x,y",
                            "description": "padding values for elements.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "iterations",
                            "description": "Optional max number of iterations to run. The greater this number, the more comprehensive the magnetisation,\nbut the slower it runs. The default is 2.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "exclude",
                            "description": "Optional function to return whether or not a given element should be completely excluded from the magnetisation: it neither\nmoves, nor has any bearing on the movement of other elements.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "excludeFocus",
                            "description": "If true, do not pad any elements around the focus point.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16558,
            "description": "Sets the current set of elements on which to operate.",
            "itemtype": "method",
            "name": "setElements",
            "params": [
                {
                    "name": "_els",
                    "description": "List, or object hash, of elements, in whatever format the Magnetizer is setup to use. If you supply an object hash then a list is generated from the hash's values (the keys are ignored).",
                    "type": "Object[]|Object"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16568,
            "description": "Adds the given element to the set of elements on which to operate.",
            "itemtype": "method",
            "name": "addElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to add.",
                    "type": "Object"
                },
                {
                    "name": "doNotTestForDuplicates",
                    "description": "If true, we skip the check for duplicates. This makes\nfor a much faster call when there are lots of elements, just use it with care.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16582,
            "description": "Adds the given elements to the set of elements on which to operate.",
            "itemtype": "method",
            "name": "addElements",
            "params": [
                {
                    "name": "els",
                    "description": "Elements to add.",
                    "type": "Object[]"
                },
                {
                    "name": "doNotTestForDuplicates",
                    "description": "If true, we skip the check for duplicates. This makes\nfor a much faster call when there are lots of elements, just use it with care.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16601,
            "description": "Gets the list of elements currently being managed.",
            "itemtype": "method",
            "name": "getElements",
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16609,
            "description": "Removes the given element from the set of elements on which to operate.",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to remove.",
                    "type": "Object"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16625,
            "description": "Sets the padding to insert between magnetized elements.",
            "itemtype": "method",
            "name": "setPadding",
            "params": [
                {
                    "name": "p",
                    "description": "Array of padding for each axis.",
                    "type": "Number[]"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16634,
            "description": "Sets the function used to constrain the movement of some element that the magnetizer wishes to relocate.\nThe function is given an element ID and an array of [x,y] values, where each value indicates the proposed amount\nof movement in the given axis. The function is expected to return an array of [x,y] that indicates the allowed\namount of movement in each axis.",
            "itemtype": "method",
            "name": "setConstrain",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16646,
            "description": "Sets the function used to determine whether or not a given element should be considered during the magnetization process.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "f",
                    "description": "Filter function to use. Takes an element ID and returns whether or not that element can be moved.",
                    "type": "Function"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16655,
            "description": "Reset the Farahey instance. Use this to avoid memory leaks.",
            "itemtype": "method",
            "name": "reset",
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16671,
            "description": "Gets a new FaraheyInstance",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "Element that contains the elements to magnetize. Only required if you intend to use the `executeAtEvent` method.",
                            "type": "Selector|Element",
                            "optional": true
                        },
                        {
                            "name": "getContainerPosition",
                            "description": "Function that returns the position of the container (as an object of the form `{left:.., top:..}`) when requested. Only required if you intend to use the `executeAtEvent` method.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "getPosition",
                            "description": "A function that takes an element and returns its position. It does not matter to which element this position is computed as long as you remain consistent with this method, `setPosition` and the `origin` property.",
                            "type": "Function"
                        },
                        {
                            "name": "setPosition",
                            "description": "A function that takes an element and position, and sets it. See note about offset parent above.",
                            "type": "Function"
                        },
                        {
                            "name": "getSize",
                            "description": "A function that takes an element and returns its size, in pixels.",
                            "type": "Function"
                        },
                        {
                            "name": "padding",
                            "description": "Optional padding for x and y directions. Defaults to 20 pixels in each direction.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "constrain",
                            "description": "Optional function that takes an id and a proposed amount of movement in each axis, and returns the allowed amount of movement in each axis. You can use this to constrain your elements to a grid, for instance, or a path, etc.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "The origin of magnetization, in pixels. Defaults to 0,0. You can also supply this to the `execute` call.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "elements",
                            "description": "List, or object hash, of elements on which to operate.",
                            "type": "Selector|String[]|Element[]"
                        },
                        {
                            "name": "executeNow",
                            "description": "Whether or not to execute the routine immediately.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "filter",
                            "description": "Optional function that takes an element id and returns whether or not that element can be moved.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "orderByDistanceFromOrigin",
                            "description": "Whether or not to sort elements first by distance from origin. Can have better results but takes more time.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16877,
            "description": "Extract a value from, or set a value into, an Object.",
            "params": [
                {
                    "name": "inObj",
                    "description": "Object to extract value from or insert value into",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "Path to the value to extract/insert, in dotted notation. This syntax also supports array indices,\nsuch as `foo.bar[3]`.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "If provided, this method sets the value. Otherwise it extracts the current value.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "Value for the given path, null if not found.",
                "type": "Object"
            },
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16982,
            "description": "Resolves the content for some template, via id.",
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 16986,
            "description": "Default implementation of TemplateResolver, for use in browsers.",
            "params": [
                {
                    "name": "tid",
                    "description": ""
                }
            ],
            "is_constructor": 1,
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 17786,
            "description": "Add a command - this is called during execution of a template. See pushCommands below.",
            "params": [
                {
                    "name": "executionId",
                    "description": ""
                },
                {
                    "name": "el",
                    "description": ""
                },
                {
                    "name": "command",
                    "description": ""
                },
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 17805,
            "description": "At the end of an execution this is called - any commands found during the execution are transferred to the fragment\nthat was created.",
            "params": [
                {
                    "name": "executionId",
                    "description": ""
                },
                {
                    "name": "el",
                    "description": ""
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18679,
            "description": "Sets a node's text value.",
            "itemtype": "method",
            "name": "jsPlumbUtil.xml.setNodeText",
            "params": [
                {
                    "name": "node",
                    "description": "Element to set text on.",
                    "type": "Element"
                },
                {
                    "name": "text",
                    "description": "Text to set.",
                    "type": "String"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18694,
            "description": "Gets text from the given node.",
            "itemtype": "method",
            "name": "jsPlumbUtil.xml.getNodeText",
            "params": [
                {
                    "name": "node",
                    "description": "XML element.",
                    "type": "Element"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18703,
            "description": "Gets the first instance of the child with the given tag name, null if none found.",
            "itemtype": "method",
            "name": "jsPlumbUtil.xml.getChild",
            "params": [
                {
                    "name": "parent",
                    "description": "Element to retrieve child from.",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "Child tag name to retrieve.",
                    "type": "String"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18720,
            "description": "Gets children of the given node (only direct children), returning an array of nodes (an empty array if none found).",
            "itemtype": "method",
            "name": "jsPlumbUtil.xml.getChildren",
            "params": [
                {
                    "name": "parent",
                    "description": "Element to retrieve children from.",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "Child tag names to retrieve.",
                    "type": "String"
                }
            ],
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18736,
            "description": "Serializes the given XML node to a string, throwing an Error if something goes bad.",
            "itemtype": "method",
            "name": "jsPlumbUtil.xml.xmlToString",
            "params": [
                {
                    "name": "xmlNode",
                    "description": "XML element to serialize.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Serialized XML element.",
                "type": "String"
            },
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18758,
            "description": "Creates an XML element.",
            "itemtype": "method",
            "name": "jsPlumbUtil.xml.createElement",
            "params": [
                {
                    "name": "name",
                    "description": "Tag name of the element to create.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "Optional map of attribute names and values.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "text",
                    "description": "Optional text for the element.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "An XML element.",
                "type": "Element"
            },
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18840,
            "description": "Gets a Selection that is a filtered set of Nodes and Edges.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "spec",
                    "description": "Either a function, which will be passed each Edge and Node and is expected to return\ntrue to indicate inclusion, or an object consisting of key/value pairs, all of which are expected to match the `data` for any Edge or Node that should be included in the output.",
                    "type": "Object|Function"
                },
                {
                    "name": "includePartials",
                    "description": "If true, and you're using a match object, the results will include any objects that match at least one key in the match object.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A Selection.",
                "type": "Selection"
            },
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 18913,
            "description": "Traces the given overlay along the Connection.",
            "params": [
                {
                    "name": "overlaySpec",
                    "description": "This is in the format accepted by the Community edition of jsPlumb.",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "for animation.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "forwards",
                            "description": "Whether to traverse from source-> target, or target->source.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dwell",
                            "description": "How long, in milliseconds, to dwell on each node as the overlay traverses the path.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "350"
                        },
                        {
                            "name": "speed",
                            "description": "How many pixels per second to travel. *Note*: this is in seconds, not milliseconds.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "rate",
                            "description": "Frame rate, in milliseconds.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19208,
            "description": "Models a selection of Nodes/Ports end Edges.",
            "class": "FaraheyInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19436,
            "description": "Removes the given object from the selection.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "Object(s) to remove. May take many forms - a Node, Node Id, or Edge, or a list of these,\nor a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19446,
            "description": "Appends the given object to the selection.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "obj",
                    "description": "Object(s) to add. May take many forms - a Node, Node Id, or Edge, or a list of these,\nor a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19456,
            "description": "Toggles the given object's membership in the current selection. If `obj` is a Path, then the individual\nmembers of the Path are toggled independently.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "obj",
                    "description": "Object(s) to add. May take many forms - a Node, Node Id, or Edge, or a list of these,\nor a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19467,
            "description": "Sets the maximum number of nodes the selection can hold. The action taken when appending a node that would\ntake the selection above its limit depends on the current `capacityPolicy`, which can be either\nSelection.DISCARD_EXISTING (the default) or Selection.DISCARD_NEW.",
            "itemtype": "method",
            "name": "setMaxNodes",
            "params": [
                {
                    "name": "_maxNodes",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19478,
            "description": "Sets the maximum number of edges the selection can hold. The action taken when appending an edge that would\ntake the selection above its limit depends on the current `capacityPolicy`, which can be either\nSelection.DISCARD_EXISTING (the default) or Selection.DISCARD_NEW.",
            "itemtype": "method",
            "name": "setMaxEdges",
            "params": [
                {
                    "name": "_maxEdges",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19489,
            "description": "Sets the action taken when appending an edge or node that would\ntake the selection above its limit for that given type. Depends on the current `capacityPolicy`,\nwhich can be either `jsPlumbUtil.Selection.DISCARD_EXISTING` (the default) or `jsPlumbUtil.Selection.DISCARD_NEW`.",
            "itemtype": "method",
            "name": "setCapacityPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "One of `jsPlumbUtil.Selection.DISCARD_EXISTING` (which removes the 0th entry from the list\nbefore insertion of the new value) or `jsPlumbUtil.Selection.DISCARD_NEW`.",
                    "type": "String"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19501,
            "description": "Clears this selection.",
            "itemtype": "method",
            "name": "clear",
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19524,
            "description": "Reloads the content of this Selection, if a `generator` was supplied to the constructor. Otherwise\ndoes nothing. A data load start event is fired first, followed by a call to the generator to repopulate,\nand then a data load end event is fired.  So calling this method on a Selection that you are rendering\nto a Surface will cause the Surface to repaint itself.",
            "itemtype": "method",
            "name": "reload",
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19545,
            "description": "Iterates the objects of the given type in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`. If you don't supply\n`type`, the default of \"Node\" will be used.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"Node\""
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19565,
            "description": "Iterates the Nodes in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`.",
            "itemtype": "method",
            "name": "eachNode",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19573,
            "description": "Iterates the Groups in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`.",
            "itemtype": "method",
            "name": "eachGroup",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19581,
            "description": "Iterates the Nodes and the Groups in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`.",
            "itemtype": "method",
            "name": "eachNodeOrGroup",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19592,
            "description": "Iterates the Edges in the selection, calling the supplied callback\nfor each item. The callback's signature should be `function(index, item)`.",
            "itemtype": "method",
            "name": "eachEdge",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call with each item.",
                    "type": "Function"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19602,
            "description": "Get the current number of Nodes in the selection.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19611,
            "description": "Gets the node at the given index.",
            "itemtype": "method",
            "name": "getNodeAt",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Node to retrieve. Will return null if index out of range."
                }
            ],
            "return": {
                "description": "A Node, or null.",
                "type": "Node"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19621,
            "description": "Gets all the Nodes in the Selection.",
            "itemtype": "method",
            "name": "getNodes",
            "return": {
                "description": "",
                "type": "Node[]"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19630,
            "description": "Gets the Node with the given ID",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node to retrieve",
                    "type": "String"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19637,
            "description": "Gets the Group at the given index.",
            "itemtype": "method",
            "name": "getGroupAt",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Gorup to retrieve. Will return null if index out of range."
                }
            ],
            "return": {
                "description": "A Group, or null.",
                "type": "Group"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19647,
            "description": "Gets all the Groups in the Selection.",
            "itemtype": "method",
            "name": "getGroups",
            "return": {
                "description": "",
                "type": "Group[]"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19656,
            "description": "Gets the Group with the given ID",
            "itemtype": "method",
            "name": "getGroup",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Group to retrieve",
                    "type": "String"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19663,
            "description": "Get the current number of Groups in the selection.",
            "itemtype": "method",
            "name": "getGroupCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19672,
            "description": "Gets all the nodes, edges and groups.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19693,
            "description": "Gets all Edges for the given Node or Group.",
            "itemtype": "method",
            "name": "getAllEdgesFor",
            "params": [
                {
                    "name": "node",
                    "description": "The Node to get Edges for.",
                    "type": "Node"
                },
                {
                    "name": "filter",
                    "description": "Optional filter for edges.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19705,
            "description": "Gets all source Edges for the given Node or Group.",
            "itemtype": "method",
            "name": "getSourceEdgesFor",
            "params": [
                {
                    "name": "node",
                    "description": "The Node to get source Edges for.",
                    "type": "Node|Group"
                }
            ],
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19716,
            "description": "Get the current number of Edges in the selection.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19725,
            "description": "Gets the Node/Port at the given index.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Node/Port to retrieve.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Node/Port at the given index, null if nothing found at that index.",
                "type": "Object"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19735,
            "description": "Gets the Edge at the given index.",
            "itemtype": "method",
            "name": "getEdge",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Edge to retrieve.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Edge at the given index, null if nothing found at that index.",
                "type": "Object"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19745,
            "description": "Gets all the edges in the selection",
            "itemtype": "method",
            "name": "getEdges",
            "return": {
                "description": "All the edges in the selection, perhaps an empty list. Never null.",
                "type": "Array<Edge>"
            },
            "class": "Selection"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19847,
            "description": "The Node's id. A String.",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19854,
            "description": "Data associated with the Node.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19861,
            "description": "Gets the Node's id, which, for Nodes, is just the `id` property. This method is overridden by Ports.",
            "itemtype": "method",
            "name": "getFullId",
            "return": {
                "description": "Node's id.",
                "type": "String"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19878,
            "description": "Gets all Edges where this Node is either the source or the target of the Edge.\nNote that this does *not* retrieve Edges on any Ports associated with this Node - for that, @see #getAllEdges.",
            "itemtype": "method",
            "name": "getEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "Optional Edge filter.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "List of edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19896,
            "description": "Gets all Edges where this Node is the source.",
            "itemtype": "method",
            "name": "getSourceEdges",
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19909,
            "description": "Gets all Edges where this Node is the target.",
            "itemtype": "method",
            "name": "getTargetEdges",
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19922,
            "description": "Adds an Edge to the Node.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to add.",
                    "type": "Edge"
                }
            ],
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19937,
            "description": "Deletes an Edge from the Node.",
            "itemtype": "method",
            "name": "deleteEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to delete.",
                    "type": "Edge"
                }
            ],
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19963,
            "itemtype": "method",
            "name": "getAllEdges",
            "desc": "Gets all of the Edges connected to this Node, both on the Node itself and on all of its Ports.",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "filter",
                            "description": "Optional Edge filter.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19978,
            "itemtype": "method",
            "name": "getAllSourceEdges",
            "desc": "Gets all of the Edges connected to this Node, both on the Node itself and on all of its Ports, where this node/port is the source of edge",
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 19991,
            "itemtype": "method",
            "name": "getAllTargetEdges",
            "desc": "Gets all of the Edges connected to this Node, both on the Node itself and on all of its Ports, where this node/port is the target of edge",
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20004,
            "itemtype": "method",
            "name": "getDirectEdges",
            "desc": "Gets all Edges directly connected to this Node, ie. not to one of the Ports on the Node. This is an alias for `getEdges`.",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "filter",
                            "description": "Optional Edge filter.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20015,
            "itemtype": "method",
            "name": "getDirectSourceEdges",
            "desc": "Gets all Edges directly connected to this Node, ie. not to one of the Ports on the Node, where this Node is the source.\nThis is an alias for `getSourceEdges`.",
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20025,
            "itemtype": "method",
            "name": "getDirectTargetEdges",
            "desc": "Gets all Edges directly connected to this Node, ie. not to one of the Ports on the Node, where this Node is the target.\nThis is an alias for `getTargetEdges`.",
            "return": {
                "description": "List of Edges.",
                "type": "Edge[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20035,
            "itemtype": "method",
            "name": "getPortEdges",
            "desc": "Gets all Edges that are connected to Ports on this Node, not directly to the Node itself.",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20049,
            "itemtype": "method",
            "name": "getPortSourceEdges",
            "desc": "Gets all Edges that are connected to Ports on this Node, not directly to the Node itself, where the Port on this Node is the source of the edge.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20062,
            "itemtype": "method",
            "name": "getPortTargetEdges",
            "desc": "Gets all Edges that are connected to Ports on this Node, not directly to the Node itself, where the Port on this Node is the target of the edge.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20075,
            "description": "Adds a sub-graph to this node. If you provide an existing Graph instance that does not have\nan id, one will be assigned.",
            "itemtype": "method",
            "name": "addGraph",
            "params": [
                {
                    "name": "g",
                    "description": "Either a Graph instance, or the id you wish to assign to a new Graph.",
                    "type": "Graph|String"
                }
            ],
            "return": {
                "description": "The Graph that was added.",
                "type": "Graph"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20091,
            "description": "Retrieves a sub-graph by id.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "Sub-graph with the given id, null if not found.",
                "type": "Graph"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20103,
            "description": "Gets this Node's \"indegree\" centrality; a measure of how many other Nodes are connected to this Node as the target of some Edge.",
            "itemtype": "method",
            "name": "getIndegreeCentrality",
            "return": {
                "description": "Indegree centrality for the Node.",
                "type": "Float"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20115,
            "description": "Gets this Node's \"outdegree\" centrality; a measure of how many other Nodes this Node is connected to as the source of some Edge.",
            "itemtype": "method",
            "name": "getOutdegreeCentrality",
            "return": {
                "description": "Outdegree centrality for the Node.",
                "type": "Float"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20127,
            "description": "Gets all Ports associated with this Node.",
            "itemtype": "method",
            "name": "getPorts",
            "return": {
                "description": "List of Ports, empty list if none registered.",
                "type": "Port[]"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20136,
            "description": "Adds a Port to the Node.",
            "itemtype": "method",
            "name": "addPort",
            "params": [
                {
                    "name": "data",
                    "description": "Optional data backing the Port. This object can be of any type you like.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "idFunction",
                    "description": "Optional function that can take a Port's data and return its ID. By default this looks for an `id` member in the backing data.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created Port.",
                "type": "Port"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20153,
            "description": "Sets the underlying data for the Port with the given id.  If the Port does not yet exist, it is created.",
            "itemtype": "method",
            "name": "setPort",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the Port for which to set data.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to set for the Port.",
                    "type": "Object"
                }
            ],
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20169,
            "description": "Gets the Port with the given id, null if nothing found.",
            "itemtype": "method",
            "name": "getPort",
            "params": [
                {
                    "name": "id",
                    "description": "Port id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Port with the given id, or null if not found.",
                "type": "Port"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20193,
            "description": "Removes the given Port.",
            "itemtype": "method",
            "name": "removePort",
            "params": [
                {
                    "name": "Either",
                    "description": "a Port, or a Port id.",
                    "type": "Port|String"
                }
            ],
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20224,
            "description": "Sets the default cost of travelling from one Port to another inside some Node. When a Node is created, this value is set to 1.",
            "itemtype": "method",
            "name": "setDefaultInternalCost",
            "params": [
                {
                    "name": "cost",
                    "description": "Default internal cost.",
                    "type": "Number"
                }
            ],
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20233,
            "description": "Gets an \"internal\" Edge from one Port to another.",
            "itemtype": "method",
            "name": "getInternalEdge",
            "params": [
                {
                    "name": "source",
                    "description": "Source Port.",
                    "type": "Port|String"
                },
                {
                    "name": "target",
                    "description": "Target Port.",
                    "type": "Port|String"
                }
            ],
            "return": {
                "description": "An object containing `\\{ source:..., target:..., cost:..., directed:... \\}`.",
                "type": "Object"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20252,
            "description": "Sets the cost and directedness of some internal Edge.",
            "itemtype": "method",
            "name": "setInternalEdge",
            "params": [
                {
                    "name": "source",
                    "description": "Source Port.",
                    "type": "Port|String"
                },
                {
                    "name": "target",
                    "description": "Target Port.",
                    "type": "Port|String"
                },
                {
                    "name": "cost",
                    "description": "Cost to set. If you leave this as null, the default will be used.",
                    "type": "Number"
                },
                {
                    "name": "directed",
                    "description": "Whether or not the internal Edge is directed.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20269,
            "description": "Returns a string representation of the Node.",
            "itemtype": "method",
            "name": "inspect",
            "return": {
                "description": "Node dumped to a string.",
                "type": "String"
            },
            "class": "Node"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20295,
            "itemtype": "property",
            "name": "id The Port's id. This must be unique on a Node, but not necessarily unique with a given Graph.",
            "type": "{String}",
            "see": [
                "getFullId"
            ],
            "class": "Port"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20301,
            "description": "Gets the Node this Port belongs to.",
            "itemtype": "method",
            "name": "getNode",
            "return": {
                "description": "The Node this Port belongs to.",
                "type": "Node"
            },
            "class": "Port"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20310,
            "description": "Overrides the `getFullId` of Node to return a value in dotted notation of the form `nodeId.portId`.",
            "itemtype": "method",
            "name": "getFullId",
            "return": {
                "description": "The Port's \"full\" id, ie. the Port's id prepended by the parent Node's id, eg `\"BooksTable.idColumn\"```.",
                "type": "String"
            },
            "class": "Port"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20319,
            "itemtype": "method",
            "name": "isChildOf",
            "params": [
                {
                    "name": "node",
                    "description": "Node to test if this is a child.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "True if this Port is a child of the given Node, false otherwise.",
                "type": "Boolean"
            },
            "class": "Port"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20345,
            "description": "Source of the Edge.",
            "itemtype": "property",
            "name": "source",
            "type": "{Node|Port}",
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20351,
            "description": "Target of the Edge.",
            "itemtype": "property",
            "name": "target",
            "type": "{Node|Port}",
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20364,
            "description": "Data for the Edge.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20371,
            "description": "Gets the cost for this edge. Defaults to 1.",
            "itemtype": "method",
            "name": "getCost",
            "return": {
                "description": "Edge cost.",
                "type": "Number"
            },
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20380,
            "description": "Sets the cost for this edge.",
            "itemtype": "method",
            "name": "setCost",
            "params": [
                {
                    "name": "c",
                    "description": "Edge cost.",
                    "type": "Number"
                }
            ],
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20389,
            "description": "Gets the id for this Edge.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "Edge id.",
                "type": "Number"
            },
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20401,
            "description": "Gets whether or not the Edge is directed.",
            "itemtype": "method",
            "name": "isDirected",
            "return": {
                "description": "True if the Edge is directed (unidirectional), false otherwise.",
                "type": "Boolean"
            },
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20410,
            "description": "Sets whether or not the Edge is directed.",
            "itemtype": "method",
            "name": "setDirected",
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20418,
            "description": "Returns a string representation of the Edge.",
            "itemtype": "method",
            "name": "inspect",
            "return": {
                "description": "Edge dumped to a string.",
                "type": "String"
            },
            "class": "Edge"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20439,
            "description": "The Group's id. A String.",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "Group"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20447,
            "description": "Gets the Groups's id, which, for Groups, is just the `id` property.",
            "itemtype": "method",
            "name": "getFullId",
            "return": {
                "description": "Node's id.",
                "type": "String"
            },
            "class": "Group"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20506,
            "description": "Gets all the edges from the Group, any Ports the Group has, and any Edges from any Nodes contained in\nthe Group.",
            "itemtype": "method",
            "name": "getAllEdges",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Group"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20597,
            "description": "Sets the default function to use to extract an appropriate ID from the JSON for any given object.",
            "itemtype": "method",
            "name": "setIdFunction",
            "params": [
                {
                    "name": "idFunction",
                    "description": "Function to use to extract IDs.",
                    "type": "Function"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20606,
            "description": "Gets the current function to use to extract an appropriate ID from the JSON for any given object.",
            "itemtype": "method",
            "name": "getIdFunction",
            "return": {
                "description": "Function in use for extracting IDs.",
                "type": "Function"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20615,
            "description": "Sets the default function to use to extract an appropriate type from the JSON for any given object.",
            "itemtype": "method",
            "name": "setIdFunction",
            "params": [
                {
                    "name": "f",
                    "description": "Function to use to extract IDs.",
                    "type": "Function"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20624,
            "description": "Gets the type for some data, by running it through the current typeFunction.",
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "data",
                    "description": "Object to get type from.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The calculated type for the given object.",
                "type": "String"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20638,
            "description": "Sets whether or not Nodes are Graphs themselves, and can have child Nodes. If you enable this\nthen you cannot use slashes (/) in your Node ids, as they will be treated as components of a path\nto a Node in a nested Graph.",
            "params": [
                {
                    "name": "enable",
                    "description": "True to enable, false to disable.",
                    "type": "Boolean"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20648,
            "description": "Sets the character(s) used to separate ports from nodes in port ids. By default this is '.', ie a\nport is addressed as `nodeId.portId`. This may need to be changed depending on the data in your model.",
            "itemtype": "method",
            "name": "setPortSeparator",
            "params": [
                {
                    "name": "separator",
                    "description": "Separator to use.",
                    "type": "String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20658,
            "description": "Gets the current port separator.",
            "itemtype": "method",
            "name": "getPortSeparator",
            "return": {
                "description": "Port separator string. Default is \".\"",
                "type": "String"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20667,
            "description": "Splits the given port id using the current portSeparator.",
            "itemtype": "method",
            "name": "splitPortId",
            "params": [
                {
                    "name": "portId",
                    "description": "Port ID to split."
                }
            ],
            "return": {
                "description": "An array of [ vertexId, portId], or [] if the portId was null.",
                "type": "Array"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20677,
            "description": "Looks up a vertex identified by the port id, which is in full port id (vertexId.portId) format, returning null if nothing found.\n(Note that we show full port id format as vertexId.portId, but the '.' is just the default portSeparator; it is possible to change that\nto some other character)",
            "itemtype": "method",
            "name": "getVertexByPortId",
            "params": [
                {
                    "name": "portId",
                    "description": "ID of the port to find a vertex for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20741,
            "description": "Clears the Graph of all its Nodes, Groups, Ports and Edges.",
            "itemtype": "method",
            "name": "clear",
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20756,
            "description": "Gets all the Nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodes",
            "return": {
                "description": "All the Nodes in the Graph.",
                "type": "Node[]"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20765,
            "description": "Gets the count of Nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "The total number of Nodes in the graph.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20774,
            "description": "Returns the Node at the given index (used for bulk init type purposes)",
            "itemtype": "method",
            "name": "getNodeAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the Node to retrieve",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Node at the given index.",
                "type": "Node"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20784,
            "description": "Returns the total number of Edges in the graph.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "The total number of Edges.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20793,
            "description": "Adds an Edge to the Graph.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for new Edge.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source for the Edge - a Node, Port or Node/Port id.",
                            "type": "String|Node|Port"
                        },
                        {
                            "name": "target",
                            "description": "Target for the Edge - a Node, Port or Node/Port id.",
                            "type": "String|Node|Port"
                        },
                        {
                            "name": "cost",
                            "description": "Edge cost. This is used when computing shortest paths through the graph. If\nan Edge is not `directed`, then the same cost is applied regardless of the direction of traversal.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Whether or not the Edge is directed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "data",
                            "description": "Optional data to associate with the Edge.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "geometry",
                            "description": "Optional geometry for the Edge.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Edge that was added.",
                "type": "Edge"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20846,
            "description": "Adds a Node to the Graph",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "data",
                    "description": "Backing data for the Node",
                    "type": "Object"
                },
                {
                    "name": "idFunction",
                    "description": "Optional function to use to retrieve ID from backing data. Defaults to retrieving `id` from data object.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "The",
                    "description": "Node that was added.",
                    "type": "Node"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20865,
            "description": "Adds a list of Nodes to the Graph",
            "itemtype": "method",
            "name": "addNodes",
            "params": [
                {
                    "name": "data",
                    "description": "List of data objects, one for each Node to be added.",
                    "type": "Object[]"
                },
                {
                    "name": "idFunction",
                    "description": "Optional function to use to retrieve ID from backing data. Defaults to retrieving `id` from data object.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20877,
            "description": "Adds a Group to the Graph.",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "idFunction",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20897,
            "description": "Returns the Group at the given index.",
            "itemtype": "method",
            "name": "getGroupAt",
            "params": [
                {
                    "name": "idx",
                    "description": "Index into group list",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a Group, or null if not found.",
                "type": "Group"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20907,
            "description": "Gets the Groups in the graph.",
            "itemtype": "method",
            "name": "getGroups",
            "return": {
                "description": "All the groups in the Graph.",
                "type": "Group[]"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20943,
            "description": "Deletes a Group",
            "itemtype": "method",
            "name": "deleteGroup",
            "params": [
                {
                    "name": "g",
                    "description": "Either a Group, or a Group id.",
                    "type": "Node|String"
                },
                {
                    "name": "removeMembers",
                    "description": "If true, also remove all the Nodes that are members of the Group.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 20975,
            "description": "Deletes a Node, Port or Group.",
            "itemtype": "method",
            "name": "deleteNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node/Port/Group, or a Node/Port/Group id.",
                    "type": "Node|String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21020,
            "description": "Deletes an Edge.",
            "itemtype": "method",
            "name": "deleteEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge, or ID of Edge, to delete.",
                    "type": "Edge|String"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21039,
            "description": "Gets an Edge by id, or if the given object is already an Edge, hands that back.",
            "itemtype": "method",
            "name": "getEdge",
            "params": [
                {
                    "name": "e",
                    "description": "ID of the Edge to retrieve, or an actual Edge, or some data from which an ID could be derived.",
                    "type": "String|Edge|Object"
                }
            ],
            "return": {
                "description": "The requested Edge, if found, otherwise null.",
                "type": "Edge"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21058,
            "description": "For some given node, get a subset of edges that match the given filter function.",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "If true, only match edges for which this node is the source.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "If true, only match edges for which this node is the target.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "filter",
                    "description": ""
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21096,
            "description": "Gets every edge in the Graph.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21115,
            "description": "Finds the shortest path from source to target, using the Djikstra algorithm.",
            "itemtype": "method",
            "name": "findPath",
            "params": [
                {
                    "name": "source",
                    "description": "Source Node or Node ID.",
                    "type": "Node|String"
                },
                {
                    "name": "target",
                    "description": "Target Node or Node ID.",
                    "type": "Node|String"
                },
                {
                    "name": "strict",
                    "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "nodeFilter",
                    "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "edgeFilter",
                    "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array like `[  \\, \\{ vertex,cost,edge \\} ... ]` when successful; when unsuccessful the three compiled\ntables are returned - distances to nodes, each node's previous node, and the associated edge.  so you can call this method with\nno target set and get the entire table populated.",
                "type": "Vertex, cost, edge \\"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21133,
            "description": "Finds the distance between source and target.",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "source",
                    "description": "Source Node or Node ID.",
                    "type": "Node|string"
                },
                {
                    "name": "target",
                    "description": "Target Node or Node ID.",
                    "type": "Node|string"
                },
                {
                    "name": "strict",
                    "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Distance from the source to the target.",
                "type": "Number"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21146,
            "description": "Gets the Node or Port with the given id, null if not found.",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "id",
                    "description": "Node or Port id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Node/Port if found, null otherwise.",
                "type": "Node"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21154,
            "description": "Sets the target Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge target",
                    "type": "Node|Port|string"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21169,
            "description": "Sets the source Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge source",
                    "type": "Node|Port|string"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21184,
            "description": "Returns the path from source to target as a String.",
            "itemtype": "method",
            "name": "printPath",
            "return": {
                "description": "Printed path. Mostly useful for debugging.",
                "type": "String"
            },
            "see": [
                "findPath"
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21200,
            "description": "Returns the `diameter` of the Graph.",
            "itemtype": "method",
            "name": "getDiameter",
            "params": [
                {
                    "name": "dontUseMax",
                    "description": "Whether or not to return Infinity if there is at least one pair of nodes for which there is no available path.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Diameter of the Graph.",
                "type": "Number"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21226,
            "description": "Returns the degree centrality of the given node. This is an alias to `getDegreeCentrality`, as centrality\nmost commonly refers to degree centrality. Note that this returns incoming and outgoing connections; use\ngetIndegreeCentrality or getOutdegreeCentrality if you need to be more specific.",
            "itemtype": "method",
            "name": "getCentrality",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve centrality for.",
                    "type": "Node|string"
                }
            ],
            "return": {
                "description": "Node's centrality.",
                "type": "Integer"
            },
            "see": [
                "getBetweenness",
                "getCloseness"
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21243,
            "description": "Returns the indegree centrality of the given node (number of connections entering the vertex)",
            "itemtype": "method",
            "name": "getIndegreeCentrality",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve indegree centrality for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's indegree centrality.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21254,
            "description": "Returns the outdegree centrality of the given node (number of connections exiting the vertex)",
            "itemtype": "method",
            "name": "getOutdegreeCentrality",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve outdegree centrality for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's indegree centrality.",
                "type": "Integer"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21265,
            "description": "Returns the Closeness centrality of the given node. This is the inverse of the node's farness.",
            "itemtype": "method",
            "name": "getCloseness",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve closeness for.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "Node's \"closeness\".",
                "type": "Float"
            },
            "see": [
                "getFarness"
            ],
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21276,
            "description": "Returns the farness centrality of the given node, ie. the sum of its distance from all other nodes, where the distance from one Node to another is given by the associated cost of the Edge joining the two Nodes.",
            "itemtype": "method",
            "name": "getFarness",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve farness for.",
                    "type": "Node|string"
                }
            ],
            "return": {
                "description": "Node's \"farness\".",
                "type": "Number"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21292,
            "description": "Returns the betweenness centrality of the given node.",
            "itemtype": "method",
            "name": "getBetweenness",
            "params": [
                {
                    "name": "node",
                    "description": "Node, or Node ID, to retrieve betweenness centrality for.",
                    "type": "Node|string"
                }
            ],
            "return": {
                "description": "Node's \"betweenness\" centrality.",
                "type": "Float"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21421,
            "description": "Calculates \"clusters\" of nodes (and groups), where a 'cluster' is a set of Nodes/Groups that\nare connected. Direction of connections is not taken into account. Nodes that are children of Groups are\nincluded in all cluster calculations, which might cause some weird situations, but this functionality\nis mostly intended just for Nodes anyway.",
            "metho": "getClusters",
            "return": {
                "description": "An array of arrays, each entry being a list of nodes in the cluster.",
                "type": "Array"
            },
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21465,
            "description": "finds the Vertex in the 'dist' table that has not yet been computed and has the smallest cost so far.",
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21499,
            "description": "assembles a path to the given target, using data from the 'dist' and 'previous' tables.  the source of the path is the source that was most recently passed in to the\nDjikstra.compute method.",
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 21607,
            "description": "An implementation of the Djikstra shortest path algorithm. The algorithm has been modified\nslightly to handle Ports on Nodes.",
            "class": "Graph"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22036,
            "description": "Gets the current NodeFactory.",
            "itemtype": "method",
            "name": "getNodeFactory",
            "return": {
                "description": "Current Node Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22044,
            "description": "Gets the current GroupFactory.",
            "itemtype": "method",
            "name": "getGroupFactory",
            "return": {
                "description": "Current Group Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22052,
            "description": "Gets the current EdgeFactory.",
            "itemtype": "method",
            "name": "getEdgeFactory",
            "return": {
                "description": "Current Edge Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22060,
            "description": "Gets the current PortFactory.",
            "itemtype": "method",
            "name": "getPortFactory",
            "return": {
                "description": "Current Port Factory; see documentation for a discussion.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22068,
            "description": "Sets the current NodeFactory.",
            "itemtype": "method",
            "name": "setNodeFactory",
            "params": [
                {
                    "name": "f",
                    "description": "Node factory to set as current; see documentation for a discussion",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22076,
            "description": "Sets the current GroupFactory.",
            "itemtype": "method",
            "name": "setGroupFactory",
            "params": [
                {
                    "name": "f",
                    "description": "Group factory to set as current; see documentation for a discussion",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22084,
            "description": "Sets the current EdgeFactory.",
            "itemtype": "method",
            "name": "setEdgeFactory",
            "params": [
                {
                    "name": "f",
                    "description": "Edge factory to set as current; see documentation for a discussion",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22092,
            "description": "Sets the current PortFactory.",
            "itemtype": "method",
            "name": "setPortFactory",
            "params": [
                {
                    "name": "f",
                    "description": "Port factory to set as current; see documentation for a discussion",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22108,
            "description": "Gets the model registered with this Toolkit instance, if any. Models may be registered on the Toolkit or on each individual\nSurface. In general it is a good idea to use the Toolkit's model to map data model event handlers and other data model considerations\nsuch as the maximum number of connections a Port allows, and each Surface's model definition to configure view concerns.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "Current model. May be null.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22195,
            "description": "Sets whether or not the original dataset will be updated whenever a node/edge is removed or added. This functionality is suspended\nwhen a `load` operation is taking place. Note that for this functionality to work there must be a `manager` registered for the given\ndata type in jsPlumbToolkitIO. The Toolkit ships with a manager for the default `json` datatype, but if you have your own custom\ndatatype you will need to provide one of these to support this functionality. See the documentation on data loading for a full\ndiscussion.",
            "itemtype": "method",
            "name": "setDoNotUpdateOriginalData",
            "params": [
                {
                    "name": "update",
                    "description": "True if you want the backing data to be updated, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22208,
            "description": "Returns the type function that is currently in use.",
            "itemtype": "method",
            "name": "getTypeFunction",
            "return": {
                "description": "Function currently being used to determine types of nodes from their data. The default is to look for a `type` member in the data.",
                "type": "Function"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22217,
            "description": "Connects two nodes/ports (or a combination of the two), by ID.  This function does not know about the DOM: you cannot pass it DOM elements\nor selectors. By default, this method will create nodes that are missing. Port ids are specified with a dotted syntax, eg `foo.bar` refers\nto the port \"bar\" on the node \"foo\".",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "params",
                    "description": "Connect parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Either the data for a node, or a node id as a string, representing the source node in the connection.",
                            "type": "Object|String"
                        },
                        {
                            "name": "target",
                            "description": "Either the data for a node, or a node id as a string, representing the target node in the connection",
                            "type": "Object|String"
                        },
                        {
                            "name": "cost",
                            "description": "Optional; the cost of the connection.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Optional, defaults to false. Whether the edge is directed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotCreateMissingNodes",
                            "description": "Optional, defaults to false. Whether to NOT create nodes that do not exist yet. Sorry about the double negative.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "data",
                            "description": "Optional backing data for the Edge. Here you might like to set id:'some value' if you need o retrieve the Edge by id later on.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "geometry",
                            "description": "Optional geometry for the Edge.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The new Edge.",
                "type": "Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22281,
            "description": "Fires a 'graphClearStart' event, clears the graph, then fires a `graphClearEnd` event.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22295,
            "description": "Returns the current Graph.",
            "itemtype": "method",
            "name": "getGraph",
            "return": {
                "description": "The underlying Graph.",
                "type": "Graph"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22304,
            "description": "Returns the count of nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "The count of Nodes in the Graph.",
                "type": "Number"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22313,
            "description": "Returns the Node at the given index.",
            "itemtype": "method",
            "name": "getNodeAt",
            "return": {
                "description": "The Node at the given index, null if not found.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22322,
            "description": "Returns all the nodes in the Graph.",
            "itemtype": "method",
            "name": "getNodes",
            "return": {
                "description": "All the Nodes in the graph.",
                "type": "Node[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22331,
            "description": "Iterates through all Nodes in the Toolkit one at a time. You should not perform destructive editing of\nthe dataset inside one of these loops.",
            "itemtype": "method",
            "name": "eachNode",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes (index, node) as arguments and is applied for every Node in the Toolkit instance.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22345,
            "description": "Iterates through all Groups in the Toolkit one at a time. You should not perform destructive editing of\nthe dataset inside one of these loops.",
            "itemtype": "method",
            "name": "eachGroup",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes (index, node) as arguments and is applied for every Node in the Toolkit instance.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22359,
            "description": "Iterates through all Edges in the Toolkit one at a time. You should not perform destructive editing of\nthe dataset inside one of these loops.",
            "itemtype": "method",
            "name": "eachEdge",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes (index, edge) as arguments and is applied for every Node in the Toolkit instance.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22372,
            "description": "Returns the total number of Edges.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "The total number of Edges in the Graph.",
                "type": "Number"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22381,
            "description": "Returns the total number of Groups",
            "itemtype": "method",
            "name": "getGroupCount",
            "return": {
                "description": "The total number of Groups in the Graph.",
                "type": "Number"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22390,
            "description": "Returns the Group at the given index.",
            "itemtype": "method",
            "name": "getGroupAt",
            "params": [
                {
                    "name": "idx",
                    "description": "Index into group list",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a Group, or null if not found.",
                "type": "Group"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22400,
            "description": "Returns all the Groups in the Graph.",
            "itemtype": "method",
            "name": "getGroups",
            "return": {
                "description": "All the Groups in the graph.",
                "type": "Group[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22409,
            "description": "Calculates \"clusters\" of nodes (and groups), where a 'cluster' is a set of Nodes/Groups that\nare connected. Direction of connections is not taken into account. Nodes that are children of Groups are\nincluded in all cluster calculations, which might cause some weird situations, but this functionality\nis mostly intended just for Nodes anyway.",
            "itemtype": "method",
            "name": "getClusters",
            "return": {
                "description": "An array of arrays, each entry being a list of nodes in the cluster.",
                "type": "Array"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22421,
            "description": "Gets the id of the Node represented by the given arguments. If this is a JS object, we extract the id using the\ncurrent idFunction. Otherwise we just pass it back as-is.",
            "itemtype": "method",
            "name": "getNodeId",
            "params": [
                {
                    "name": "node",
                    "description": "Object from which to retrieve id.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Node's id, if the current idFunction was able to resolve it, or the given object.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22433,
            "description": "Gets the type of the Node represented by the given JS object. We first try for a return value from the current typeFunction,\nbut if that returns nothing we just return 'default'.",
            "itemtype": "method",
            "name": "getNodeType",
            "params": [
                {
                    "name": "nodeData",
                    "description": "Node's data. Note: this is NOT a Node object, it is the backing data. You can use\n`getType` to get the type for some Toolkit object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Either the object's type, or `default`.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22445,
            "description": "Gets the id of the Edge represented by the given arguments. If this is a JS object, we extract the id using the\ncurrent edgeIdFunction. Otherwise we just pass it back as-is.",
            "itemtype": "method",
            "name": "getEdgeId",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge from which to retrieve id.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Edge's id, if we could resolve it, otherwise the object we were given.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22456,
            "description": "Gets the type of the Edge represented by the given JS object.",
            "itemtype": "method",
            "name": "getEdgeType",
            "params": [
                {
                    "name": "edgeData",
                    "description": "Edge's data. Note: this is NOT an Edge object, it is the backing data. You can use\n`getType` to get the type for some Toolkit object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Either the Edge's type, if set, or \"default\".",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22467,
            "description": "Gets the id of the Port represented by the given arguments. If this is a JS object, we extract the id using the\ncurrent portIdFunction. Otherwise we just pass it back as-is.",
            "itemtype": "method",
            "name": "getPortId",
            "return": {
                "description": "Port's id, if we could resolve it, otherwise the object we were given.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22477,
            "description": "Gets the type of the Port represented by the given JS object",
            "itemtype": "method",
            "name": "getPortType",
            "return": {
                "description": "Either the port's type, if set, or \"default\".",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22486,
            "description": "Gets the type of the given Object. This is not a type such as `Node`, `Port` or `Edge` - this is the type of the\nobject as defined by your system to identify types; these are the types used to lookup objects in the view.",
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to retrieve type for",
                    "type": "Node|Port|Edge"
                }
            ],
            "return": {
                "description": "The object's type.",
                "type": "String"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22498,
            "description": "Sets the type of the given object. This will do two things:\n1. update the appropriate property in the object's data to this new value. You can set what properties define\ntypes, but by default each of Node, Edge and Port use `type` as the property that indicates their type.\n2. attempt to apply a type definition for the new type, if one is found. NB this only applies to Edge objects,\nas at version 1.1.0. Support for Nodes (including switching node templates) is a possible future enhancement.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to set the type for.",
                    "type": "Node|Port|Edge"
                },
                {
                    "name": "type",
                    "description": "Type to set on the object.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22521,
            "description": "Adds a Node with the given data. If the data is null, the Toolkit creates an empty object and assigns\na uuid as the Node's id.  If no id can be derived for the given data, the Toolkit creates a uuid and\nsets it as the data object's 'id' member. This method also calls the current `portExtractor` function, if\none was supplied. Its purpose is to extract any Ports from the data for some given Node.",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "data",
                    "description": "The Node's backing data - from your data model.",
                    "type": "Object"
                },
                {
                    "name": "eventInfo",
                    "description": "Optional data member that the Toolkit will pass into any registered event listeners. This can be used\nby the UI layer, for instance, to track the position on screen of any newly added elements.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Node object.  Your original data is available via the `data` member. The Node's id is available via the `id` member.",
                "type": "Node"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22582,
            "description": "Adds a Node by type, running the data generation for the node through the current NodeFactory.  This is\ndifferent from `addNode` in that with `addNode` you are supplying the final data and your NodeFactory is\nnot called. This method can be called with one, two or three arguments. A single argument is considered to be\nthe new Node's `type`, and a backing data object will be created with this set, and no callback will occur.\nIf you provide two arguments the second argument may be either the new Node's backing data OR a callback to\nhit with the newly created Node. With three arguments the second argument is the Node's backing data and the\nthird is a callback to hit with the newly created Node.",
            "itemtype": "method",
            "name": "addFactoryNode",
            "params": [
                {
                    "name": "type",
                    "description": "Required. Type of the object to create. `type` will be passed as the first argument to your node factory.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Optional backing data for the Node.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Optional function to call with the newly created Node.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22613,
            "description": "Adds a list of Nodes.",
            "itemtype": "method",
            "name": "addNodes",
            "params": [
                {
                    "name": "nodeList",
                    "description": "An array of objects, one for each Node to be added.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22626,
            "description": "Adds a Group by type, running the data generation for the node through the current GroupFactory.  This is\ndifferent from `addGroup` in that with `addGroup` you are supplying the final data and your GroupFactory is\nnot called. This method can be called with one, two or three arguments. A single argument is considered to be\nthe new Group's `type`, and a backing data object will be created with this set, and no callback will occur.\nIf you provide two arguments the second argument may be either the new Group's backing data OR a callback to\nhit with the newly created Group. With three arguments the second argument is the Group's backing data and the\nthird is a callback to hit with the newly created Group.",
            "itemtype": "method",
            "name": "addFactoryGroup",
            "params": [
                {
                    "name": "type",
                    "description": "Required. Type of the object to create. `type` will be passed as the first argument to your group factory.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Optional backing data for the Group.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Optional function to call with the newly created Group.",
                    "type": "Function"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22657,
            "description": "Adds a new Group.",
            "itemtype": "method",
            "name": "addGroup",
            "params": [
                {
                    "name": "data",
                    "description": "Backing data for the Group.",
                    "type": "Object"
                },
                {
                    "name": "eventInfo",
                    "description": "Used internally, sometimes, by the Toolkit.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "doNotFireEvent",
                    "description": "If true, a `groupAdded` event will not be fired by this method.\nOtherwise a `groupAdded` event will be fired.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Group that was added.",
                "type": "Group"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22685,
            "description": "Adds a Node to a Group.",
            "itemtype": "method",
            "name": "addToGroup",
            "params": [
                {
                    "name": "node",
                    "description": "Node to add",
                    "type": "Node"
                },
                {
                    "name": "group",
                    "description": "Group to add the Node to",
                    "type": "Group"
                }
            ],
            "return": {
                "description": "True if added, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22711,
            "description": "Removes a Node from a Group.",
            "itemtype": "method",
            "name": "removeFromGroup",
            "params": [
                {
                    "name": "node",
                    "description": "Node to remove",
                    "type": "Node"
                },
                {
                    "name": "doNotFireEvent",
                    "description": "If true, a `group:removeMember` event will not be fired as a result of\nthis operation. Otherwise it will.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Group from which the Node was removed.",
                "type": "Group"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22738,
            "description": "Removes the given Group from the dataset.",
            "itemtype": "method",
            "name": "removeGroup",
            "params": [
                {
                    "name": "group",
                    "description": "Group or ID of Group to remove.",
                    "type": "Group|String"
                },
                {
                    "name": "removeChildNodes",
                    "description": "If true, Nodes that are members of the Group will also be\nremoved.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "doNotFireEvent",
                    "description": "If true, a `groupRemoved` will not be fired as a result of this\noperation. Otherwise it will.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The current toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22772,
            "description": "Gets a Node by id, or if the given object is already a Node, hands that back.",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "nodeId",
                    "description": "ID of the Node to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested Node, if found, otherwise null.",
                "type": "Node"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22782,
            "description": "Gets an Edge by id, or if the given object is already an Edge, hands that back.",
            "itemtype": "method",
            "name": "getEdge",
            "params": [
                {
                    "name": "edgeId",
                    "description": "ID of the Edge to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested Edge, if found, otherwise null.",
                "type": "Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22792,
            "description": "Gets a Group by its ID, or if the object is already a Group, hands that back.",
            "itemtype": "method",
            "name": "getGroup",
            "params": [
                {
                    "name": "groupId",
                    "description": ""
                }
            ],
            "return": {
                "description": "The requested Group, if found, otherwise null.",
                "type": "Group"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22802,
            "description": "Gets a port by its full id",
            "itemtype": "method",
            "name": "getPort",
            "params": [
                {
                    "name": "portId",
                    "description": "ID of the Port to retrieve, in nodeId.portId syntax.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested port, if found, otherwise null.",
                "type": "Port"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22815,
            "description": "Returns whether or not object(s) exist for the given id(s).",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "objects",
                    "description": "List of ids to check existence for.  This method takes an arbitrary number of arguments.",
                    "type": "Object..."
                }
            ],
            "return": {
                "description": "True if objects exist for all given ids, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22828,
            "description": "Removes the given Node, which may be passed in as the actual Node object, or its id.",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node, or its ID.",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22853,
            "description": "Adds an Edge to the Graph.",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "params",
                    "description": "Method params.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source Node, or id of the source Node. If given as a string, this may be in \"dotted\" format, eg. nodeId.portId, to identify a particular port on the source Node.",
                            "type": "Node|String"
                        },
                        {
                            "name": "target",
                            "description": "Target Node, or id of the target Node. If given as a string, this may be in \"dotted\" format, eg. nodeId.portId, to identify a particular port on the target Node.",
                            "type": "Node|String"
                        },
                        {
                            "name": "cost",
                            "description": "Edge cost. This is used when computing shortest paths through the graph. If\nan Edge is not `directed`, then the same cost is applied regardless of the direction of traversal.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "directed",
                            "description": "Whether or not the Edge is directed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Edge that was added.",
                "type": "Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22890,
            "description": "Removes an Edge from the Graph.",
            "itemtype": "method",
            "name": "removeEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "The Edge to remove, as either an Edge object or its id.",
                    "type": "Edge|String"
                },
                {
                    "name": "source",
                    "description": "The source for the removeEdge operation. For internal use.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current Toolkit instance.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22919,
            "description": "Sets the target Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge to retarget.",
                    "type": "Edge"
                },
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge target",
                    "type": "Node|Port|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22933,
            "description": "Sets the source Node/Port for some Edge.",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "edge",
                    "description": "Edge to set source for.",
                    "type": "Edge"
                },
                {
                    "name": "o",
                    "description": "Node/Port/id for new Edge source",
                    "type": "Node|Port|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22947,
            "description": "Adds a new Port to some Node. This will call the current `PortFactory` to get the data for a new Port.",
            "itemtype": "method",
            "name": "addNewPort",
            "params": [
                {
                    "name": "obj",
                    "description": "Node or id of the Node to add a new Port to.",
                    "type": "Node|String"
                },
                {
                    "name": "type",
                    "description": "Type of Port to add.",
                    "type": "String"
                },
                {
                    "name": "portData",
                    "description": "Optional data to pass to the PortFactory.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 22977,
            "description": "Adds a Port from existing data to some Node. This is distinct from `addNewPort`, because in this\ncase the data for the Port already exists.",
            "itemtype": "method",
            "name": "addPort",
            "params": [
                {
                    "name": "node",
                    "description": "Node or id of the Node to add the Port to.",
                    "type": "Node|String"
                },
                {
                    "name": "data",
                    "description": "Data for the Port.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The port that was added.",
                "type": "Port"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23002,
            "description": "Removes the Port with the given id from the given Node.",
            "itemtype": "method",
            "name": "removePort",
            "params": [
                {
                    "name": "node",
                    "description": "Either a node id, or a Node, from which the Port should be removed.",
                    "type": "Node|String"
                },
                {
                    "name": "portId",
                    "description": "Id of the port to remove from the given node.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the port existed and was removed, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23031,
            "description": "Removes whatever is identified by `obj`, which may be one of a number of things.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "Either a Node id, a Node, a Group ID, a Group, an Edge, or\nSelection or Path whose Nodes/Ports and Edges to remove.",
                    "type": "Node|Group|Edge|Selection|Path"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23064,
            "description": "Suspends or re-enables rendering. This method simply round-robins all the registered renderers\nand calls `setSuspendRendering` on each of them.",
            "itemtype": "method",
            "name": "setSuspendRendering",
            "params": [
                {
                    "name": "v",
                    "description": "True to suspend rendering, false to enable it.",
                    "type": "Boolean"
                },
                {
                    "name": "thenRefresh",
                    "description": "If true, a refresh will be called on all renderers after rendering is unsuspended.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23076,
            "description": "Suspends rendering and then runs the given function, unsuspending rendering afterwards and doing\na refresh. This method is just a convenience method that handles suspending\nand subsequent enabling of rendering. You might use this if you're adding a whole load of Nodes or\nEdges, or maybe you want to add a Node and one or more Edges before\nthe layout recomputes.",
            "itemtype": "method",
            "name": "batch",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23151,
            "description": "Updates the given Group, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updateNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Group, a Group id, or the backing data for a Group.",
                    "type": "Group|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23165,
            "description": "Updates the given Node, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updateNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node, a Node id, or the backing data for a Node.",
                    "type": "Node|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23178,
            "description": "Updates the given Port, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updatePort",
            "params": [
                {
                    "name": "port",
                    "description": "Either a Port, a Port id, or the backing data for a Port.",
                    "type": "Port|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23191,
            "description": "Updates the given Edge, notifying any Renderers to do a redraw. If autoSave is set, this method\nwill cause the dataset to be saved.",
            "itemtype": "method",
            "name": "updateEdge",
            "params": [
                {
                    "name": "edge",
                    "description": "Either an Edge, an Edge id, or the backing data for an Edge.",
                    "type": "Edge|String|Object"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23218,
            "description": "Updates the given object, notifying any renderers to do a repaint.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "object",
                    "description": "Either a Node, Port or Edge, or, as a string, the id of some Node or Port.",
                    "type": "Node|Port|Edge|String"
                },
                {
                    "name": "updates",
                    "description": "An object with path->value pairs. Path can be in dotted notation. You do not actually have to supply this, although in most cases you will want to. But there are edge cases in which you might simply wish to kick off a repaint.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The object that was updated, or null if not found.",
                "type": "Node|Port|Edge"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23250,
            "description": "Gets a Path from some source Node/Port to some target Node/Port.",
            "itemtype": "method",
            "name": "getPath",
            "params": [
                {
                    "name": "params",
                    "description": "Path spec params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node or port, or id of source node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "target",
                            "description": "Target node or port, or id of target node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "strict",
                            "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "nodeFilter",
                            "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFilter",
                            "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Path object. Even if no path exists you will get a return value - but it will just be empty.",
                "type": "Path"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23265,
            "description": "Finds the Graph object that matches the given spec.",
            "itemtype": "method",
            "name": "findGraphObject",
            "params": [
                {
                    "name": "spec",
                    "description": "If a string, a Node/Port matching that id is retrieved. Otherwise if `spec` is already a Graph object (Node or Port), it is\nreturned.",
                    "type": "String|Node|Port"
                }
            ],
            "return": {
                "description": "Node or Port matching the spec, null if no match or spec was not a Graph object.",
                "type": "Node|Port"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23312,
            "description": "Gets a set of edges.",
            "itemtype": "method",
            "name": "getEdges",
            "params": [
                {
                    "name": "params",
                    "description": "parameters for the select call",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source Node or id of source Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target Node or id of target Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a list of edges corresponding to the given params.",
                "type": "Edge[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23324,
            "description": "Get all Edges in the Toolkit instance.",
            "itemtype": "method",
            "name": "getAllEdges",
            "return": {
                "description": "",
                "type": "Edge[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23333,
            "description": "Gets all edges for the given Node, Port or Group.",
            "itemtype": "method",
            "name": "getAllEdgesFor",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to retrieve edges for.",
                    "type": "Node|Por|!Group"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function for edge selection.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a list of Edges.",
                "type": "Edge[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23344,
            "description": "Gets all edges where the given Node, Port or Group is the source.",
            "itemtype": "method",
            "name": "getSourceEdgesFor",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to retrieve edges for.",
                    "type": "Node|Port"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function for edge selection.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a list of Edges.",
                "type": "Edge[]"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23355,
            "description": "Gets all edges in the Toolkit instance as a Selection object.",
            "itemtype": "method",
            "name": "selectAllEdges",
            "return": {
                "description": "",
                "type": "Selection"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23366,
            "description": "Adds all the Edges in the Toolkit instance to the Toolkit's current selection.",
            "itemtype": "method",
            "name": "addAllEdgesToSelection",
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23430,
            "description": "Loads some data, either via ajax, or directly from a JS object.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "params",
                    "description": "Load parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type of the data to load. This must match the name of a loader registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "data",
                            "description": "Optional. JSON data to load directly.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "URL to retrieve data from. Optional, but you need to supply either this or `data`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "jsonp",
                            "description": "Optional, defaults to false. Tells the Toolkit that the data is coming via JSON-P.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onload",
                            "description": "Optional callback to execute once the data has loaded. Most often used when you are retrieving remote data (using `url` and possibly `jsonp`)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the loader.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "Optional function to call on load error.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "Optional map of HTTP header values, if loading via URL.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current instance of the Toolkit. If you provide data directly to this method you can then chain a load call with a subsequent `render`.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23448,
            "description": "Appends some data to the dataset, either via ajax, or directly from a JS object. The only difference\nbetween this and `load` is the events that are fired during the loading process.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "params",
                    "description": "Append parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type of the data to load. This must match the name of a loader registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "data",
                            "description": "Optional. JSON data to load directly.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "URL to retrieve data from. Optional, but you need to supply either this or `data`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "jsonp",
                            "description": "Optional, defaults to false. Tells the Toolkit that the data is coming via JSON-P.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onload",
                            "description": "Optional callback to execute once the data has loaded. Most often used when you are retrieving remote data (using `url` and possibly `jsonp`)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the loader.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "Optional function to call on load error.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current instance of the Toolkit. If you provide data directly to this method you can then chain a load call with a subsequent `render`.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23466,
            "description": "Saves the current data via ajax POST to a given URL.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "params",
                    "description": "Save parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type in which to format the data. This must match the name of an exporter registered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "url",
                            "description": "URL to POST data to.",
                            "type": "String"
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the exporter. If you write a custom exporter you may wish to use this.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "Callback to execute once the data has saved successfully.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "Callback to execute if there was an error saving the data.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "Optional headers to set on the ajax request. By default, the Toolkit will send\na `Content-Type:\"application/json\"` header. If you provide your own headers this header will continue to be sent, unless\nof course you override it.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current instance of the Toolkit. If you provide data directly to this\nmethod you can then chain a load call with a subsequent `render`.",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23499,
            "description": "Exports the current data to JSON.",
            "itemtype": "method",
            "name": "exportData",
            "params": [
                {
                    "name": "params",
                    "description": "Export parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "Specifies the data type in which to format the data. This must match the name of an exporter\nregistered with the given instance of the Toolkit.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"json\""
                        },
                        {
                            "name": "parameters",
                            "description": "Optional parameters to pass to the exporter. If you write a custom exporter you may wish to use this.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "JSON payload.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23551,
            "description": "Sets obj as the current selection for this instance of the jsPlumb Toolkit.",
            "itemtype": "method",
            "name": "setSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23561,
            "description": "Gets an ad-hoc selection",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Port/Edge or an array of either",
                    "type": "Node|Port|Edge|Node[]|Port[]|Edge[]|Path|String"
                },
                {
                    "name": "includeEdges",
                    "description": "If true, include edges between nodes/ports.\nof these, or a Node id, a Selection, or a Path.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23599,
            "description": "Selects all descendants of some Node, and, optionally, the Node itself.",
            "itemtype": "method",
            "name": "selectDescendants",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Port/Edge or an array of either\nof these, or a Node id, a Selection, or a Path.",
                    "type": "Node|Port|Edge|Node[]|Port[]|Edge[]|Path|String"
                },
                {
                    "name": "includeRoot",
                    "description": "Whether or not to include the root node in the returned dataset.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "includeEdges",
                    "description": "Whether or not to include edges in the returned dataset.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23621,
            "description": "Appends `obj` to the current selection. If there is no current selection, `obj` becomes it.",
            "itemtype": "method",
            "name": "addToSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23644,
            "description": "Toggles whether or not the given `obj` forms part of the current selection.",
            "itemtype": "method",
            "name": "toggleSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to select. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path, or a DOM element.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23666,
            "description": "Removes obj from the current selection",
            "itemtype": "method",
            "name": "removeFromSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to deselect. May be a Node/Edge or an array of either\nof these, or a Node id, or a Path, or a DOM element.",
                    "type": "Node|Edge|Node[]|Edge[]|Path|String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23684,
            "description": "Appends the Path from `source` to `target` to the current selection. If there is no current selection, `obj` becomes it.\nIf the Path does not exist, there is no selection.",
            "itemtype": "method",
            "name": "addPathToSelection",
            "params": [
                {
                    "name": "params",
                    "description": "Path params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "ID of source, or source Node/Port",
                            "type": "Node|String"
                        },
                        {
                            "name": "target",
                            "description": "ID of target, or target Node/Port",
                            "type": "Node|String"
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23696,
            "description": "Sets the current selection to be every node in the toolkit instance.",
            "itemtype": "method",
            "name": "selectAll",
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23705,
            "description": "Clears the current selection and fires a `selectionCleared` event.",
            "itemtype": "method",
            "name": "clearSelection",
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23711,
            "description": "Gets the current Selection for this Toolkit instance.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "Current Selection.",
                "type": "Selection"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23720,
            "description": "Sets the maximum number of nodes that may be selected at any one time. Default is Infinity.",
            "itemtype": "method",
            "name": "setMaxSelectedNodes",
            "params": [
                {
                    "name": "maxNodes",
                    "description": "Max number of nodes allowed to be selected at once.",
                    "type": "Integer"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23729,
            "description": "Sets the maximum number of edges that may be selected at any one time. Default is Infinity.",
            "itemtype": "method",
            "name": "setMaxSelectedEdges",
            "params": [
                {
                    "name": "maxEdges",
                    "description": "Max number of edges allowed to be selected at once.",
                    "type": "Integer"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23738,
            "description": "Sets The action taken when appending an edge or node that would\ntake the selection above its limit for that given type. Depends on the current `capacityPolicy`, which can be either\nSelection.DISCARD_EXISTING (the default) or Selection.DISCARD_NEW.",
            "itemtype": "method",
            "name": "setSelectionCapacityPolicy",
            "params": [
                {
                    "name": "policy",
                    "description": "One of `Selection.DISCARD_EXISTING` (which removes the 0th entry from the list before insertion of the new value) or `Selection.DISCARD_NEW`.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23760,
            "description": "Configures the given element as a renderer, registering it so that it reflects any changes to the\nunderlying data. This method turns the given element into a Surface if it is not already one.  If there is any data in the\nToolkit at the time of this call it is rendered; any data subsequently loaded is automatically rendered. You can supply\nlayout arguments to this method (layout type + layout specific parameters), as well as jsPlumb rules for\nendpoints, paint styles etc.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "Element to convert into a Surface.",
                            "type": "Element|Selector"
                        },
                        {
                            "name": "id",
                            "description": "Optional id to register the created Surface against. You can then retrieve the Surface via `toolkit.getRenderer(id)`. If you do not provide this, one will be assigned. The ID is written as the renderer's `id` property.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "elementsDraggable",
                            "description": "Whether or not elements in the Surface should be draggable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "dragOptions",
                            "description": "Options for draggable elements.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "Optional event bindings. See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "miniview",
                            "description": "Optional miniview configuration. See documentation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "mode",
                            "description": "Mode to initialize the Surface in.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"Pan\""
                        },
                        {
                            "name": "panDistance",
                            "description": "How far a pan nudge should move the UI (in pixels).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "enablePan",
                            "description": "Whether or not panning (via mouse drag) is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableWheelZoom",
                            "description": "Whether or not zooming with the mouse wheel is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "wheelFilter",
                            "description": "Optional CSS selector representing elements that should not respond to wheel zoom.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "wheelSensitivity",
                            "description": "How many pixels each click of the mouse wheel represents when zooming. Note that this value, while expressed in pixels, is mapped in a variety of ways depending on the browser.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "enablePanButtons",
                            "description": "Whether or not to show the pan nudge buttons on the borders of the widgets.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "lassoFilter",
                            "description": "Optional selector for elements on which a mousedown should not cause the lasso to activate.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "consumeRightClick",
                            "description": "Useful for development: set this to false if you don't want the widget to consume context menu clicks.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "jsPlumb",
                            "description": "Optional set of jsPlumb Defaults to use for this renderer. The format and allowed properties is that of\n                the Defaults object in jsPlumb. You can also set display properties in the model.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "enhancedModel",
                            "description": "If false, there will be no support for preconfigured parameters or functions in the definitions inside a Model. You will want to set this for Angular if you use the 2-way data binding.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "[params.padding] Optional values for padding in the x/y axes to leave around the content. This is only of any use if you have disabled panning via mouse drag,\nsince in that case the user sees only scroll bars and has no way of navigating beyond the content. Some padding makes the UI nicer to use. Default is [0,0]",
                    "description": ".",
                    "type": "Number[]"
                }
            ],
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23835,
            "description": "Gets a renderer by the `id` parameter supplied to the `render` call (which is by default null, and only renderers for which an `id` was supplied are retrievable via this method)",
            "itemtype": "method",
            "name": "getRenderer",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the renderer to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Either a Renderer that was registered against the given id, or null if none found.",
                "type": "AbstractRenderer"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23845,
            "description": "Gets all renderers registered on this instance of the jsPlumb Toolkit.",
            "itemtype": "method",
            "name": "getRenderers",
            "return": {
                "description": "A map of `id-> Renderer` pairs.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23854,
            "description": "Finds information related to the given object, which may be a DOM node or an existing Toolkit object. This function is\nuseful for mapping some UI element to its underlying data.",
            "itemtype": "method",
            "name": "getObjectInfo",
            "params": [
                {
                    "name": "obj",
                    "description": "An element id, node id, DOM element, Node or Port.",
                    "type": "String|Element|Node|Port"
                },
                {
                    "name": "elementResolver",
                    "description": "For internal use. Resolves a Node or Port into its DOM element.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A JS object containing `obj` (the Toolkit object), `id` (the Node/Port ID), `type` (\"port\" or \"node\"), `els` - a map of Surface ids\nto [ Surface, Element ] pairs, one for each Surface that has rendered the given Node/Port.",
                "type": "Object"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 23946,
            "description": "Gets a new instance of the jsPlumb Toolkit.",
            "params": [
                {
                    "name": "params",
                    "description": "Valid constructor parameters for a jsPlumbToolkitInstance."
                }
            ],
            "return": {
                "description": "",
                "type": "JsPlumbToolkitInstance"
            },
            "class": "jsPlumbToolkitInstance"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24474,
            "description": "Models a Path - the series of edges and intermediate nodes between two nodes or ports\nin some toolkit of the Toolkit.",
            "class": "jsPlumbToolkit.Model"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24491,
            "is_constructor": 1,
            "params": [
                {
                    "name": "toolkit",
                    "description": "toolkit instance from which to get the path info.",
                    "type": "JsPlumbToolkitInstance"
                },
                {
                    "name": "params",
                    "description": "Path spec params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node or port, or id of source node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "target",
                            "description": "Target node or port, or id of target node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "strict",
                            "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "nodeFilter",
                            "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFilter",
                            "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24573,
            "description": "Iterates through the path one step at a time. Each step consists of an object containing a\n`vertex`, and, for all entries except the first, an `edge` member, which supplies the Edge that links\nto the Vertex (which is why it is null for the first entry).",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call for each step. Arguments are `(index, {vertex:v,edge:e})`.",
                    "type": "Function"
                }
            ],
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24586,
            "description": "Iterates through the Nodes/Ports in the path one step at a time.",
            "itemtype": "method",
            "name": "eachNode",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call for each step. Arguments are `(index, Node|Port)`.",
                    "type": "Function"
                }
            ],
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24597,
            "description": "Iterates through the Edges in the path one step at a time. There is always one fewer Edges than Nodes/Ports.",
            "itemtype": "method",
            "name": "eachEdge",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call for each step. Arguments are `(index, Edge)`.",
                    "type": "Function"
                }
            ],
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24608,
            "description": "Gets the number of Nodes in the Path.",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "Number of Nodes in the Path.",
                "type": "Integer"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24617,
            "description": "Gets the Node at the given index in the path.",
            "itemtype": "method",
            "name": "getNodeAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24627,
            "description": "Gets the number of Edges in the Path.",
            "itemtype": "method",
            "name": "getEdgeCount",
            "return": {
                "description": "Number of Edges in the Path.",
                "type": "Integer"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24636,
            "description": "gets the Edge at the given index in the Path.",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of the Edge to retrieve. You can use negative numbers here: an index of -1 means get the last edge.\nAn index of -2 means get the last but one. etc."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24647,
            "description": "The Path from the underlying Graph. See Graph documentation.",
            "itemtype": "property",
            "name": "path",
            "type": "{Graph.Path}",
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24654,
            "description": "Deletes every Edge in this Path from the underlying Toolkit toolkit.",
            "itemtype": "method",
            "name": "deleteEdges",
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24660,
            "description": "Deletes every Node in this Path from the underlying Toolkit toolkit.  Note that this has the\neffect of also deleting all the Edges, so this is analogous to #deleteAll.",
            "itemtype": "method",
            "name": "deleteNodes",
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24667,
            "description": "Deletes every object in this Path from the underlying Toolkit toolkit.",
            "itemtype": "method",
            "name": "deleteAll",
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24673,
            "description": "Returns whether or not a given path is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True if path is empty, false otherwise.",
                "type": "Boolean"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24682,
            "description": "Returns the cost of a given path, computed as the sum of the cost of all of the edges in the path.",
            "itemtype": "method",
            "name": "getCost",
            "return": {
                "description": "Total cost of the Path. Null if path does not exist.",
                "type": "Number"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24691,
            "description": "Returns whether or not a Path contains the given object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "Node/Port/Edge,",
                    "description": "or object id, of the element to test for.",
                    "type": "Node|Port|Edge|String"
                },
                {
                    "name": "doNotFuzzyMatchNodes",
                    "description": "If true, will return true iff a given Node is on the Path. Otherwise,\nif the test object is a Node that has a Port on the Path, this method will return true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if Path contains the object, false otherwise.",
                "type": "Boolean"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24701,
            "description": "Returns whether or not a given path exists.",
            "itemtype": "method",
            "name": "exists",
            "return": {
                "description": "True if path exists, false otherwise.",
                "type": "Boolean"
            },
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24710,
            "description": "Select a set of edges.",
            "itemtype": "method",
            "name": "selectEdges",
            "params": [
                {
                    "name": "params",
                    "description": "parameters for the select call",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source Node or id of source Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target Node or id of target Node from which to select Edges.",
                            "type": "Node|String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24721,
            "description": "Select all edges in the toolkit toolkit.",
            "itemtype": "method",
            "name": "selectAllEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters for the selectAllEdges call.",
                    "type": "Object"
                }
            ],
            "class": "Path"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 24915,
            "description": "Ingests an existing jsPlumb instance into a new Toolkit instance, and turns the instance's Container into a Surface.  Every element\nthat is the source or target of a Connection is added to the Toolkit instance as a Node, and every Connection is added as an Edge. You\ncan provide your own functions for determining the `id` and `type` of Nodes and Edges, if you need to. This method will throw an error\nif your jsPlumb instance does not have a Container set; it is a requirement for the Surface widget.",
            "itemtype": "method",
            "name": "ingest",
            "static": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jsPlumb",
                            "description": "The instance of jsPlumb to ingest. If null, it uses the static jsPlumb window instance.",
                            "type": "JsPlumbInstance",
                            "optional": true
                        },
                        {
                            "name": "nodeSelector",
                            "description": "Optional selector to identify elements that may not yet be managed by jsPlumb but which you would like to have imported as Nodes.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "idFunction",
                            "description": "A function to use to extract the id from elements that are being loaded as Nodes. If null,\n                                      the default behaviour is to ask the jsPlumb instance for the element's `id` attribute.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "typeFunction",
                            "description": "A function to use to extract the type from elements that are being loaded as Nodes. If null,\n                                      the default behaviour is to use `default` as the Node type.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeIdFunction",
                            "description": "A function to use to extract the id from Connections that are being loaded as Edges. If null,\n                                      the default behaviour is to use the Connection's `id`.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeTypeFunction",
                            "description": "A function to use to extract the type from Connections that are being loaded as Edges. If null,\n                                      the default behaviour is to use `default` as the Edge type.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "renderParams",
                            "description": "Parameters to pass to the Surface constructor.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "render",
                            "description": "If false, this method returns only a Toolkit instance with data loaded, and doesn't create a Surface renderer for it.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A Surface instance whose underlying Toolkit has been loaded with the contents of the jsPlumb instance (you can access the Toolkit itself via `surface.getToolkit()`), or, if `render` was set to false, a `jsPlumbToolkitInstance`..",
                "type": "JsPlumbToolkitInstance|Surface"
            },
            "class": "jsPlumbToolkit.Support"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25354,
            "description": "Magnetize the display. You must indicate what sort of magnetization you wish to perform: if you provide an event,\nthe event's location will be the magnetization origin. If you provide `origin:{left;xxx, top:xxx}`, that value will be used. If\nyou provide neither, the computed center of all elements will be used. You can also provide an `options:{...}` value, whose\nvalues can contain `filter`, `constrain` and `padding` values for the specific run of the magnetizer.",
            "itemtype": "method",
            "name": "magnetize",
            "params": [
                {
                    "name": "params",
                    "description": "Magnetize parameters. If omitted, the origin of magnetization will be the computed center of all the elements.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "event",
                            "description": "If provided, the event location will be used as the origin of magnetization.",
                            "type": "Event",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "An object with `left` and `top` properties. If provided, will be used as the origin of magnetization.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "description": "Extra magnetizer options for this run of the magnetizer.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25378,
            "description": "Called by components to inform a layout that a new Node was added. You should never\ncall this method directly. Also, you should not override this method in a custom layout: if your layout\nneeds to track Node addition, implement `_nodeAdded` instead.",
            "itemtype": "method",
            "name": "nodeAdded",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "node",
                            "description": "Node that was added",
                            "type": "Node"
                        },
                        {
                            "name": "el",
                            "description": "The DOM element associated with the Node.",
                            "type": "Element"
                        }
                    ]
                },
                {
                    "name": "eventInfo",
                    "description": "Optional information associated with the Event that the host system needs to pass through without adding to the data model.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25406,
            "description": "Optional method for subclasses to override should they wish to be informed of Node addition.",
            "itemtype": "method",
            "name": "_nodeAdded",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "node",
                            "description": "Node that was added",
                            "type": "Node"
                        },
                        {
                            "name": "data",
                            "description": "Data associated with the Node",
                            "type": "Object"
                        },
                        {
                            "name": "el",
                            "description": "The DOM element associated with the Node.",
                            "type": "Element"
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25415,
            "description": "Called by components to inform a layout that a given Node was removed. You should never\ncall this method directly.",
            "itemtype": "method",
            "name": "nodeRemoved",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "node",
                            "description": "Node that was removed",
                            "type": "Node"
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25435,
            "description": "Optional method for subclasses to implement if they wish to be informed of Node removal.",
            "itemtype": "method",
            "name": "_nodeRemoved",
            "params": [
                {
                    "name": "node",
                    "description": "The Node that was removed.",
                    "type": "Node"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25441,
            "description": "Called by components to inform a layout that a new Group was added. You should never\ncall this method directly. Also, you should not override this method in a custom layout: if your layout\nneeds to track Group addition, implement `_groupAdded` instead.",
            "itemtype": "method",
            "name": "groupAdded",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "group",
                            "description": "Group that was added",
                            "type": "Group"
                        },
                        {
                            "name": "el",
                            "description": "The DOM element associated with the Group.",
                            "type": "Element"
                        }
                    ]
                },
                {
                    "name": "eventInfo",
                    "description": "Optional information associated with the Event that the host system needs to pass through without adding to the data model.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25469,
            "description": "Optional method for subclasses to override should they wish to be informed of Group addition.",
            "itemtype": "method",
            "name": "_groupAdded",
            "params": [
                {
                    "name": "params",
                    "description": "Method args",
                    "type": "Object",
                    "props": [
                        {
                            "name": "group",
                            "description": "Group that was added",
                            "type": "Node"
                        },
                        {
                            "name": "data",
                            "description": "Data associated with the Group",
                            "type": "Object"
                        },
                        {
                            "name": "el",
                            "description": "The DOM element associated with the Group.",
                            "type": "Element"
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25478,
            "description": "Called by components to inform a layout that a given Group was removed. You should never\ncall this method directly.",
            "itemtype": "method",
            "name": "groupRemoved",
            "params": [
                {
                    "name": "params",
                    "description": "Method params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "group",
                            "description": "Group that was removed.",
                            "type": "Group"
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25498,
            "description": "Optional method for subclasses to implement if they wish to be informed of Group removal.",
            "itemtype": "method",
            "name": "_groupRemoved",
            "params": [
                {
                    "name": "group",
                    "description": "The Group that was removed.",
                    "type": "Group"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25505,
            "description": "Optional method for subclasses to implement if they wish to be informed of a Node having moved.",
            "itemtype": "method",
            "name": "_nodeMoved",
            "params": [
                {
                    "name": "nodeId",
                    "description": "Id of the the Node that was moved.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "New X location of the Node.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "New Y location of the Node.",
                    "type": "Number"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25514,
            "description": "Optional method for subclasses to implement if they wish to be informed of a Group having moved.",
            "itemtype": "method",
            "name": "_groupMoved",
            "params": [
                {
                    "name": "groupId",
                    "description": "Id of the the Group that was moved.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "New X location of the Group.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "New Y location of the Group.",
                    "type": "Number"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25522,
            "description": "Gets the size of the node with given id, caching it for later use.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the node to retrieve size for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Width and height of the Node in an array.",
                "type": "Number[]"
            },
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25552,
            "description": "Gets the position of the node with given id, creating it (as a random value) if null and optionally setting values.\nnote this method does a 'pass by reference' thing as the return value - any changes you make will\nbe used by the final layout step (this is a good thing). Note that here it is fine to work with\nthe node's id, as we are not going anywhere near a DOM element yet. When it comes time to\nactually set a DOM element's position, we use the supplied `getElementForNode` function to\nget it.  And of course note also that we are not necessarily dealing with DOM elements.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node to retrieve the position for",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "Optional X location for the Node if its position has not yet been set.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "Optional Y location for the Node if its position has not yet been set.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "doNotRandomize",
                    "description": "If true, won't set a random position for an element whose position is not yet being tracked.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25634,
            "description": "Sets the Position of the Node with the given ID.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node to set the position for",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "X location for the Node.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location for the Node.",
                    "type": "Number"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25719,
            "description": "Sets the position of the node/group with the given id, firing a nodeMoved/groupMoved event afterwards, and\nthen recalculating the extents.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the node/group to move",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "Left position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Top position.",
                    "type": "Number"
                },
                {
                    "name": "doNotCalculateExtents",
                    "description": "If true, do not recalculate the layout extents. we use this during a layout run, as\nwe dont need to calculate the extents until it is finished. But for a single setPosition call, we do want to recalculate extents.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25770,
            "description": "Sets what the layout considers to be the size of the node with the given id. This method is not\ngenerally necessary if you use the `layout` methods on the surface widget.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node to set the size for.",
                    "type": "String"
                },
                {
                    "name": "s",
                    "description": "Size of the node.",
                    "type": "Number[]"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25787,
            "description": "This is an abstract function that subclasses may implement if they wish. It will be called at the beginning of a layout.",
            "itemtype": "method",
            "name": "begin",
            "abstract": "",
            "params": [
                {
                    "name": "_jsPlumbToolkit",
                    "description": "The associated jsPlumbToolkit instance",
                    "type": "JsPlumbToolkitInstance"
                },
                {
                    "name": "parameters",
                    "description": "Parameters configured for the layout.",
                    "type": "Object"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25796,
            "description": "This is an abstract function that subclasses may implement if they wish. It will be called at the end of a layout.",
            "itemtype": "method",
            "name": "end",
            "abstract": "",
            "params": [
                {
                    "name": "_jsPlumbToolkit",
                    "description": "The associated jsPlumbToolkit instance",
                    "type": "JsPlumbToolkitInstance"
                },
                {
                    "name": "parameters",
                    "description": "Parameters configured for the layout.",
                    "type": "Object"
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25832,
            "description": "Runs the layout, first doing a reset of element positions. Next, if the subclass has defined a `begin` method, that will\nbe called first.  Then, the subclass's `step` method will be called repeatedly, until the subclass makes a call to `_super.setDone`.\nUse the `layout` method to run the layout incrementally without first resetting everything.",
            "itemtype": "method",
            "name": "relayout",
            "params": [
                {
                    "name": "newParameters",
                    "description": "Optional new set of parameters to apply.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "onComplete",
                    "description": "Optional function to call on completion of relayout.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25848,
            "description": "Runs the layout, without resetting calculated or user-provided positions beforehand.\nIf the subclass has defined a `begin` method, that will be called first.  Then, the subclass's\n`step` method will be called repeatedly, until the subclass makes a call to `_super.setDone`.",
            "itemtype": "method",
            "name": "layout",
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 25859,
            "description": "Resets user-supplied and calculated positions.",
            "itemtype": "method",
            "name": "clear",
            "class": "Layouts.AbstractLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26000,
            "description": "Set the layout on which to base this layout.",
            "class": "Layouts.Mistletoe"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26073,
            "description": "Gets the position for the given Node/Group as dictated by either the `left`/`top` properties, or some other nominated pair, in the Node/Group's data.\nThis position is what the Absolute layout uses itself, and this method exposes the absolute position for subclasses that wish to make use\nof the absolute backing.",
            "params": [
                {
                    "name": "v",
                    "description": "Node/Group to get absolute position for.",
                    "type": "Node|Group"
                },
                {
                    "name": "parameters",
                    "description": "Constructor parameters. May contain a custom `locationFunction`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number[]"
            },
            "class": "Layouts.AbsoluteBackedLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26203,
            "name": "jsPlumbToolkit.Layouts.Circular",
            "desc": "Provides a circular layout.",
            "class": "Layouts.AbstractHierarchicalLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26207,
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "padding",
                            "description": "Minimum distance between a node and its neighbours. Defaults to 30 pixels.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ],
            "class": "Layouts.AbstractHierarchicalLayout"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26711,
            "description": "Gets the computed hierarchy. This is returned as an array of objects, one for each level, inside which\nthere is a `nodes` array.",
            "itemtype": "method",
            "name": "getHierarchy",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Layouts.Hierarchical"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 26719,
            "description": "Gets the orientation of the layout - \"horizontal\" or \"vertical\".",
            "return": {
                "description": "\"horizontal\" or \"vertical\"",
                "type": "String"
            },
            "class": "Layouts.Hierarchical"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27098,
            "name": "jsPlumbToolkit.Layouts.Balloon",
            "desc": "Provides a balloon layout.",
            "class": "Layouts.Spring"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27102,
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Constructor parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "padding",
                            "description": "Minimum distance between a node/group and its neighbours. Defaults to 30 pixels.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ],
            "class": "Layouts.Spring"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27597,
            "description": "Adapter for a normal DOM element",
            "class": "Layouts.Spring"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27690,
            "description": "Called by a layout at the end of the layout cycle. Positions some element. For the canvas adapter this means\nthe view layer needs to be told to position the element, the panzoom widget needs to be informed of the node\nmoving, and the surface should fire a nodeMoved event.",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Layouts.Spring"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27891,
            "description": "Switches debug on/off. Currently debug is limited to information about connections that are being dragged.",
            "params": [
                {
                    "name": "d",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27927,
            "description": "Sets/unsets hover suspended state. When hover is suspended, no connections or endpoints repaint themselves\non mouse hover.",
            "itemtype": "method",
            "name": "setHoverSuspended",
            "params": [
                {
                    "name": "suspended",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27935,
            "description": "Gets hover suspended state.",
            "itemtype": "method",
            "name": "isHoverSuspended",
            "return": {
                "description": "Hover suspended state.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 27942,
            "description": "Sets the current jsPlumb defaults",
            "itemtype": "method",
            "name": "setJsPlumbDefaults",
            "params": [
                {
                    "name": "defaults",
                    "description": "Defaults to set.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 28220,
            "description": "Sets whether or not rendering is suspended. This actually does not mean that new nodes are not\nadded, but it does mean that the panzoom widget is informed not to do any work involving element\npostions or sizes.",
            "itemtype": "method",
            "name": "setSuspendRendering",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 28235,
            "description": "Wraps the underlying Toolkit's `batch` function with the added step of first suspending events being\nfired from this renderer.",
            "itemtype": "method",
            "name": "batch",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to run while rendering and events are both suspended."
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 28318,
            "description": "Run the groups auto size routine on all groups.",
            "itemtype": "method",
            "name": "autoSizeGroups",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 28324,
            "description": "Run the group auto size routine on a given groups.",
            "itemtype": "method",
            "name": "sizeGroupToFit",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29135,
            "description": "Sets the current view for this renderer.",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "p",
                    "description": "View to set.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29169,
            "description": "Activates the UI state with the given ID on the objects contained in the given target. If target is not supplied, the state is\nactivated against the entire dataset.",
            "itemtype": "method",
            "name": "activateState",
            "params": [
                {
                    "name": "stateId",
                    "description": "ID of the state to activate. States are defined inside a `states` member of your `view` definition.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "Set of objects to activate the state on. If null, the entire dataset (Nodes, Edges and Ports) is used. If you provide an Element here, a Selection is created that consists of the Node representing the element, plus all Edges to and from the given Node.",
                    "type": "Selection|Path|jsPlumbToolkitInstance|Element",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29185,
            "description": "Deactivates the UI state with the given ID on the objects contained in the given target. If target is not supplied, the state is\ndeactivated against the entire dataset.",
            "itemtype": "method",
            "name": "deactivateState",
            "params": [
                {
                    "name": "stateId",
                    "description": "ID of the state to deactivate. States are defined inside a `states` member of your `view` definition.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "Set of objects to deactivate the state on. If null, the entire dataset (Nodes, Edges and Ports) is used.",
                    "type": "Selection|Path|jsPlumbToolkitInstance",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29203,
            "description": "Resets (clears) the UI state of all objects in the current dataset.",
            "itemtype": "method",
            "name": "resetState",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29604,
            "description": "Gets the DOM node that was rendered for the given Node/Port/Group.",
            "itemtype": "method",
            "name": "getRenderedElement",
            "params": [
                {
                    "name": "obj",
                    "description": "Node, Group or Port for which to retrieve the rendered element.",
                    "type": "Node|Port"
                }
            ],
            "return": {
                "description": "DOM element for the given Node/Group/Port, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29618,
            "description": "Gets the DOM node that was rendered for the Node with the given id.",
            "itemtype": "method",
            "name": "getRenderedNode",
            "params": [
                {
                    "name": "nodeId",
                    "description": "Node id for which to retrieve the rendered element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DOM element for the given Node id, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29628,
            "description": "Gets the DOM node that was rendered for the Group with the given id.",
            "itemtype": "method",
            "name": "getRenderedGroup",
            "params": [
                {
                    "name": "groupId",
                    "description": "Group id for which to retrieve the rendered element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DOM element for the given Group id, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29638,
            "description": "Gets the DOM node that was rendered for the Port with the given id.",
            "itemtype": "method",
            "name": "getRenderedPort",
            "params": [
                {
                    "name": "portId",
                    "description": "Port id for which to retrieve the rendered element. Note that you must supply the \"full\" id here, that is in dotted\nnotation with the id of the Node on which the port resides.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DOM element for the given Port id, null if not found.",
                "type": "Element"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29649,
            "description": "Gets the underlying jsPlumb connection that was rendered for the Edge with the given id.",
            "itemtype": "method",
            "name": "getRenderedConnection",
            "params": [
                {
                    "name": "edgeId",
                    "description": "ID of the Edge to retrieve the Connection for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A jsPlumb Connection, null if not found.",
                "type": "Connection"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29659,
            "description": "Gets the underlying jsPlumb Endpoint that was rendered for the given Port.",
            "itemtype": "method",
            "name": "getRenderedEndpoint",
            "params": [
                {
                    "name": "portId",
                    "description": "The Port, or the ID of the Port, to retrieve the Endpoint for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a jsPlumb Endpoint, null if not found.",
                "type": "Endpoint"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29738,
            "description": "Applies the given layout one time to the content.",
            "itemtype": "method",
            "name": "adHocLayout",
            "params": [
                {
                    "name": "layoutParams",
                    "description": "Parameters for the layout, including type and constructor parameters.",
                    "type": "Object"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29751,
            "description": "Sets the current layout.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "layoutParams",
                    "description": "Parameters for the layout, including type and constructor parameters.",
                    "type": "Object"
                },
                {
                    "name": "doNotRefresh",
                    "description": "Do not refresh the UI after setting the new layout.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29770,
            "description": "Gets the current layout.",
            "itemtype": "method",
            "name": "getLayout",
            "return": {
                "description": "The current layout.",
                "type": "Layout"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29783,
            "description": "Magnetize the display. You must indicate what sort of magnetization you wish to perform: if you provide an event,\nthe event's location will be the magnetization origin. If you provide `origin:{left;xxx, top:xxx}`, that value will be used. If\nyou provide neither, the computed center of all elements will be used. You can also provide an `options:{...}` value, whose\nvalues can contain `filter`, `constrain` and `padding` values for the specific run of the magnetizer.",
            "itemtype": "method",
            "name": "magnetize",
            "params": [
                {
                    "name": "params",
                    "description": "Magnetize parameters. If omitted, the origin of magnetization will be the computed center of all the elements.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "event",
                            "description": "If provided, the event location will be used as the origin of magnetization.",
                            "type": "Event",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "An object with `left` and `top` properties. If provided, will be used as the origin of magnetization.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "description": "Extra magnetizer options for this run of the magnetizer.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29821,
            "description": "Incrementally update the layout, without a reset. If rendering is suspended, this method does nothing.",
            "itemtype": "method",
            "name": "refresh",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29850,
            "description": "Sets whether or not the layout is refreshed automatically after a Node, Port or Group is added or removed.",
            "itemtype": "method",
            "name": "setRefreshAutomatically",
            "params": [
                {
                    "name": "refreshAutomatically",
                    "description": "True to refresh automatically, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29859,
            "description": "When the component is rendering a Selection (as opposed to an entire Toolkit instance), this causes the Selection to\nreload, and the component to be cleared and everything redrawn",
            "itemtype": "method",
            "name": "reload",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29868,
            "description": "Reset the layout and run it again.  This is different to `refresh` in that `refresh` does not reset the layout first.",
            "itemtype": "method",
            "name": "relayout",
            "params": [
                {
                    "name": "newParameters",
                    "description": "Optional new parameters for the layout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29923,
            "description": "Gets a Path from some source Node/Port to some target Node/Port. This method is a wrapper around the\nToolkit's `getPath` method, adding a few ui specific functions to the result.",
            "itemtype": "method",
            "name": "getPath",
            "params": [
                {
                    "name": "params",
                    "description": "Path spec params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node or port, or id of source node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "target",
                            "description": "Target node or port, or id of target node/port",
                            "type": "Node|Port|String"
                        },
                        {
                            "name": "strict",
                            "description": "Sets whether or not paths are searched strictly by the given source/target. If, for instance, you supply a node as the source, but there are only edges connected to ports on that node, by default these edges will be ignored. Switching `strict` to false will mean these edges are considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "nodeFilter",
                            "description": "Optional function that is given each Node's backing data and asked to return true or false - true means include the Node, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "edgeFilter",
                            "description": "Optional function that is given each Edge's backing data and asked to return true or false - true means include the Edge, false means exclude it.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Path object. Even if no path exists you will get a return value - but it will just be empty.",
                "type": "Path"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29975,
            "description": "Gets the position of an element that is being managed by the Surface.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "el",
                    "description": "Element id, element, selector or Node to get position for.",
                    "type": "String|Element|Selector|Node"
                }
            ],
            "return": {
                "description": "[left,top] position array if element found, otherwise null.",
                "type": "Number[]|Null"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29989,
            "description": "Gets the size of an element that is being managed by the Surface.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "el",
                    "description": "Element id, element, selector or Node to get position for.",
                    "type": "String|Element|Selector|Node"
                }
            ],
            "return": {
                "description": "[width, height] Array if element found, otherwise null.",
                "type": "Number[]|Null"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 29999,
            "description": "Gets the origin and size of an element that is being managed by the Surface.",
            "itemtype": "method",
            "name": "getCoordinates",
            "params": [
                {
                    "name": "el",
                    "description": "Element id, element, selector or Node to get position for.",
                    "type": "String|Element|Selector|Node"
                }
            ],
            "return": {
                "description": "{x:.., y:..., w:..., h:...} if element found, otherwise null.",
                "type": "Object"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30463,
            "description": "Writes the current left/top for each node into the data model. A common use case is to run an auto layout the first time\nsome dataset is seen, and then to save the locations of all the nodes once a human being has moved things around.",
            "itemtype": "method",
            "name": "storePositionsInModel",
            "params": [
                {
                    "name": "params",
                    "description": "Parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "leftAttribute",
                            "description": "Name of the attribute to use for the left position. Default is 'left'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "topAttribute",
                            "description": "Name of the attribute to use for the top position. Default is 'top'",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30494,
            "description": "Writes the current left/top for some Node or Group into the data model. A common use case is to run an auto layout the first time\nsome dataset is seen, and then to save the locations of all the Nodes/Groups once a human being has moved things around. Note that this method\ntakes either a String, representing the Node or Group's ID, and uses the default values for left/top attribute names, or an Object, in which\nyou provide the id and the left/top attribute names.",
            "itemtype": "method",
            "name": "storePositionInModel",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node or Group for which to store the position. Either supply this, or an object containing id and values for the left/top attribute names.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters. An object containing id and values for the left/top attribute names. Supply this or just supply the node id as a string.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "Node or Group id",
                            "type": "Integer"
                        },
                        {
                            "name": "group",
                            "description": "If true, the ID given is for a Group, not a Node.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "leftAttribute",
                            "description": "Name of the attribute to use for the left position. Default is 'left'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "topAttribute",
                            "description": "Name of the attribute to use for the top position. Default is 'top'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "force",
                            "description": "optionally force the storage, which will ignore the internal flag that ordinarily dictates whether the position is stored.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The current position as [left, top].",
                "type": "Integer[]"
            },
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30556,
            "description": "Sets the position of the given Node or Group.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node/Group id, a DOM element representing a Node/Group, or a Node/Group.",
                    "type": "String|Node|Element"
                },
                {
                    "name": "x",
                    "description": "left position for the element.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "top position for the element.",
                    "type": "Number"
                },
                {
                    "name": "doNotUpdateElement",
                    "description": "If true, the DOM element will not be moved. This flag is used internally by various Toolkit methods; most external calls to this method will want the element to be moved.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "doNotUpdateLayout ",
                    "description": "If true, the layout will not be updated with the new position value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": " false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30581,
            "description": "Sets the position of the given Node or Group, magnetizing afterwards to push away any elements that it is now overlapping.",
            "itemtype": "method",
            "name": "setMagnetizedPosition",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node/Group id, a DOM element representing a Node/Group, or a Node/Group.",
                    "type": "String|Node|Element"
                },
                {
                    "name": "x",
                    "description": "left position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "top position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "doNotUpdateElement",
                    "description": "If true, the DOM element will not be moved. This flag is used internally by various Toolkit methods; most external calls to this method will want the element to be moved.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30604,
            "description": "Sets the position of the given Node/Group, animating the element to that position.",
            "itemtype": "method",
            "name": "animateToPosition",
            "params": [
                {
                    "name": "node",
                    "description": "Either a Node/Group id, a DOM element representing a Node/Group, or a Node/Group.",
                    "type": "String|Node|Element"
                },
                {
                    "name": "x",
                    "description": "left position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "top position for the element.",
                    "type": "Integer"
                },
                {
                    "name": "animateOptions",
                    "description": "Options for the animation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30662,
            "description": "Checks the visibility of a node, edge or port.",
            "itemtype": "method",
            "name": "isVisible",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30681,
            "description": "Sets the visibility of some Node/Port or Edge.",
            "itemtype": "method",
            "name": "setVisible",
            "params": [
                {
                    "name": "obj",
                    "description": "An Edge, Port, Node or - in the case of String - a  Node/Port id.",
                    "type": "Selection|Path|Edge|Node|Port|String|Node[]|Port[]|Edge[]|String[]"
                },
                {
                    "name": "state",
                    "description": "Whether the object should be visible or not.",
                    "type": "Boolean"
                },
                {
                    "name": "doNotCascade",
                    "description": "If true, the method does not cascade visibility changes down from a Node to its connected Edges, or from an Edge to its Ports. The default is for this to happen.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30786,
            "description": "Add the given Node to the posse with the given name",
            "itemtype": "method",
            "name": "addToPosse",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node.",
                    "type": "Element|String|Node"
                },
                {
                    "name": "posse",
                    "description": "ID of the posse to add the Node to.",
                    "type": "String"
                },
                {
                    "name": "active",
                    "description": "If true (which is the default), the Node causes all other Nodes in the Posse\nto be dragged. If false, this Node drags independently but is dragged whenever an _active_ member of the Posse\nis dragged,",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30802,
            "description": "Sets the posse(s) for the element with the given id, creating those that do not yet exist, and removing from\nthe element any current Posses that are not specified by this method call. This method will not change the\nactive/passive state if it is given a posse in which the element is already a member.",
            "itemtype": "method",
            "name": "setPosse",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node",
                    "type": "Element|String|Node"
                },
                {
                    "name": "spec",
                    "description": "Variable args parameters. Each argument can be a either a String, indicating\nthe ID of a Posse to which the element should be added as an active participant, or an Object containing\n`{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\ntrue.",
                    "type": "String...|Object..."
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30820,
            "description": "Remove the given Node from the given Posse.",
            "itemtype": "method",
            "name": "removeFromPosse",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node.",
                    "type": "Element|String|Node"
                },
                {
                    "name": "posseId",
                    "description": "ID of the posse from which to remove the Node from.",
                    "type": "String"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30833,
            "description": "Remove the given Node from all Posses to which it belongs.",
            "itemtype": "method",
            "name": "removeFromAllPosses",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element representing a Node, or a Node id, or a Node.",
                    "type": "Element|String|Node"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30845,
            "description": "Changes the participation state for the given Node in the Posse with the given ID.",
            "itemtype": "method",
            "name": "setPosseState",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element, node ID or Node to change state for.",
                    "type": "Element|String|Node"
                },
                {
                    "name": "posseId",
                    "description": "ID of the Posse to change element state for.",
                    "type": "String"
                },
                {
                    "name": "active",
                    "description": "True to make active, false to make passive.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30859,
            "description": "Destroy the renderer - unbind all event listeners from the Toolkit, deregister the renderer, and\ninstruct the subclass to clean itself up.",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 30985,
            "description": "Wheel Listener\n\nCopyright 2020 jsPlumb\nhttps://jsplumbtoolkit.com\n\nThis software is not free.\n\nNormalises wheel events across browsers.",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 31102,
            "description": "Pinch listener for all touch browsers - ipad, android, and windows laptops/surfaces. Needless to say,\nevery browser does it differently. IE10+ uses PointerEvents; ipad safari/windows chrome/ipad chrome/\nandroid chrome use TouchEvents.  The listener posts pinchstart, pinch happening, and pinch end events.",
            "class": "jsPlumbToolkit.Renderers.AbstractRenderer"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 31759,
            "description": "Manually set the bounds (position, and x/y) for some element, by id.",
            "itemtype": "method",
            "name": "setBoundsFor",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the element to set bounds for.",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "Origin of the element",
                    "type": "Number[]"
                },
                {
                    "name": "w",
                    "description": "Width of the element",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the element",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 31769,
            "description": "Set the size of some element. Does nothing if the element is not registered.",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "w",
                    "description": ""
                },
                {
                    "name": "h",
                    "description": ""
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 31779,
            "description": "Sets whether or not rendering is suspended, which for the moment means that when updateBounds is\ncalled, the widget doesn't sort the bounds, since we know there will be more changes to the\npositions and/or sizes of elements.",
            "itemtype": "method",
            "name": "setSuspendRendering",
            "params": [
                {
                    "name": "val",
                    "description": "True to suspend rendering, false to re-enable rendering. If an update was called during the\ntime that rendering was suspended, the positions are sorted once rendering is re-enabled."
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 31951,
            "description": "Decodes the page location from the given event, taking touch devices into account.",
            "itemtype": "method",
            "name": "pageLocation",
            "params": [
                {
                    "name": "e",
                    "description": "Event from which to decode location"
                }
            ],
            "return": {
                "description": "[left, top] of the given event.",
                "type": "Integer[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32318,
            "description": "Programmatically report a down event in order to kick the widget into action.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "e",
                    "description": "Mouse event to use to kick things off.",
                    "type": "Event"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32452,
            "description": "Registers that an element has changed position, updating bounds info as necessary.",
            "itemtype": "method",
            "name": "positionChanged",
            "params": [
                {
                    "name": "el",
                    "description": "Element that has just moved.",
                    "type": "Element"
                },
                {
                    "name": "pos",
                    "description": "New position. If this is omitted, it will be calculated.",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "Optional id of the element. This might be called from a context in which\nthe id is known already, so we can save some work.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "size",
                    "description": "Optional size of the element. As with ID we may be calling this from a context in which we already have this\ninformation.",
                    "type": "Number[]",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32469,
            "description": "Adds the given element to those that this widget is tracking.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "el",
                    "description": "Element to begin tracking.",
                    "type": "Element"
                },
                {
                    "name": "id",
                    "description": "Optional id of the element. This might be called from a context in which\nthe id is known already, so we can save some work.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pos",
                    "description": "Optional location for the node.  If not provided, the position will be retrieved from a call to the DOM.",
                    "type": "Number[]",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32501,
            "description": "Removes the given element from the list this widget is tracking. Note that this widget does\nnot remove the element from the DOM.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "el",
                    "description": "Element to stop tracking.",
                    "type": "Selector|Element"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32524,
            "description": "Removes all tracked elements and resets the widget.",
            "itemtype": "method",
            "name": "reset",
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32535,
            "description": "Gets the current bounds information.",
            "itemtype": "method",
            "name": "getBoundsInfo",
            "return": {
                "description": "An object with these fields:\nw - width of the content\nh - height of the content\nx - minimum x value of all nodes in the content\ny - minimum y value of all nodes in the content\nvw - width of the viewport\nvh - height of the viewport\npadding - padding around the content (an array)\nz - smallest zoom that could result in all the content being visible inside the viewport\nzoom - current zoom",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32551,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport. This method will also,\nby default, increase the zoom if necessary - meaning the default behaviour is to adjust the zoom so that\nthe content fills the viewport. You can suppress zoom increase by setting `doNotZoomIfVisible:true` on the\nparameters to this method.",
            "itemtype": "method",
            "name": "zoomToFit",
            "params": [
                {
                    "name": "params.padding",
                    "description": "Optional padding to leave around all elements.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "params.fill",
                    "description": "Amount of the viewport to fill. By default, this method will zoom so that the content is 0.9 times the size of the viewport.\nAesthetically this makes for a more pleasing result than filling the viewport entirely.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.9"
                },
                {
                    "name": "params.onComplete",
                    "description": "Optional function to call on operation complete (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.onStep",
                    "description": "Optional function to call on operation step (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.doNotAnimate",
                    "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "params.doNotZoomIfVisible",
                    "description": "If true, no action is taken if the content is currently all visible.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "params.doNotFirePanEvent",
                    "description": "If true, a pan event will not be fired.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32584,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport, but does not make any adjustments\nto zoom if all the elements are currently visible (it still does center the content though).",
            "itemtype": "method",
            "name": "zoomToFitIfNecessary",
            "params": [
                {
                    "name": "params.padding ",
                    "description": "Optional padding to leave around all elements.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": " 0"
                },
                {
                    "name": "params.fill",
                    "description": "Amount of the viewport to fill. By default, this method will zoom so that the content is 0.9 times the size of the viewport.\nAesthetically this makes for a more pleasing result than filling the viewport entirely.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.9"
                },
                {
                    "name": "params.onComplete",
                    "description": "Optional function to call on operation complete (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.onStep",
                    "description": "Optional function to call on operation step (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.doNotAnimate",
                    "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32601,
            "description": "Zooms the display so that all the given elements fit inside the viewport.",
            "itemtype": "method",
            "name": "zoomToElements",
            "params": [
                {
                    "name": "zParams",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "elements",
                            "description": "List of DOM elements to zoom to.",
                            "type": "Element[]"
                        },
                        {
                            "name": "fill",
                            "description": "A decimal indicating how much of the viewport to fill with the zoomed content.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.90"
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true and the widget determines the entire selection is already\nvisible, the zoom will not be adjusted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default the widget does not animate this operation. You can override that behaviour by setting doNotAnimate:false.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32649,
            "description": "Zooms the display so that the background fits inside the viewport.",
            "itemtype": "method",
            "name": "zoomToBackground",
            "params": [
                {
                    "name": "params.onComplete",
                    "description": "Optional function to call on operation complete (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.onStep",
                    "description": "Optional function to call on operation step (centering may be animated).",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params.doNotAnimate",
                    "description": "If true, centering content will not use animation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32678,
            "description": "Sets (or clears) the filter that will be called if the widget needs to know whether to respond to an event that would\nstart a pan. By default, the widget responds to down events on the viewport or the canvas, but not on child nodes. You\ncan supply a function that the widget will call in the event that the down event did not occur on the viewport or the canvas;\nreturning true from this function will cause the pan to begin.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filterFn",
                    "description": "Function to set as the filter; may be null if you wish to clear it. The function should return true if it wants to honour the down event on the given element.",
                    "type": "Function"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32692,
            "description": "Position the widget so the background is centered in the viewport, without changing the current zoom.",
            "itemtype": "method",
            "name": "centerBackground",
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32715,
            "description": "Positions the widget so that the edges of the background align with the viewport. This method is useful for\nsnapping to a corner of the background.",
            "itemtype": "method",
            "name": "alignBackground",
            "params": [
                {
                    "name": "axes",
                    "description": "Spec for the axes to align to. This should be a space-separated string containing a value\nfor the x (allowed values `left` and `right`) and, optionally, y (allowed values `top` and `bottom`) axes. The\ndefault value is `\"left top\"`.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32740,
            "description": "Places (using `style.left` and `style.top`) the given element at the given x,y, which is taken to\nmean an x,y value on the canvas.  At zoom 1, with no panning, this will be the same as the given x,y value\nrelative to the viewport origin.  But once the canvas has been zoomed and panned we have to map\nto the altered coordinates. This function also takes into account the difference between the offset of the\nviewport in the page and the offset of the given element. It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.",
            "itemtype": "method",
            "name": "positionElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "ensureOnScreen",
                    "description": "If true, will ensure that x and y positions are never negative.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32774,
            "description": "Places (using `style.left` and `style.top`) the given element at the given page x,y.  It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.",
            "itemtype": "method",
            "name": "positionElementAtPageLocation",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32789,
            "description": "Places (using `style.left` and `style.top`) the given element at the page x,y corresponding to the given event.  It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.",
            "itemtype": "method",
            "name": "positionElementAtEventLocation",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "evt",
                    "description": "Event to position element at.",
                    "type": "Event"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32803,
            "description": "Zooms the component by the given increment, centered on the location at which the given event occurred.",
            "itemtype": "method",
            "name": "zoomToEvent",
            "params": [
                {
                    "name": "e",
                    "description": "Browser event",
                    "type": "Event"
                },
                {
                    "name": "increment",
                    "description": "Amount to zoom by (a positive or negative number). If this takes the component out of the current zoom range, it will be clamped.",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32814,
            "description": "Tells the widget that a relayout has occurred. If panning is\ndisabled, the widget will move the canvas element so that all\ncontent is visible, and adjust the transform origin so that the ui\nzooms from the apparent top left corner. Nothing happens as a result of\nthis method if panning is enabled.",
            "itemtype": "method",
            "name": "relayout",
            "params": [
                {
                    "name": "extents",
                    "description": "Bounds information, as an arry of [minX, minY, maxX, maxY.",
                    "type": "Object"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32860,
            "description": "Nudges the zoom by the given amount. Zoom will be clamped to the current zoom range in effect and the\nvalue that was ultimately set is returned from this function.",
            "itemtype": "method",
            "name": "nudgeZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by. The value you pass in here is multiplied by\n100 to give a percentage value: 1 is 100%, for instance, 0.05 is 5%. You can pass in negative numbers to\nzoom out.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "return": {
                "description": "The zoom that was set. Zoom will be clamped to the allowed range.",
                "type": "Number"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32882,
            "description": "Nudges the wheel zoom by the given amount. This function is intended for use by components that control\nzoom via the mouse wheel, and not for general usage. See `nudgeZoom` for a more general version of this.",
            "itemtype": "method",
            "name": "nudgeWheelZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32894,
            "description": "Centers the tracked content inside the viewport, but does not adjust the current zoom.",
            "itemtype": "method",
            "name": "centerContent",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds info. This is in an internal format and only used when this method is called by the widget itself. Otherwise it is calculated.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, don't animate while centering.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32935,
            "description": "Centers the tracked content inside the viewport horizontally, but does not adjust the current zoom.",
            "itemtype": "method",
            "name": "centerContentHorizontally",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds info. This is in an internal format and only used when this method is called by the widget itself. Otherwise it is calculated.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, don't animate while centering.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32949,
            "description": "Centers the tracked content inside the viewport vertically, but does not adjust the current zoom.",
            "itemtype": "method",
            "name": "centerContentVertically",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds info. This is in an internal format and only used when this method is called by the widget itself. Otherwise it is calculated.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, don't animate while centering.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 32963,
            "description": "Centers the given element in the viewport, vertically and/or horizontally.",
            "itemtype": "method",
            "name": "centerOn",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                },
                {
                    "name": "cparams",
                    "description": "Optional extra parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontal",
                            "description": "Whether or not to center horizontally",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "vertical",
                            "description": "Whether or not to center vertically",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, animation will not be switched on for the operation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional on complete callback",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional on animation step callback.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "fillRatio",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.4"
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33002,
            "description": "Centers the given element in the viewport, horizontally only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33011,
            "description": "Centers the given element in the viewport, vertically only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33020,
            "description": "Centers on the given element and then adjusts the zoom of the widget so that the short axis of the viewport\nis [1 / fillRatio] larger than its corresponding axis on the centered node. `fillRatio` is basically\na measure of how much context you want to see around the node on which you centered.",
            "itemtype": "method",
            "name": "centerOnAndZoom",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                },
                {
                    "name": "fillRatio",
                    "description": "Proportional ratio of the corresponding node's edge to the viewport's short edge.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.6"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33054,
            "description": "Gets the canvas location that corresponds to the center of the viewport.  Note that this may describe\na point outside of the content bounds.",
            "itemtype": "method",
            "name": "getViewportCenter",
            "return": {
                "description": "left,top location of the logical position on the canvas corresponding to the center of the viewport.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33072,
            "description": "Sets the location of the canvas such that the given point appears at the center of the viewport.",
            "itemtype": "method",
            "name": "setViewportCenter",
            "params": [
                {
                    "name": "xy",
                    "description": "left, top location of the point on the canvas to position in the center of the viewport.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33090,
            "description": "Sets whether or not the widget clamps the movement of the canvas during pan/zoom\nto ensure that the managed content never disappears from view.",
            "itemtype": "method",
            "name": "setClamping",
            "params": [
                {
                    "name": "c",
                    "description": "Whether or not to clamp movement.",
                    "type": "Boolean"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33100,
            "description": "Returns whether or not the widget clamps the movement of the canvas during pan/zoom/",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33108,
            "description": "Sets the current zoom, clamping it to the allowed range.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "z",
                    "description": "Zoom value. If this is outside the allowed bounds it will be clamped.",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "Whether to animate the change in zoom, or just go straight to the new zoom level.",
                    "type": "Boolean"
                },
                {
                    "name": "dontFireEvent",
                    "description": "If true, a zoom event will not be fired.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Current zoom. This may or may not be the value you asked for - it might have been clamped to the current allowed zoom range.",
                "type": "Number"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33120,
            "description": "Sets the current zoom range. By default, this method checks if the current zoom is within\nthe new range, and if it is not then `setZoom` is called, which will cause the zoom to be clamped\nto an allowed value in the new range. You can disable this by passing `true` for `doNotClamp`.",
            "itemtype": "method",
            "name": "setZoomRange",
            "params": [
                {
                    "name": "zr",
                    "description": "New range, as an array consisting of [lower, upper] values. Lower must be less than upper.",
                    "type": "Number[]"
                },
                {
                    "name": "doNotClamp",
                    "description": "If true, will not check the current zoom to ensure it falls within the new range.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of [min, max] current zoom values.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33141,
            "description": "Gets the current zoom range.",
            "itemtype": "method",
            "name": "getZoomRange",
            "return": {
                "description": "Array of [min, max] current zoom values.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33150,
            "description": "Gets the current zoom.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "Current zoom value",
                "type": "Number"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33159,
            "description": "Gets the current [left,top] of the panned content.",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "[left,top], in pixels, of the panned content, where [0,0] is the origin of the viewport.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33168,
            "description": "Pans the content by dx and dy.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "Amount to pan in X direction",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Amount to pan in Y direction",
                    "type": "Number"
                },
                {
                    "name": "animate ",
                    "description": "Whether or not to animate the pan.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": " false"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33185,
            "description": "Sets the position of the panned content's origin.",
            "itemtype": "method",
            "name": "setPan",
            "params": [
                {
                    "name": "left",
                    "description": "Position in pixels of the left edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Position in pixels of the top edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "animate ",
                    "description": "Whether or not to animate the pan.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": " false"
                },
                {
                    "name": "onComplete",
                    "description": "If `animate` is set to true, an optional callback for the end of the pan.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onStep",
                    "description": "If `animate` is set to true, an optional callback for each frame in the pan.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33198,
            "description": "Sets the current transform origin, in pixels. Used mainly to support save/restore state.",
            "itemtype": "method",
            "name": "setTransformOrigin",
            "params": [
                {
                    "name": "left",
                    "description": "Position of the X coordinate of the transform origin.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Position of the Y coordinate of the transform origin.",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33242,
            "description": "Maps the given page location to a value relative to the viewport origin, allowing for\nzoom and pan of the canvas. This takes into account the offset of the viewport in the page so that what\nyou get back is the mapped position relative to the target element's [left,top] corner. If\nyou wish, you can supply true for 'doNotAdjustForOffset', to suppress that behavior.",
            "itemtype": "method",
            "name": "mapLocation",
            "params": [
                {
                    "name": "left",
                    "description": "X location",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Y location",
                    "type": "Number"
                },
                {
                    "name": "doNotAdjustForOffset",
                    "description": "Whether or not to adjust for the offset of the viewport in the page.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The mapped location, as {left:number, top:number}",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33265,
            "description": "Maps the page location of the given event to a value relative to the viewport origin, allowing for\nzoom and pan of the canvas. This takes into account the offset of the viewport in the page so that what\nyou get back is the mapped position relative to the target element's [left,top] corner. If\nyou wish, you can supply true for 'doNotAdjustForOffset', to suppress that behavior.",
            "itemtype": "method",
            "name": "mapEventLocation",
            "params": [
                {
                    "name": "event",
                    "description": "Browser event",
                    "type": "Event"
                },
                {
                    "name": "doNotAdjustForOffset",
                    "description": "Whether or not to adjust for the offset of the viewport in the page.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The mapped location, as {left:number, top:number}",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33280,
            "description": "Sets whether or not the component should respond to mouse events.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "state",
                    "description": "Whether or not to respond to mouse events.",
                    "type": "Boolean"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33289,
            "description": "Takes some element that is in the DOM and moves it so that it appears at the given x,y over the canvas,\nallowing for the current zoom and pan.  It is expected that the element is not one that is currently\nmanaged by the widget - a common use case for this is some dialog, which you do not want to append to\nthe canvas since it would have the zoom effect applied.",
            "itemtype": "method",
            "name": "showElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Selector, DOM element or element id representing the element to move.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location to move to.",
                    "type": "Number"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33311,
            "description": "Returns the apparent [left,top] of the canvas inside the viewport - the coordinates, in real pixel\nvalues, of where the origin of the canvas appears to be. This apparent origin is not necessarily the\nsame as the [left,top] values of the canvas, because the transform origin and zoom values change\nthings.  This function can be used in conjunction with the content bounds by widgets such as the miniview, to calculate what is actually visible in the\nviewport at some point in time.",
            "itemtype": "method",
            "name": "getApparentCanvasLocation",
            "return": {
                "description": "[Integer[]] [left,top] of the canvas, relative to the viewport's 0,0."
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33327,
            "description": "Sets the apparent canvas location - see the notes for getApparentCanvasLocation.",
            "itemtype": "method",
            "name": "setApparentCanvasLocation",
            "params": [
                {
                    "name": "left",
                    "description": "Value in pixels for left edge of canvas.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Value in pixels for top edge of canvas.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[left,top] of the actual origin set, after clamping.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33342,
            "description": "Applies either the widget's current zoom to the given element, or some supplied zoom.",
            "itemtype": "method",
            "name": "applyZoomToElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to set zoom on.",
                    "type": "Element"
                },
                {
                    "name": "zoomToSet",
                    "description": "Optional zoom value; if omitted we use the widget's current zoom.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33353,
            "description": "Sets the transform origin for some element. This is really just exposed as a helper, since\nthere seems little point in reinventing the wheel if you have this widget in your codebase and you\nneed to perform this operation.  The Miniview uses this, for instance.",
            "itemtype": "method",
            "name": "setTransFormOriginForElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to set transform origin for.",
                    "type": "Element"
                },
                {
                    "name": "xy",
                    "description": "Transform origin for element.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33365,
            "description": "Gets the current transform origin, in an object of the form `[ left, top ]`. The coordinate space is pixels.",
            "itemtype": "method",
            "name": "getTransformOrigin",
            "return": {
                "description": "[left,top] values for the transform origin.",
                "type": "Number[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33374,
            "description": "Appends an element to the viewport so that it floats above the content that is being zoomed and panned.\nThe element will have `position:absolute` set on it. You can float any element you like, but note that the\nresponsibility for setting an appropriate z index is yours.",
            "params": [
                {
                    "name": "el",
                    "description": "Element to float.",
                    "type": "Element"
                },
                {
                    "name": "pos",
                    "description": "Array of [x,y] positions.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33416,
            "description": "Appends an element to the content such that it is zoomed with everything else, but constrains pan\nin one or both axes so that the element remains fixed with respect to the viewport origin.",
            "itemtype": "method",
            "name": "fixElement",
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element to append.",
                    "type": "Element"
                },
                {
                    "name": "constraints",
                    "description": "Flags to indicate optional constraint to each axis.",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "[left,top] location of the element's origin.",
                    "type": "Number[]"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33441,
            "description": "Finds all nodes that intersect to any extent the rectangle defined by the given origin\nand dimensions. This rectangle is taken to be in the coordinate space of the page, ie. a value\nof [0,0] for the origin means the page's top/left corner. A future version could take an optional\nthird argument specifying the element whose origin to use.",
            "itemtype": "method",
            "name": "findIntersectingNodes",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search. IMPORTANT: This is relative to the page origin.",
                    "type": "Number[]"
                },
                {
                    "name": "dimensions",
                    "description": "Width and height of search area.",
                    "type": "Number[]"
                },
                {
                    "name": "enclosed",
                    "description": "If true, returns only nodes that are enclosed by the given search area. Otherwise returns nodes that both intersect and are enclosed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function. This is passed the (id, node, boundingRect) of some element and should return true for elements that should be included in results.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "candidates",
                    "description": "Optional map of (id->element), or an array of elements or element ids, identifying the elements to include in the search. If\n                                       not provided, all elements are tested.",
                    "type": "Object|Element[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect} that either intersect or are enclosed by the search area.",
                "type": "Object[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33499,
            "description": "Finds all nodes whose centers are within a rectangle with `origin` as its center, and\na width and height of `radius / 2`.",
            "itemtype": "method",
            "name": "findNearbyNodes",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search. IMPORTANT: This is relative to the page origin.",
                    "type": "Number[]"
                },
                {
                    "name": "radius",
                    "description": "Radius of search.",
                    "type": "Number"
                },
                {
                    "name": "mustBeInViewport",
                    "description": "If true, first check that the given origin is within the viewport.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function. Should return true for elements that should be included in results.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect}, sorted in ascending order of distance of the center of the bounding rectangle from the given origin.",
                "type": "Object[]"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33533,
            "description": "Returns whether or not the given point (relative to page origin) is within the viewport for the widget.",
            "itemtype": "method",
            "name": "isInViewport",
            "params": [
                {
                    "name": "x",
                    "description": "X location of point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location of point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the point is within the viewport, false if not.",
                "type": "Boolean"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33548,
            "description": "Returns the current map of element ids -> positions.",
            "itemtype": "method",
            "name": "getElementPositions",
            "return": {
                "description": "Map of { id->[x,y]} positions.",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33557,
            "description": "Sets the filter used to determine whether or not a given event should begin a pan.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "f",
                    "description": "A function that will be given the current mouse event. You must return true from the function if you wish for a pan to begin.",
                    "type": "Function"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33568,
            "description": "Sets the filter used to determine whether or not a given wheel event should be responded to.",
            "itemtype": "method",
            "name": "setWheelFilter",
            "params": [
                {
                    "name": "f",
                    "description": "A function that will be given the current mouse event. You must return false from the function if you wish for the wheel event to be responded to.",
                    "type": "Function"
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33579,
            "description": "Sets the background for the canvas element.",
            "itemtype": "method",
            "name": "setBackground",
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "img",
                            "description": "Image to use. Optional; you can also supply an image url",
                            "type": "Image",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "Image URL.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "\"tiled\" or \"simple\": whether to use a single background image or to tile it.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"simple\""
                        },
                        {
                            "name": "tiling",
                            "description": "Default is \"logarithmic\": each layer is assumed to have a maximum of\n(2^level+1) tiles in each axis (for instance at level 0, 2 tiles in each axis.  Alternatively you can\nset this to be \"absolute\", which means that at the maximum zoom level the number of tiles in each axis\nis computed as the size of the image in that axis divided by the tile size in that axis (rounded up of course).\nThen at subsequent levels below, the",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"logarithmic\""
                        },
                        {
                            "name": "onBackgroundReady",
                            "description": "Optional function to call when the image has loaded.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33617,
            "description": "Gets the current background layer.",
            "return": {
                "description": "current background layer. you can use the `getWidth` and `getHeight` methods on this object to find out the background size.",
                "type": "Object"
            },
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 33625,
            "description": "Cleans up the pan zoom widget - removes all event bindings, and all elements from the DOM.",
            "class": "ZoomWidget"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34011,
            "description": "Constant for the Select mode.",
            "itemtype": "property",
            "name": "SELECT",
            "type": "{String}",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34017,
            "description": "Constant for the Pan mode.",
            "itemtype": "property",
            "name": "PAN",
            "type": "{String}",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34023,
            "description": "Constant for the Disabled mode.",
            "itemtype": "property",
            "name": "DISABLED",
            "type": "{String}",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34554,
            "description": "Zooms the display so that the current selected nodes are all visible, optionally animating the transition.",
            "itemtype": "method",
            "name": "zoomToSelection",
            "params": [
                {
                    "name": "params",
                    "description": "Optional method params",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fill",
                            "description": "A decimal indicating how much of the viewport to fill with the zoomed content.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.90"
                        },
                        {
                            "name": "selection",
                            "description": "Optional Selection to which to zoom. If omitted, the default is to use the Toolkit's\ncurrent selection.",
                            "optional": true
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true, no action is taken if the content is currently all visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default the widget does not animate this operation. You can override that behaviour by setting doNotAnimate:false.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "filter",
                            "description": "Optional function to use as a filter; we create the selection by running this filter by the Toolkit's `filter` method.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34589,
            "description": "Zooms the display so that the current selected nodes are all visible, animating the transition.",
            "itemtype": "method",
            "name": "animateToSelection",
            "params": [
                {
                    "name": "params",
                    "description": "Optional method params",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fill",
                            "description": "A decimal indicating how much of the viewport to fill with the zoomed content.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.90"
                        },
                        {
                            "name": "selection",
                            "description": "Optional Selection to which to zoom. If omitted, the default is to use the Toolkit's\ncurrent selection.",
                            "optional": true
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true, no action is taken if the content is currently all visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "filter",
                            "description": "Optional function to use as a filter; we create the selection by running this filter by the Toolkit's `filter` method.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34603,
            "description": "Zooms the display so that the background fits inside the viewport.",
            "itemtype": "method",
            "name": "zoomToBackground",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, centering content will not use animation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34613,
            "description": "Zooms the display so that all the visible tracked elements fit into 90% of the viewport. This method will also,\nby default, increase the zoom if necessary - meaning the default behaviour is to adjust the zoom so that\nthe content fills the viewport. You can suppress zoom increase by setting `doNotZoomIfVisible:true` on the\nparameters to this method. You can supply a `fill` parameter to tell the Surface how much of the viewport\nyou wish to fill with the zoomed content if 90% is not to your liking.",
            "itemtype": "method",
            "name": "zoomToVisible",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fill",
                            "description": "A decimal indicating how much of the viewport to fill with the zoomed content.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.90"
                        },
                        {
                            "name": "padding",
                            "description": "Optional padding to leave around all elements.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true, no action is taken if the content is currently all visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34658,
            "description": "Zooms the display so that all the tracked elements fit into 90% of the viewport. NOTE: this will zoom to include all\nnodes, even those that are not currently visible.  See #zoomToVisible if you wish to zoom only to visible nodes.\nThis method will also, by default, increase the zoom if necessary - meaning the default behaviour is to adjust the zoom so that\nthe content fills the viewport. You can suppress zoom increase by setting `doNotZoomIfVisible:true` on the\nparameters to this method. You can supply a `fill` parameter to tell the Surface how much of the viewport\nyou wish to fill with the zoomed content if 90% is not to your liking.",
            "itemtype": "method",
            "name": "zoomToFit",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fill",
                            "description": "A decimal indicating how much of the viewport to fill with the zoomed content.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.90"
                        },
                        {
                            "name": "padding",
                            "description": "Optional padding to leave around all elements.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotZoomIfVisible",
                            "description": "If true, no action is taken if the content is currently all visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "doNotFirePanEvent",
                            "description": "If true, a pan event will not be fired.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34677,
            "description": "Zooms the display so that all the tracked elements fit inside the viewport, but does not make any adjustments\nto zoom if all the elements are currently visible (it still does center the content though).",
            "itemtype": "method",
            "name": "zoomToFitIfNecessary",
            "see": [
                "zoomToFit"
            ],
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "padding",
                            "description": "Optional padding to leave around all elements.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": " 20"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional function to call on operation complete (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional function to call on operation step (centering may be animated).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "By default, the centering content step does not use animation. This is due to this method being used most often to initially setup a UI.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34690,
            "description": "Centers the given object in the viewport. You can pass in a DOM element or a Toolkit Node here.",
            "itemtype": "method",
            "name": "centerOn",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to center in the viewport - a Node, Element, or Node id.",
                    "type": "Node|Element|String"
                },
                {
                    "name": "params",
                    "description": "Optional extra parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontal",
                            "description": "Whether or not to center horizontally",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "vertical",
                            "description": "Whether or not to center vertically",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "doNotAnimate",
                            "description": "If true, animation will not be switched on for the operation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onComplete",
                            "description": "Optional on complete callback",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onStep",
                            "description": "Optional on animation step callback.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34706,
            "description": "Centers the given element in the viewport, horizontally only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34715,
            "description": "Centers the given element in the viewport, vertically only.",
            "itemtype": "method",
            "name": "centerOnHorizontally",
            "params": [
                {
                    "name": "element",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34724,
            "description": "Centers on the given element and then adjusts the zoom of the widget so that the short axis of the viewport\nis [1 / fillRatio] larger than its corresponding axis on the centered node. `fillRatio` is basically\na measure of how much context you want to see around the node on which you centered.",
            "itemtype": "method",
            "name": "centerOnAndZoom",
            "params": [
                {
                    "name": "obj",
                    "description": "Element, or element id, to center.",
                    "type": "Element|String"
                },
                {
                    "name": "fillRatio",
                    "description": "Proportional ratio of the corresponding node's edge to the viewport's short edge.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.6"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34737,
            "description": "Centers the content in the viewport.",
            "itemtype": "method",
            "name": "centerContent",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34743,
            "description": "Centers the content in the viewport horizontally.",
            "itemtype": "method",
            "name": "centerContentHorizontally",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34749,
            "description": "Centers the content in the viewport vertically.",
            "itemtype": "method",
            "name": "centerContentVertically",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34755,
            "description": "Gets the canvas location that corresponds to the center of the viewport.  Note that this may describe\na point outside of the content bounds.",
            "itemtype": "method",
            "name": "getViewportCenter",
            "return": {
                "description": "left,top location of the logical position on the canvas corresponding to the center of the viewport.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34763,
            "description": "Sets the location of the canvas such that the given point appears at the center of the viewport.",
            "itemtype": "method",
            "name": "setViewportCenter",
            "params": [
                {
                    "name": "xy",
                    "description": "left, top location of the point on the canvas to position in the center of the viewport.",
                    "type": "Number[]"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34770,
            "description": "Sets whether or not the content is clamped such that part of it is always visible.",
            "type": "{(function(*): void)|*}",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34776,
            "description": "Returns whether or not the widget clamps the movement of the canvas during pan/zoom/",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34782,
            "description": "Sets the size of some Node/Group.",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the Node/Group",
                    "type": "String"
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34803,
            "description": "Sets the default handle to use for state save/restore operations.",
            "itemtype": "method",
            "name": "setStateHandle",
            "params": [
                {
                    "name": "handle",
                    "description": "Handle to use.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34812,
            "description": "Gets the default handle to use for state save/restore operations.",
            "itemtype": "method",
            "name": "getStateHandle",
            "return": {
                "description": "Handle in use.",
                "type": "String"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34821,
            "description": "Sets the current lasso selection filter function.",
            "itemtype": "method",
            "name": "setLassoSelectionFilter",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes Nodes as argument and returns false if the Node should not be\nselected. Any other return value will cause the Node to be selected.",
                    "type": "Function"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34831,
            "description": "Returns the apparent [left,top] of the canvas inside the viewport - the coordinates, in real pixel\nvalues, of where the origin of the canvas appears to be. This apparent origin is not necessarily the\nsame as the [left,top] values of the canvas, because the transform origin and zoom values change\nthings.  This function can be used in conjunction with the content bounds by widgets such as the miniview,\nto calculate what is actually visible in the viewport at some point in time.",
            "itemtype": "method",
            "name": "getApparentCanvasLocation",
            "return": {
                "description": "[Number[]] [left,top] of the canvas, relative to the viewport's 0,0."
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34842,
            "description": "Sets the apparent canvas location - see the notes for getApparentCanvasLocation.",
            "itemtype": "method",
            "name": "setApparentCanvasLocation",
            "params": [
                {
                    "name": "left",
                    "description": "Value in pixels for left edge of canvas.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Value in pixels for top edge of canvas.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[left,top] of the actual origin set, after clamping.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34851,
            "description": "Gets the current bounds information.",
            "itemtype": "method",
            "name": "getBoundsInfo",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34857,
            "description": "Sets the current zoom, clamping it to the allowed range.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "Zoom value. If this is outside the allowed bounds it will be clamped.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Current zoom. This may or may not be the value you asked for - it might have been clamped to the current allowed zoom range.",
                "type": "Number"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34865,
            "description": "Sets the current zoom range. By default, this method checks if the current zoom is within\nthe new range, and if it is not then `setZoom` is called, which will cause the zoom to be clamped\nto an allowed value in the new range. You can disable this by passing `true` for `doNotClamp`.",
            "itemtype": "method",
            "name": "setZoomRange",
            "params": [
                {
                    "name": "zr",
                    "description": "New range, as an array consisting of [lower, upper] values. Lower must be less than upper.",
                    "type": "Number[]"
                },
                {
                    "name": "doNotClamp",
                    "description": "If true, will not check the current zoom to ensure it falls within the new range.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of [min, max] current zoom values.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34876,
            "description": "Gets the current zoom range.",
            "itemtype": "method",
            "name": "getZoomRange",
            "return": {
                "description": "Array of [min, max] current zoom values.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34883,
            "description": "Gets the current zoom.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "Current zoom value",
                "type": "Number"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34890,
            "description": "Nudges the zoom by the given amount. Zoom will be clamped to the current zoom range in effect and the\nvalue that was ultimately set is returned from this function. The value you pass in here is multiplied by\n100 to give a percentage value: 1 is 100%, for instance, 0.05 is 5%.",
            "itemtype": "method",
            "name": "nudgeZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "return": {
                "description": "The zoom that was set. Zoom will be clamped to the allowed range.",
                "type": "Number"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34901,
            "description": "Nudges the wheel zoom by the given amount. This function is intended for use by components that control\nzoom via the mouse wheel, and not for general usage. See `nudgeZoom` for a more general version of this.",
            "itemtype": "method",
            "name": "nudgeWheelZoom",
            "params": [
                {
                    "name": "delta",
                    "description": "Amount to change zoom by.",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "Original event that caused the nudge. May be null.",
                    "type": "Event",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34910,
            "description": "Decodes the page location from the given event, taking touch devices into account.",
            "itemtype": "method",
            "name": "pageLocation",
            "params": [
                {
                    "name": "e",
                    "description": "Event from which to decode location"
                }
            ],
            "return": {
                "description": "[left, top] of the given event.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34918,
            "description": "Gets the current [left,top] of the panned content.",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "[left,top], in pixels, of the panned content, where [0,0] is the origin of the viewport.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34925,
            "description": "Pans the content by dx and dy.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "Amount to pan in X direction",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "Amount to pan in Y direction",
                    "type": "Number"
                },
                {
                    "name": "animate ",
                    "description": "Whether or not to animate the pan.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": " false"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34934,
            "description": "Sets the position of the panned content's origin.",
            "itemtype": "method",
            "name": "setPan",
            "params": [
                {
                    "name": "left",
                    "description": "Position in pixels of the left edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "Position in pixels of the top edge of the panned content.",
                    "type": "Number"
                },
                {
                    "name": "animate ",
                    "description": "Whether or not to animate the pan.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": " false"
                },
                {
                    "name": "onComplete",
                    "description": "If `animate` is set to true, an optional callback for the end of the pan.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onStep",
                    "description": "If `animate` is set to true, an optional callback for each frame in the pan.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34945,
            "description": "Sets the pan and zoom for the Surface in one pass.",
            "params": [
                {
                    "name": "x",
                    "description": "Value for pan in x axis",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Value for pan in Y axis",
                    "type": "Number"
                },
                {
                    "name": "zoom",
                    "description": "Value fo zoom",
                    "type": "Number"
                },
                {
                    "name": "doNotAnimate",
                    "description": "If true, the changes will be made without the widget animating.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34957,
            "description": "Sets the filter used to determine whether or not a given event should begin a pan.",
            "itemtype": "method",
            "name": "setPanFilter",
            "params": [
                {
                    "name": "f",
                    "description": "Either a CSS selector to use as a whitelist on the event target, or a function that will be given the target of the current mouse event. You must return true from the function if you wish for a pan to begin.",
                    "type": "String|Function"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34972,
            "description": "Sets the filter used to determine whether or not a given wheel event should be responded to.",
            "itemtype": "method",
            "name": "setWheelFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "A CSS selector to use as a blacklist on the event target.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34990,
            "description": "Maps the given page location to an [x,y] location in the Surface's canvas.",
            "itemtype": "method",
            "name": "mapLocation",
            "params": [
                {
                    "name": "x",
                    "description": "X location to map",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location to map",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The mapped location, as {left:number, top:number}",
                "type": "Object"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 34999,
            "description": "Maps the page location of the given event to an [x,y] location in the Surface's canvas.",
            "itemtype": "method",
            "name": "mapEventLocation",
            "params": [
                {
                    "name": "e",
                    "description": "Event to map",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The mapped location, as {left:number, top:number}",
                "type": "Object"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35007,
            "description": "Finds all nodes whose centers are within a rectangle with `origin` as its center, and\na width and height of `radius / 2`.",
            "itemtype": "method",
            "name": "findNearbyNodes",
            "params": [
                {
                    "name": "x,y",
                    "description": "location for center of search",
                    "type": "Number[]",
                    "optional": true
                },
                {
                    "name": "Radius",
                    "description": "of search.",
                    "type": "Number"
                },
                {
                    "name": "mustBeInViewport",
                    "description": "If true, first check that the given origin is within the viewport.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "filter",
                    "description": "Optional filter function. This is passed the (id, node, boundingRect) of some element and should return true for elements that should be included in results.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect}, sorted in ascending order of distance of the center of the bounding rectangle from the given origin.",
                "type": "Object[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35019,
            "description": "Finds all Nodes or Groups that intersect to any extent the rectangle defined by the given origin\nand dimensions. This rectangle is taken to be in the coordinate space of the document, ie. a value\nof [0,0] for the origin means the document's top/left corner. A future version could take an optional\nthird argument specifying the element whose origin to use.",
            "itemtype": "method",
            "name": "findIntersectingNodes",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search.  IMPORTANT: This is relative to the page origin.",
                    "type": "Number[]"
                },
                {
                    "name": "dimensions",
                    "description": "Width and height of search area.",
                    "type": "Number[]"
                },
                {
                    "name": "enclosed",
                    "description": "If true, returns only nodes that are enclosed by the given search area. Otherwise returns nodes that both intersect and are enclosed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect} that either intersect or are enclosed by the search area.",
                "type": "Object[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35032,
            "description": "Finds all Groups that intersect to any extent the rectangle defined by the given origin\nand dimensions. This rectangle is taken to be in the coordinate space of the document, ie. a value\nof [0,0] for the origin means the document's top/left corner. A future version could take an optional\nthird argument specifying the element whose origin to use.",
            "itemtype": "method",
            "name": "findIntersectingGroups",
            "params": [
                {
                    "name": "origin",
                    "description": "[x,y] location for center of search.  IMPORTANT: This is relative to the page origin.",
                    "type": "Number[]"
                },
                {
                    "name": "dimensions",
                    "description": "Width and height of search area.",
                    "type": "Number[]"
                },
                {
                    "name": "enclosed",
                    "description": "If true, returns only nodes that are enclosed by the given search area. Otherwise returns nodes that both intersect and are enclosed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A list of objects containing {id:id, el:element, r:bounding rect} that either intersect or are enclosed by the search area.",
                "type": "Object[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35047,
            "description": "Returns whether or not the given point (relative to page origin) is within the viewport for the widget.",
            "itemtype": "method",
            "name": "isInViewport",
            "params": [
                {
                    "name": "x",
                    "description": "X location of point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location of point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the point is within the viewport, false if not.",
                "type": "Boolean"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35056,
            "description": "Gets the canvas location that corresponds to the center of the viewport.  Note that this may describe\na point outside of the content bounds.",
            "itemtype": "method",
            "name": "getViewportCenter",
            "return": {
                "description": "left,top location of the logical position on the canvas corresponding to the center of the viewport.",
                "type": "Number[]"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35064,
            "description": "Places (using `style.left` and `style.top`) the given element at the given x,y, which is taken to\nmean an [x,y] value on the canvas.  At zoom 1, with no panning, this will be the same as the given [x,y] value\nrelative to the viewport origin.  But once the canvas has been zoomed and panned we have to map\nto the altered coordinates. This function also takes into account the difference between the offset of the\nviewport in the page and the offset of the given element. It is assumed, just because of what this method\ndoes, that the given element will be positioned `absolute`, but this method does nothing to ensure that.\nNote that this method - and its relatives, `positionElementAtEventLocation` and `positionElementAtPageLocation` - are\nnot intended for use with elements being managed by the Surface. They are for use with external\nelements that you need to align with the contents of the Surface.",
            "itemtype": "method",
            "name": "positionElementAt",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35083,
            "description": "Places (using `style.left` and `style.top`) the given element at the page x,y corresponding to the given\nevent.  It is assumed, just because of what this method does, that the given element will be positioned\n`absolute`, but this method does nothing to ensure that. Note that this method - and its relatives,\n`positionElementAt` and `positionElementAtPageLocation` - are not intended for use with elements being\nmanaged by the Surface. They are for use with external elements that you need to align with the contents\nof the Surface.",
            "itemtype": "method",
            "name": "positionElementAtEventLocation",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "evt",
                    "description": "Event to position element at.",
                    "type": "Event"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35098,
            "description": "Places (using `style.left` and `style.top`) the given element at the given page x,y.  It is assumed, just\nbecause of what this method does, that the given element will be positioned `absolute`, but this method\ndoes nothing to ensure that. Note that this method - and its relatives, `positionElementAtEventLocation`\nand `positionElementAt` - are not intended for use with elements being managed by the Surface. They are\nfor use with external elements that you need to align with the contents of the Surface.",
            "itemtype": "method",
            "name": "positionElementAtPageLocation",
            "params": [
                {
                    "name": "el",
                    "description": "Element to position.",
                    "type": "Selector|Element|String"
                },
                {
                    "name": "x",
                    "description": "X location on canvas to move element's left edge to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y location on canvas to move element's top edge to.",
                    "type": "Number"
                },
                {
                    "name": "xShift",
                    "description": "Optional absolute number of pixels to shift the element by in the x axis after calculating its position relative to the canvas. Typically you'd use this to place something other than the top left corner of your element at the desired location.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "yShift",
                    "description": "Optional absolute number of pixels to shift the element by in the y axis after calculating its position relative to the canvas.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35113,
            "description": "Sets (or clears) the filter that will be called if the widget needs to know whether to respond to an event that would\nstart a pan. By default, the widget responds to down events on the viewport or the canvas, but not on child nodes. You\ncan supply a function that the widget will call in the event that the down event did not occur on the viewport or the canvas;\nreturning true from this function will cause the pan to begin.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filterFn",
                    "description": "Function to set as the filter; may be null if you wish to clear it. The function should return true if it wants to honour the down event on the given element.",
                    "type": "Function"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35123,
            "description": "Appends an element to the viewport so that it floats above the content that is being zoomed and panned.\nThe element will have `position:absolute` set on it. You can float any element you like, but note that the\nresponsibility for setting an appropriate z index is yours.",
            "itemtype": "method",
            "name": "floatElement",
            "params": [
                {
                    "name": "el",
                    "description": "Element to float.",
                    "type": "Element"
                },
                {
                    "name": "pos",
                    "description": "Array of [x,y] positions.",
                    "type": "Number[]"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35133,
            "description": "Appends an element to the content such that it is zoomed with everything else, but constrains pan\nin one or both axes so that the element remains fixed with respect to the viewport origin.",
            "itemtype": "method",
            "name": "fixElement",
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element to append.",
                    "type": "Element"
                },
                {
                    "name": "constraints",
                    "description": "Flags to indicate optional constraint to each axis.",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "[left,top] location of the element's origin.",
                    "type": "Number[]"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35195,
            "description": "Traces the given overlay along either a given path, or the shortest path\nfrom a specified `source` to a specified `target` (if such a path exists).\nIf there is no path nothing happens (except for a debug trace, if you have debugging enabled on\nthe Toolkit instance via `toolkit.setDebugEnabled(true)`)",
            "params": [
                {
                    "name": "params",
                    "description": "Options for the trace.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "path",
                            "description": "Path to trace.",
                            "type": "Path",
                            "optional": true
                        },
                        {
                            "name": "source",
                            "description": "Source of traversal. May be a Node or Port, or a DOM element or element id. Supply this if you do not supply `path`.",
                            "type": "String|Element|Node|Port",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target of traversal. May be a Node or Port, or a DOM element or element id. Supply this if you do not supply `path`.",
                            "type": "String|Element|Node|Port",
                            "optional": true
                        },
                        {
                            "name": "overlay",
                            "description": "This is in the format accepted by the Community edition of jsPlumb.",
                            "type": "String|Object"
                        },
                        {
                            "name": "options",
                            "description": "Options for animation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "dwell",
                                    "description": "How long, in milliseconds, to dwell on each node as the overlay traverses the path.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "250"
                                },
                                {
                                    "name": "speed",
                                    "description": "How many pixels per second to travel. *Note*: this is in seconds, not milliseconds.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "100"
                                },
                                {
                                    "name": "rate",
                                    "description": "Frame rate, in milliseconds.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "30"
                                }
                            ]
                        },
                        {
                            "name": "paused",
                            "description": "If true, the animation starts in a paused state.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " false"
                        },
                        {
                            "name": "listener",
                            "description": "If set, lifecycle events will be passed to this function. The function is given one argument, which is the\ncurrent state - \"playing\", \"paused\", \"stopped\" or \"finished\". \"stopped\" is for the cancelled state. \"finished\" means the animation terminated normally.",
                            "type": "Function",
                            "optional": true,
                            "optdefault": " null"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A JS object containing at least a `pathExisted` boolean. If the path exists then there are also`cancel`, `pause` and `play` methods, as well as a `bind`\nmethod to bind a listener to, and a `state` flag.",
                "type": "TracePathHarness"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35340,
            "description": "Returns a map of element ids -> positions.",
            "return": {
                "description": "Map of { id->[x,y]} positions.",
                "type": "Object"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35475,
            "description": "Sets the current mode - \"pan\", \"select\" or \"disabled\", then fires an event notifying any listeners subscribed to the `modeChanged` event.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Mode to set. Must be one of Surface.PAN, Surface.SELECT or Surface.DISABLED.",
                    "type": "String"
                },
                {
                    "name": "doNotClearSelection",
                    "description": "By default, when switching _into_ Select mode, the current selection is cleared. Setting this to false prevents the selection from being cleared.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35512,
            "description": "Selects a set of edges. If you supply a DOM element for any of the arguments here, the underlying graph object - a Node or a Port - will be\ndetermined, and the edges for that object will be retrieved.  Note that for a Port this method does the same thing as\n`selectAllEdges`, but for a Node, which may have Ports registered on it, this method will retrieve only the Edges directly\nregistered on the Node itself.  You may need to use `selectAllEdges` if you want everything from some Node.",
            "itemtype": "method",
            "name": "selectEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Selection parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "element",
                            "description": "Source or target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35527,
            "description": "Selects a set of Edges.  Parameters are the same as for selectEdges; the difference here is that when you're working with\nNodes, this method will return all of the Node's Edges as well as those of all the Ports registered on the Node.",
            "itemtype": "method",
            "name": "selectAllEdges",
            "params": [
                {
                    "name": "params",
                    "description": "Selection parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "source",
                            "description": "Source node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "Target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        },
                        {
                            "name": "element",
                            "description": "Source or target node, as a Node, a DOM element, a selector, or a String (including support for wildcard '*')",
                            "type": "String|Element|Node|Selector",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35541,
            "description": "Repaints the element for the given object.",
            "itemtype": "method",
            "name": "repaint",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to repaint, including any associated connections. This can be\na Toolkit Node or Port, a String (representing a Node or Node.Port id) or a DOM element.",
                    "type": "String|Port|Node|Element"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35559,
            "description": "Repaints every element in the UI.",
            "itemtype": "method",
            "name": "repaintEverything",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35565,
            "description": "Sets whether or not elements will be made draggable. This does not disable dragging on elements\nthat are already draggable.",
            "itemtype": "method",
            "name": "setElementsDraggable",
            "params": [
                {
                    "name": "d",
                    "description": "If false, elements will not be made draggable. If null or true, they will.",
                    "type": "Boolean"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35576,
            "description": "Creates a miniview that is associated with this Surface.",
            "itemtype": "method",
            "name": "createMiniview",
            "params": [
                {
                    "name": "params",
                    "description": "Miniview parameters. See Minview docs.",
                    "type": "Object"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35632,
            "description": "Gets the current Miniview, if there is one. There may not be.",
            "itemtype": "method",
            "name": "getMiniview",
            "return": {
                "description": "Current Miniview, null if no Miniview is registered.",
                "type": "Miniview"
            },
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35664,
            "description": "Sets whether or not a given Node or Port is currently enabled as a connection target in the UI.",
            "itemtype": "method",
            "name": "setTargetEnabled",
            "params": [
                {
                    "name": "obj",
                    "description": "Node/Port or Node/Port ID, or a DOM element to disable as a connection target.",
                    "type": "String|Node|Port|Element"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35670,
            "description": "Sets whether or not a given Node or Port is currently enabled as a connection source in the UI.",
            "itemtype": "method",
            "name": "setSourceEnabled",
            "params": [
                {
                    "name": "obj",
                    "description": "Node/Port or Node/Port ID, or a DOM element to disable as a connection source.",
                    "type": "String|Node|Port|Element"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35676,
            "description": "Sets whether or not a given Node or Port is currently enabled as a connection target and source in the UI.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "obj",
                    "description": "Node/Port or Node/Port ID, or a DOM element to disable as both a connection target and source.",
                    "type": "String|Node|Port|Element"
                },
                {
                    "name": "state",
                    "description": "true if enabled, false if not.",
                    "type": "Boolean"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35687,
            "description": "Private method called when the superclass wishes to destroy the component. We want to remove everything we added to the container,\nunbind any event bindings, and remove all classes we added too.",
            "access": "private",
            "tagname": "",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35712,
            "description": "private method, optional. called by superclass to find the element that corresponds to the area in a group element into which the child\nnodes are drawn. if this is not defined then the superclass will just use the element group the groupMap it maintains.",
            "access": "private",
            "tagname": "",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35725,
            "description": "Writes the current location of each node in the UI to local storage (using either a cookie or html5 storage,\ndepending on browser capabilities). You pass this function a 'handle' argument, which is used to restore the state\nat some stage in the future.",
            "itemtype": "method",
            "name": "State.save",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to save the state as, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "preprocessor",
                    "description": "Optional preprocessor which is given the serialized state, and a callback function, before saving to localStorage. Useful if you wish to compress the data, for instance.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35747,
            "description": "Serializes the UI state to a String.",
            "itemtype": "method",
            "name": "State.serialize",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35767,
            "description": "Restores the UI state to the state it was in when it was saved with the given handle. If the handle does not\nexist, nothing happens. It is possible a future incarnation of this could support animating a UI back to some state.",
            "itemtype": "method",
            "name": "State.restore",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to restore the state from, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "preprocessor",
                    "description": "Optional preprocessor which is given the serialized state before saving to localStorage. Useful if you wish to compress the data, for instance.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35790,
            "description": "Restores the UI state to the serialized state given.",
            "itemtype": "method",
            "name": "State.deserialize",
            "params": [
                {
                    "name": "value",
                    "description": "Serialized state.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35813,
            "description": "Clears the state that was stored against the given handle.",
            "itemtype": "method",
            "name": "State.clear",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35823,
            "description": "Removes all saved UI state information.",
            "itemtype": "method",
            "name": "State.clearAll",
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35832,
            "description": "Saves the current state of the UI, either to local storage or a cookie, depending on the browser's capabilities.",
            "itemtype": "method",
            "name": "saveState",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to save the state as, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35844,
            "description": "Restores the current state of the UI, either from local storage or a cookie, depending on the browser's capabilities.",
            "itemtype": "method",
            "name": "restoreState",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to restore the state from, If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 35855,
            "description": "Clears the state stored by the given handle.",
            "itemtype": "method",
            "name": "clearState",
            "params": [
                {
                    "name": "handle",
                    "description": "The handle to restore the state from. If this is not supplied, and `stateHandle` was supplied as a constructor parameter, that is used instead.",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36186,
            "description": "Sets whether or not the miniview is visible. Strictly speaking you don't need to use this method;\nyou can just control the miniview's container via your own CSS or whatever. But the Surface uses this\noccasionally, and there is also the concept of having the miniview initially invisible until the\nrelated surface contains some data.",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36198,
            "description": "Gets the current [left,top] of the panned content.",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "[left,top], in pixels, of the panned content, where [0,0] is the origin of the viewport.",
                "type": "Number[]"
            },
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36234,
            "description": "Forces a repaint of every element, or one specified element.",
            "itemtype": "method",
            "name": "invalidate",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36251,
            "description": "Sets whether or not the miniview is currently suspended, ie. will not respond\nto changes.",
            "itemtype": "method",
            "name": "setSuspended",
            "params": [
                {
                    "name": "s",
                    "description": "Suspended or not.",
                    "type": "Boolean"
                },
                {
                    "name": "updateAfterwards",
                    "description": "If true, will update the state after changing the suspended state. Only makes sense to use this if you are unsuspending the widget.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36263,
            "description": "Instructs the miniview to update its state.",
            "itemtype": "method",
            "name": "update",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36395,
            "description": "Update the host layout for this miniview",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36458,
            "description": "Destroy the miniview - remove classes attached to the container, remove DOM elements, unbind event listeners.",
            "access": "private",
            "tagname": "",
            "class": "jsPlumbToolkit.Renderers.Miniview"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36675,
            "description": "Returns whether or not the lasso is active.",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "true if active, false otherwise.",
                "type": "Boolean"
            },
            "class": "jsPlumbToolkit.Widgets.Lasso"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 36684,
            "description": "Sets whether or not the lasso responds to mouse events.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "e",
                    "description": "Enabled state.",
                    "type": "Boolean"
                }
            ],
            "class": "jsPlumbToolkit.Widgets.Lasso"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37171,
            "description": "Initialize all the dialogs found on the page.",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "dialogs] Optional map of dialog IDs to [content, title, isCancelable",
                            "description": "arrays. Use this\ninstead of providing a selector if you wish to supply dialog information via JS and not as templates in the HTML.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "selector",
                            "description": "Selector identifying dialog elements. If not provided, the value '.jtk-dialog' is used by default.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.jtk-dialog'"
                        },
                        {
                            "name": "globals",
                            "description": "Optional object of global callbacks, keyed by event id.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "Optional object of button labels. See documentation.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Dialogs"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37221,
            "description": "Show the dialog with the given id, optionally rendering it with some provided data.",
            "itemtype": "method",
            "name": "show",
            "static": 1,
            "params": [
                {
                    "name": "params",
                    "description": "Method parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "ID of the dialog to show",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Optional data to render the dialog template with.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "description": "Title for the dialog. If not supplied, the dialog's title will come from the `title` attribute of the associated template, if any. Otherwise it will be blank.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onOpen",
                            "description": "Optional function to run once the dialog has opened.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onOK",
                            "description": "Optional function to run when the user presses OK.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onCancel",
                            "description": "Optional function to run when the user presses cancel.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onClose",
                            "description": "Optional function to call when the dialog is closed, regardless of how it was closed.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onMaybeClose",
                            "description": "Optional function that will be called prior to `onOK` being called, with the same data that will be passed to `onOK`. Returning false from this function causes the dilaog to remain open.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "jsPlumbToolkit.Dialogs"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37237,
            "description": "Hide the current dialog as if the cancel button was pressed.",
            "itemtype": "method",
            "name": "hide",
            "static": 1,
            "class": "jsPlumbToolkit.Dialogs"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37244,
            "description": "Clears the given set",
            "class": "jsPlumbToolkit.Dialogs"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37249,
            "description": "applies the given data object to the given element, using `jtk-att` as the match attributes",
            "class": "jsPlumbToolkit.Dialogs"
        },
        {
            "file": "dist/js/jsplumbtoolkit.js",
            "line": 37254,
            "description": "extracts a data object from the given element, using `jtk-att` as the match attributes",
            "class": "jsPlumbToolkit.Dialogs"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-drop.js:254"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:504"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:562"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:900"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1255"
        },
        {
            "message": "unknown tag: override",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1536"
        },
        {
            "message": "unknown tag: override",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1562"
        },
        {
            "message": "unknown tag: override",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1575"
        },
        {
            "message": "unknown tag: override",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1588"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:61"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:74"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:92"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:279"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:422"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:431"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:439"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:449"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:476"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:485"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:494"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:543"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:586"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:607"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:625"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:633"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:642"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:651"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-testing.js:704"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:309"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:414"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:466"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:484"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:591"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:618"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:630"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1306"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1306"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1306"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1324"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1324"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1324"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1335"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1335"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1335"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1348"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1348"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1348"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1369"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1369"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1369"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1388"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1388"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1388"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1409"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1409"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1409"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1427"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1427"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1427"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:1444"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:1444"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:1444"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:1561"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:2093"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:2365"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:2500"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:2543"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:2543"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:2543"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:2563"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/js/jsplumbtoolkit.js:2563"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:2563"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:2795"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:2816"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:3120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:3178"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:3195"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:3210"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:3345"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:5080"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:5404"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:5442"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:10615"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:10973"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:10986"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:11004"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:11159"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:11224"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:11242"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:16002"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:16034"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/js/jsplumbtoolkit.js:16111"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:19963"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:19978"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:19991"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:20004"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:20015"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:20025"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:20035"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:20049"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:20062"
        },
        {
            "message": "unknown tag: metho",
            "line": " dist/js/jsplumbtoolkit.js:21421"
        },
        {
            "message": "unknown tag: abstract",
            "line": " dist/js/jsplumbtoolkit.js:25120"
        },
        {
            "message": "unknown tag: abstract",
            "line": " dist/js/jsplumbtoolkit.js:25787"
        },
        {
            "message": "unknown tag: abstract",
            "line": " dist/js/jsplumbtoolkit.js:25796"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:26203"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:26203"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/js/jsplumbtoolkit.js:27098"
        },
        {
            "message": "unknown tag: desc",
            "line": " dist/js/jsplumbtoolkit.js:27098"
        },
        {
            "message": "unknown tag: constructorg",
            "line": " dist/js/jsplumbtoolkit.js:35895"
        },
        {
            "message": "Missing item type\nThis is just a collection of utility methods used by the jsPlumb Toolkit demos to get random datasets for\ndemo purposes.",
            "line": " dist/js/demo-support.js:1"
        },
        {
            "message": "Missing item type\nsets whether or not dragging is currently enabled.",
            "line": " dist/js/jsplumbtoolkit-drop.js:212"
        },
        {
            "message": "Missing item type\nfind all the connectors in the canvas, computing their position in page coords (taking into account the viewport\nposition of the surface and its current zoom). We return [ connection, connector, bounding rect ] for each connector.",
            "line": " dist/js/jsplumbtoolkit-drop.js:254"
        },
        {
            "message": "Missing item type\non detach event, deactivate the editor.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:81"
        },
        {
            "message": "Missing item type\nRepaints the current connection, passing some arguments, optionally. These are retrieved inside `refresh`,\nand are ultimately handed off to the subclass's `repaint` method. Subclasses should call this on things like handle\ndragging, as the existence (and nature of ) args can subsequently be used by their `repaint` method to decide whether or not\nto redraw all the handles (such as you would in the event of an external paint event), or just to reposition the existing\nones. During a drag, of course, blowing away the current handle would be bad.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:274"
        },
        {
            "message": "Missing item type\nFires a connection edit event, passing the current connection, and the current\nconnection's exported geometry.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:286"
        },
        {
            "message": "Missing item type\nRedraw anchor placeholders and editor handles.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:296"
        },
        {
            "message": "Missing item type\nDraws, or repositions if they exist already, the anchor placeholders for the current connection.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:308"
        },
        {
            "message": "Missing item type\nRemoves anchor placeholders.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:364"
        },
        {
            "message": "Missing item type\nActivate the editor, with the given Connection. First we\ncall `deactivate`, so there's only ever one edit happening at a time.\nThen we set the current connection, and override its paint method.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:406"
        },
        {
            "message": "Missing item type\nDeactivates the editor, removing all editor handles and anchor placeholders etc.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:459"
        },
        {
            "message": "Missing item type\nrelocate the given continuous anchor according to the given proximity of `pos` to each of the anchor's supported faces. the face is changed\non the anchor itself (and the anchor is locked), and in this case we simply return the current value of `pos`, meaning the user sees the drag proxy\nunder the mouse cursor, which is probably not where the anchor is now positioned, but it makes for a better UX. on drag stop, for all anchor types,\nthe anchor proxy is relocated to the current value.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:504"
        },
        {
            "message": "Missing item type\nrelocate the given dynamic anchor according to the given proximity of `pos` to each of the anchor's supported locations. the face is changed\non the anchor itself (and the anchor is locked), and in this case we simply return the current value of `pos`, meaning the user sees the drag proxy\nunder the mouse cursor, which is probably not where the anchor is now positioned, but it makes for a better UX. on drag stop, for all anchor types,\nthe anchor proxy is relocated to the current value.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:562"
        },
        {
            "message": "Missing item type\nClears edits for the given Edge, Connection, or Edge ID.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:762"
        },
        {
            "message": "Missing item type\nfor the given set of segments, use the absolute coordinates to figure out the origin of the\nconnector, then translate to coords relative to this origin. also populate the orientation value.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:823"
        },
        {
            "message": "Missing item type\nFlowchart connector, editable.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:865"
        },
        {
            "message": "Missing item type\nexport the current geometry in a format that _importGeometry can handle. this connector exports\nthe source/target points as `source` and `target` respectively, as well as an array labelled\n`segments`, which is the list of corner points.  There are, therefore, n+1 segments in a geometry\nwhose segments array contains n entries.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:900"
        },
        {
            "message": "Missing item type\nFor a given segment, find it - and its index - inside our current list.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1255"
        },
        {
            "message": "Missing item type\nAttaches a delegated drag listener for segment handles. When dragged,\na handle is constrained to move in the perpendicular axis to that of the segment,\nand each time it moves the underlying editable flowchart connector is informed.\nIt is the connector itself that decides what happens to the path; it returns the\nnew full list of segments from the `setSegmentPosition` method. This drag handler\nthen stores the new geometry for the segment being dragged, and calls\n`repaintConnection`, which is a method on the superclass. We pass in the current\nsegment to this method, which itself calls `repaint` on the Connection, passing in\nany parameters we gave it.\n\nThis method - or at least the behaviour of this method - is\nspecific to the flowchart editor. the bezier editor also\nsupport handle dragging, but it does different stuff.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1475"
        },
        {
            "message": "Missing item type\nRepaint the editor. This may or may not have come\nabout as the result of a call by this class to `repaintConnection` - if\n`internalEditorRepaint` and/or `args` is set, then that is the case.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1536"
        },
        {
            "message": "Missing item type\nclear all handles, except, optionally, the one provided.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1562"
        },
        {
            "message": "Missing item type\nActivates the editor, on the given connection.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1575"
        },
        {
            "message": "Missing item type\nupdates the current origin of the connector's SVG element (the location of its to left corner wrt\nthe origin of the jsplumb instance's container). Then updates the offset of the source and target points\nfrom the origin of the SVG element. Finally, extracts the control point information from the connection,\neither as geometry (if previously edited or set) or from the computed control points.",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1588"
        },
        {
            "message": "Missing item type\nTrims any segments that are now of length zero, then\nconcatenates subsequent segments that are in the same axis.\nthen instructs the superclass to repaint (which will\nresult in this class redrawing all its handles)",
            "line": " dist/js/jsplumbtoolkit-editable-connectors.js:1625"
        },
        {
            "message": "Missing item type\nA collection of utilities that are helpful when printing with the Toolkit.",
            "line": " dist/js/jsplumbtoolkit-print.js:3"
        },
        {
            "message": "Missing item type\nTests that the two values are no further than `amount` apart.",
            "line": " dist/js/jsplumbtoolkit-testing.js:61"
        },
        {
            "message": "Missing item type\nMake an event for the given element. Events use page coordinates so we just use the getBoundingClientRect()\nmethod on the given element. The event is positioned on the center of the given element.",
            "line": " dist/js/jsplumbtoolkit-testing.js:74"
        },
        {
            "message": "Missing item type\nTranspose the given event by dx + dy",
            "line": " dist/js/jsplumbtoolkit-testing.js:92"
        },
        {
            "message": "Missing item type\nDrag the given element to the given x,y on the canvas. We adjust for the container's page position, but the\nx,y passed in here is the position on the canvas. This is important to remember.",
            "line": " dist/js/jsplumbtoolkit-testing.js:231"
        },
        {
            "message": "Missing item type\nDrag the element by the given dx,dy.",
            "line": " dist/js/jsplumbtoolkit-testing.js:256"
        },
        {
            "message": "Missing item type\nSynthesize an event",
            "line": " dist/js/jsplumbtoolkit-testing.js:279"
        },
        {
            "message": "Missing item type\nRandomly drag a node around. Can be useful to ensure the model is being updated, or you're getting\ncallbacks you expect, etc. We use this internally when we just want a node to move and we don't care where\nit moves to.",
            "line": " dist/js/jsplumbtoolkit-testing.js:379"
        },
        {
            "message": "Missing item type\nRandomly drag a DOM element around",
            "line": " dist/js/jsplumbtoolkit-testing.js:389"
        },
        {
            "message": "Missing item type\nConnect, using the mouse, `obj1` to `obj2`. This will throw an Error if either or both of the arguments cannot be\nresolved. Any interceptors you have setup on the underlying Toolkit\ninstance will be invoked - this functions just as if the user had used the mouse to drag a connection from\none object to the other.",
            "line": " dist/js/jsplumbtoolkit-testing.js:397"
        },
        {
            "message": "Missing item type\nShortcut to the underlying `load` method of the toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:422"
        },
        {
            "message": "Missing item type\nShortcut to the underlying `clear` method of the toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:431"
        },
        {
            "message": "Missing item type\nFor the given argument, find and return the corresponding DOM element.",
            "line": " dist/js/jsplumbtoolkit-testing.js:439"
        },
        {
            "message": "Missing item type\nFor the given argument, find and return the underlying Connection used to render it.",
            "line": " dist/js/jsplumbtoolkit-testing.js:449"
        },
        {
            "message": "Missing item type\nDrag the given node into the given group.",
            "line": " dist/js/jsplumbtoolkit-testing.js:458"
        },
        {
            "message": "Missing item type\nGets a Group from the underlying Toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:476"
        },
        {
            "message": "Missing item type\nGets a Node from the underlying Toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:485"
        },
        {
            "message": "Missing item type\nFind the corresponding Toolkit object for the given input.",
            "line": " dist/js/jsplumbtoolkit-testing.js:494"
        },
        {
            "message": "Missing item type\nDrag the given Node to the given [x,y], which are canvas coordinates.",
            "line": " dist/js/jsplumbtoolkit-testing.js:503"
        },
        {
            "message": "Missing item type\nDrag the given Node by the given x/y amounts.",
            "line": " dist/js/jsplumbtoolkit-testing.js:518"
        },
        {
            "message": "Missing item type\nDrag the given DOM element by the given x/y amounts.",
            "line": " dist/js/jsplumbtoolkit-testing.js:533"
        },
        {
            "message": "Missing item type\nConnect the given source and target via a call on the Toolkit, ie. without using the mouse.",
            "line": " dist/js/jsplumbtoolkit-testing.js:543"
        },
        {
            "message": "Missing item type\nDrag the given Group to the given [x,y], which are canvas coordinates.",
            "line": " dist/js/jsplumbtoolkit-testing.js:560"
        },
        {
            "message": "Missing item type\nTrigger the event with the given name on the given object. By default the event will occur in the middle of the DOM element\nrepresenting the object.",
            "line": " dist/js/jsplumbtoolkit-testing.js:568"
        },
        {
            "message": "Missing item type\nSynthesize an event for the given object.",
            "line": " dist/js/jsplumbtoolkit-testing.js:586"
        },
        {
            "message": "Missing item type\nGets an Edge.",
            "line": " dist/js/jsplumbtoolkit-testing.js:607"
        },
        {
            "message": "Missing item type\nUpdates an Edge.",
            "line": " dist/js/jsplumbtoolkit-testing.js:616"
        },
        {
            "message": "Missing item type\nGets all edges in the underlying Toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:625"
        },
        {
            "message": "Missing item type\nGets the Endpoint that was rendered for some port.",
            "line": " dist/js/jsplumbtoolkit-testing.js:633"
        },
        {
            "message": "Missing item type\nAdd a Node to the Toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:642"
        },
        {
            "message": "Missing item type\nUpdate a Node in to the Toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:651"
        },
        {
            "message": "Missing item type\nClicks on the node with the given ID.",
            "line": " dist/js/jsplumbtoolkit-testing.js:661"
        },
        {
            "message": "Missing item type\nClicks on an element inside the node with the given ID.",
            "line": " dist/js/jsplumbtoolkit-testing.js:669"
        },
        {
            "message": "Missing item type\nClicks on the given edge",
            "line": " dist/js/jsplumbtoolkit-testing.js:678"
        },
        {
            "message": "Missing item type\nClicks on the overlay with the given ID, on the given Edge.",
            "line": " dist/js/jsplumbtoolkit-testing.js:686"
        },
        {
            "message": "Missing item type\nClicks on the port with the given ID on the node with given node id.",
            "line": " dist/js/jsplumbtoolkit-testing.js:695"
        },
        {
            "message": "Missing item type\nReturns the count of Edges in the underlying Toolkit.",
            "line": " dist/js/jsplumbtoolkit-testing.js:704"
        },
        {
            "message": "Missing item type\nCreate a new Undo manager and attach to our Surface.",
            "line": " dist/js/jsplumbtoolkit-testing.js:712"
        },
        {
            "message": "Missing item type\nDrag the given element onto the canvas, optionally at a specific x,y. Use this when you want to test drag/drop\nfrom some palette.",
            "line": " dist/js/jsplumbtoolkit-testing.js:722"
        },
        {
            "message": "Missing item type\nSuperclass for edge add/remove.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:14"
        },
        {
            "message": "Missing item type\nOne update action for all types",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:191"
        },
        {
            "message": "Missing item type\nCompounds a set of actions into one. An example of this is a node remove, in which all of its edges and ports are also\nremoved.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:261"
        },
        {
            "message": "Missing item type\nPerhaps compound the given remove action with any prior edge remove actions whose source or target is the focus of the terminus\nremove. we search down the undo stack looking for EdgeRemoveActions that are for edges connected to the terminus that is being removed,\nadding them to a list of candidates until we fail to match. If this list of candidates is of non zero length, we compound them all\ninto one action, prepending (this is important - the terminus has to exist before the edges on undo) the terminus remove action. we then\nsplice the undo stack to remove all the candidates we found, and return a compound action, which is added to the top of the undo stack.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:309"
        },
        {
            "message": "Missing item type\nAdd a terminus remove action - node or group. pulled into a common method since they both do the same thing, but also\nterminus remove actions are a candidate for \"compounding\" with any prior edge remove events.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:348"
        },
        {
            "message": "Missing item type\nBind listeners to the events in the Toolkit we are interested in.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:365"
        },
        {
            "message": "Missing item type\nFire the on change event, if there's a listener registered.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:440"
        },
        {
            "message": "Missing item type\nadd a command to the undo stack, clearing the redo stack.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:447"
        },
        {
            "message": "Missing item type\nNotification that some edge has been replaced with a copy. This occurs when an edge removed is undone or an edge add is\nredone. we need to update all references to the previous edge with this new one, as the toolkit no longer knows about\nthe old edge. This is not a method that should be called from outside of the undo manager.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:467"
        },
        {
            "message": "Missing item type\nExecute undo on the last command in the undo stack, if it isn't empty.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:488"
        },
        {
            "message": "Missing item type\nRe-execute the last command in the redo stack, if it isn't empty.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:501"
        },
        {
            "message": "Missing item type\nClears both stacks and fires an update event.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:514"
        },
        {
            "message": "Missing item type\nRun a series of operations as a single transaction in the undo stack, meaning that they will all be undone/redone\nat once.",
            "line": " dist/js/jsplumbtoolkit-undo-redo.js:523"
        },
        {
            "message": "Missing item type\njsBezier\n\nCopyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n\nlicensed under the MIT license.\n\na set of Bezier curve functions that deal with Beziers, used by jsPlumb, and perhaps useful for other people.  These functions work with Bezier\ncurves of arbitrary degree.\n\n- functions are all in the 'jsBezier' namespace.\n\n- all input points should be in the format {x:.., y:..}. all output points are in this format too.\n\n- all input curves should be in the format [ {x:.., y:..}, {x:.., y:..}, {x:.., y:..}, {x:.., y:..} ]\n\n- 'location' as used as an input here refers to a decimal in the range 0-1 inclusive, which indicates a point some proportion along the length\nof the curve.  location as output has the same format and meaning.\n\n\nFunction List:\n--------------\n\ndistanceFromCurve(point, curve)\n\n\tCalculates the distance that the given point lies from the given Bezier.  Note that it is computed relative to the center of the Bezier,\nso if you have stroked the curve with a wide pen you may wish to take that into account!  The distance returned is relative to the values\nof the curve and the point - it will most likely be pixels.\n\ngradientAtPoint(curve, location)\n\n\tCalculates the gradient to the curve at the given location, as a decimal between 0 and 1 inclusive.\n\ngradientAtPointAlongCurveFrom (curve, location)\n\n\tCalculates the gradient at the point on the given curve that is 'distance' units from location.\n\nnearestPointOnCurve(point, curve)\n\n\tCalculates the nearest point to the given point on the given curve.  The return value of this is a JS object literal, containing both the\npoint's coordinates and also the 'location' of the point (see above), for example:  { point:{x:551,y:150}, location:0.263365 }.\n\npointOnCurve(curve, location)\n\n\tCalculates the coordinates of the point on the given Bezier curve at the given location.\n\npointAlongCurveFrom(curve, location, distance)\n\n\tCalculates the coordinates of the point on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\nspace as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n\nlocationAlongCurveFrom(curve, location, distance)\n\n\tCalculates the location on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\nspace as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n\nperpendicularToCurveAt(curve, location, length, distance)\n\n\tCalculates the perpendicular to the given curve at the given location.  length is the length of the line you wish for (it will be centered\non the point at 'location'). distance is optional, and allows you to specify a point along the path from the given location as the center of\nthe perpendicular returned.  The return value of this is an array of two points: [ {x:...,y:...}, {x:...,y:...} ].",
            "line": " dist/js/jsplumbtoolkit.js:1"
        },
        {
            "message": "Missing item type\nCalculates the distance that the point lies from the curve.",
            "line": " dist/js/jsplumbtoolkit.js:84"
        },
        {
            "message": "Missing item type\nfinds the nearest point on the curve to the given point.",
            "line": " dist/js/jsplumbtoolkit.js:117"
        },
        {
            "message": "Missing item type\ncounts how many roots there are.",
            "line": " dist/js/jsplumbtoolkit.js:156"
        },
        {
            "message": "Missing item type\ncalculates a point on the curve, for a Bezier of arbitrary order.",
            "line": " dist/js/jsplumbtoolkit.js:291"
        },
        {
            "message": "Missing item type\nfinds the point that is 'distance' along the path from 'location'.  this method returns both the x,y location of the point and also\nits 'location' (proportion of travel along the path); the method below - _pointAlongPathFrom - calls this method and just returns the\npoint.",
            "line": " dist/js/jsplumbtoolkit.js:315"
        },
        {
            "message": "Missing item type\nfinds the point that is 'distance' along the path from 'location'.",
            "line": " dist/js/jsplumbtoolkit.js:362"
        },
        {
            "message": "Missing item type\nfinds the location that is 'distance' along the path from 'location'.",
            "line": " dist/js/jsplumbtoolkit.js:369"
        },
        {
            "message": "Missing item type\nreturns the gradient of the curve at the given location, which is a decimal between 0 and 1 inclusive.\n\nthanks // http://bimixual.org/AnimationLibrary/beziertangents.html",
            "line": " dist/js/jsplumbtoolkit.js:376"
        },
        {
            "message": "Missing item type\nreturns the gradient of the curve at the point which is 'distance' from the given location.\nif this point is greater than location 1, the gradient at location 1 is returned.\nif this point is less than location 0, the gradient at location 0 is returned.",
            "line": " dist/js/jsplumbtoolkit.js:388"
        },
        {
            "message": "Missing item type\ncalculates a line that is 'length' pixels long, perpendicular to, and centered on, the path at 'distance' pixels from the given location.\nif distance is not supplied, the perpendicular for the given location is computed (ie. we set distance to zero).",
            "line": " dist/js/jsplumbtoolkit.js:400"
        },
        {
            "message": "Missing item type\nCalculates all intersections of the given line with the given curve.",
            "line": " dist/js/jsplumbtoolkit.js:414"
        },
        {
            "message": "Missing item type\nCalculates all intersections of the given box with the given curve.",
            "line": " dist/js/jsplumbtoolkit.js:466"
        },
        {
            "message": "Missing item type\nCalculates all intersections of the given bounding box with the given curve.",
            "line": " dist/js/jsplumbtoolkit.js:484"
        },
        {
            "message": "Missing item type\nCreates a Touch object.",
            "line": " dist/js/jsplumbtoolkit.js:591"
        },
        {
            "message": "Missing item type\nCreate a synthetic touch list from the given list of Touch objects.",
            "line": " dist/js/jsplumbtoolkit.js:618"
        },
        {
            "message": "Missing item type\nCreate a Touch object and then insert it into a synthetic touch list, returning the list.s",
            "line": " dist/js/jsplumbtoolkit.js:630"
        },
        {
            "message": "Missing item type\nBiltong v0.4.0\n\nVarious geometry functions written as part of jsPlumb and perhaps useful for others.\n\nCopyright (c) 2017 jsPlumb\nhttps://jsplumbtoolkit.com\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.",
            "line": " dist/js/jsplumbtoolkit.js:1258"
        },
        {
            "message": "Missing item type\nFinds all elements matching the given selector, for the given parent. In order to support \"scoped root\" selectors,\nie. things like \"> .someClass\", that is .someClass elements that are direct children of `parentElement`, we have to\njump through a small hoop here: when a delegate draggable is registered, we write a `katavorio-draggable` attribute\non the element on which the draggable is registered. Then when this method runs, we grab the value of that attribute and\nprepend it as part of the selector we're looking for.  So \"> .someClass\" ends up being written as\n\"[katavorio-draggable='...' > .someClass]\", which works with querySelectorAll.",
            "line": " dist/js/jsplumbtoolkit.js:1561"
        },
        {
            "message": "Missing item type\nSets whether or not the Drag is constrained. A value of 'true' means constrain to parent bounds; a function\nwill be executed and returns true if the position is allowed.",
            "line": " dist/js/jsplumbtoolkit.js:1853"
        },
        {
            "message": "Missing item type\nSets a function to call on drag stop, which, if it returns true, indicates that the given element should\nrevert to its position before the previous drag.",
            "line": " dist/js/jsplumbtoolkit.js:1871"
        },
        {
            "message": "Missing item type\nReturns the element that was last dragged. This may be some original element from the DOM, or if `clone` is\nset, then its actually a copy of some original DOM element. In some client calls to this method, it is the\nactual element that was dragged that is desired. In others, it is the original DOM element that the user\nwishes to get - in which case, pass true for `retrieveOriginalElement`.",
            "line": " dist/js/jsplumbtoolkit.js:2093"
        },
        {
            "message": "Missing item type\nA drop event. `drag` is the corresponding Drag object, which may be a Drag for some specific element, or it\nmay be a Drag on some element acting as a delegate for elements contained within it.",
            "line": " dist/js/jsplumbtoolkit.js:2365"
        },
        {
            "message": "Missing item type\nEither makes the given element draggable, or identifies it as an element inside which some identified list\nof elements may be draggable.",
            "line": " dist/js/jsplumbtoolkit.js:2500"
        },
        {
            "message": "Missing item type\nEither completely remove drag functionality from the given element, or remove a specific event handler. If you\ncall this method with a single argument - the element - all drag functionality is removed from it. Otherwise, if\nyou provide an event name and listener function, this function is de-registered (if found).",
            "line": " dist/js/jsplumbtoolkit.js:2731"
        },
        {
            "message": "Missing item type\nEither completely remove drop functionality from the given element, or remove a specific event handler. If you\ncall this method with a single argument - the element - all drop functionality is removed from it. Otherwise, if\nyou provide an event name and listener function, this function is de-registered (if found).",
            "line": " dist/js/jsplumbtoolkit.js:2747"
        },
        {
            "message": "Missing item type\nChanges the participation state for the element in the Posse with the given ID.",
            "line": " dist/js/jsplumbtoolkit.js:2891"
        },
        {
            "message": "Missing item type\nTests if the given object is an Array.",
            "line": " dist/js/jsplumbtoolkit.js:2927"
        },
        {
            "message": "Missing item type\nTests if the given object is a Number.",
            "line": " dist/js/jsplumbtoolkit.js:2935"
        },
        {
            "message": "Missing item type\nTake the given model and expand out any parameters. 'functionPrefix' is optional, and if present, helps jsplumb figure out what to do if a value is a Function.\n if you do not provide it (and doNotExpandFunctions is null, or false), jsplumb will run the given values through any functions it finds, and use the function's\n output as the value in the result. if you do provide the prefix, only functions that are named and have this prefix\n will be executed; other functions will be passed as values to the output.",
            "line": " dist/js/jsplumbtoolkit.js:3120"
        },
        {
            "message": "Missing item type\nFind the index of a given object in an array.",
            "line": " dist/js/jsplumbtoolkit.js:3178"
        },
        {
            "message": "Missing item type\nRemove some element from an array by matching each element in the array against some predicate function. Note that this\nis an in-place removal; the array is altered.",
            "line": " dist/js/jsplumbtoolkit.js:3195"
        },
        {
            "message": "Missing item type\nRemove some element from an array by simple lookup in the array for the given element. Note that this\nis an in-place removal; the array is altered.",
            "line": " dist/js/jsplumbtoolkit.js:3210"
        },
        {
            "message": "Missing item type\nAdd some element to the given array, unless it is determined that it is already in the array.",
            "line": " dist/js/jsplumbtoolkit.js:3225"
        },
        {
            "message": "Missing item type\nAdd some element to a list that is contained in a map of lists.",
            "line": " dist/js/jsplumbtoolkit.js:3237"
        },
        {
            "message": "Missing item type\nAdd an item to a list, unless it is already in the list. The test for pre-existence is a simple list lookup.\nIf you want to do something more complex, perhaps #addWithFunction might help.",
            "line": " dist/js/jsplumbtoolkit.js:3254"
        },
        {
            "message": "Missing item type\nExtends the given obj (which can be an array) with the given constructor function, prototype functions, and class members, any of which may be null.",
            "line": " dist/js/jsplumbtoolkit.js:3274"
        },
        {
            "message": "Missing item type\nTrim a string.",
            "line": " dist/js/jsplumbtoolkit.js:3345"
        },
        {
            "message": "Missing item type\ninits a draggable if it's not already initialised.\nTODO: somehow abstract this to the adapter, because the concept of \"draggable\" has no\nplace on the server.",
            "line": " dist/js/jsplumbtoolkit.js:4680"
        },
        {
            "message": "Missing item type\nprivate method to do the business of toggling hiding/showing.",
            "line": " dist/js/jsplumbtoolkit.js:5011"
        },
        {
            "message": "Missing item type\ngets an id for the given element, creating and setting one if\nnecessary.  the id is of the form\n\n   jsPlumb_<instance index>_<index in instance>\n\nwhere \"index in instance\" is a monotonically increasing integer that starts at 0,\nfor each instance.  this method is used not only to assign ids to elements that do not\nhave them but also to connections and endpoints.",
            "line": " dist/js/jsplumbtoolkit.js:5039"
        },
        {
            "message": "Missing item type\nReturns a map of all the elements this jsPlumbInstance is currently managing.",
            "line": " dist/js/jsplumbtoolkit.js:5080"
        },
        {
            "message": "Missing item type\nchecks for a listener for the given condition, executing it if found, passing in the given value.\ncondition listeners would have been attached using \"bind\" (which is, you could argue, now overloaded, since\nfiring click events etc is a bit different to what this does).  i thought about adding a \"bindCondition\"\nor something, but decided against it, for the sake of simplicity. jsPlumb will never fire one of these\ncondition events anyway.",
            "line": " dist/js/jsplumbtoolkit.js:5193"
        },
        {
            "message": "Missing item type\ncallback from the current library to tell us to prepare ourselves (attach\nmouse listeners etc; can't do that until the library has provided a bind method)",
            "line": " dist/js/jsplumbtoolkit.js:5962"
        },
        {
            "message": "Missing item type\nmakes a list of anchors from the given list of types or coords, eg\n[\"TopCenter\", \"RightMiddle\", \"BottomCenter\", [0, 1, -1, -1] ]",
            "line": " dist/js/jsplumbtoolkit.js:6054"
        },
        {
            "message": "Missing item type\nMakes a dynamic anchor from the given list of anchors (which may be in shorthand notation as strings or dimension arrays, or Anchor\nobjects themselves) and the given, optional, anchorSelector function (jsPlumb uses a default if this is not provided; most people will\nnot need to provide this - i think).",
            "line": " dist/js/jsplumbtoolkit.js:6071"
        },
        {
            "message": "Missing item type\nRemove the given element, including cleaning up all endpoints registered for it.\nThis is exposed in the public API but also used internally by jsPlumb when removing the\nelement associated with a connection drag.",
            "line": " dist/js/jsplumbtoolkit.js:6812"
        },
        {
            "message": "Missing item type\nprivate but must be exposed.",
            "line": " dist/js/jsplumbtoolkit.js:7919"
        },
        {
            "message": "Missing item type\nreturns a connection from the pool; used when dragging starts.  just gets the head of the array if it can.",
            "line": " dist/js/jsplumbtoolkit.js:7955"
        },
        {
            "message": "Missing item type\nprivate but needs to be exposed.",
            "line": " dist/js/jsplumbtoolkit.js:8549"
        },
        {
            "message": "Missing item type\nAnchors model a position on some element at which an Endpoint may be located.  They began as a first class citizen of jsPlumb, ie. a user\nwas required to create these themselves, but over time this has been replaced by the concept of referring to them either by name (eg. \"TopMiddle\"),\nor by an array describing their coordinates (eg. [ 0, 0.5, 0, -1 ], which is the same as \"TopMiddle\").  jsPlumb now handles all of the\ncreation of Anchors without user intervention.",
            "line": " dist/js/jsplumbtoolkit.js:10313"
        },
        {
            "message": "Missing item type\nAn Anchor that floats. its orientation is computed dynamically from\nits position relative to the anchor it is floating relative to.  It is used when creating\na connection through drag and drop.\n\nTODO FloatingAnchor could totally be refactored to extend Anchor just slightly.",
            "line": " dist/js/jsplumbtoolkit.js:10406"
        },
        {
            "message": "Missing item type\nnotification the endpoint associated with this anchor is hovering\nover another anchor; we want to assume that anchor's orientation\nfor the duration of the hover.",
            "line": " dist/js/jsplumbtoolkit.js:10466"
        },
        {
            "message": "Missing item type\nnotification the endpoint associated with this anchor is no\nlonger hovering over another anchor; we should resume calculating\norientation as we normally do.",
            "line": " dist/js/jsplumbtoolkit.js:10475"
        },
        {
            "message": "Missing item type\nAttempt to match an anchor with the given coordinates and then set it.",
            "line": " dist/js/jsplumbtoolkit.js:10615"
        },
        {
            "message": "Missing item type\nFunction: findClosestPointOnPath\nFinds the closest point on this segment to the given [x, y],\nreturning both the x and y of the point plus its distance from\nthe supplied point, and its location along the length of the\npath inscribed by the segment.  This implementation returns\nInfinity for distance and null values for everything else;\nsubclasses are expected to override.",
            "line": " dist/js/jsplumbtoolkit.js:10946"
        },
        {
            "message": "Missing item type\nreturns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n0 to 1 inclusive. for the straight line segment this is simple maths.",
            "line": " dist/js/jsplumbtoolkit.js:11053"
        },
        {
            "message": "Missing item type\nreturns the gradient of the segment at the given point - which for us is constant.",
            "line": " dist/js/jsplumbtoolkit.js:11070"
        },
        {
            "message": "Missing item type\nreturns the point on the segment's path that is 'distance' along the length of the path from 'location', where\n'location' is a decimal from 0 to 1 inclusive, and 'distance' is a number of pixels.\nthis hands off to jsPlumbUtil to do the maths, supplying two points and the distance.",
            "line": " dist/js/jsplumbtoolkit.js:11077"
        },
        {
            "message": "Missing item type\nFunction: findClosestPointOnPath\nFinds the closest point on this segment to [x,y]. See\nnotes on this method in AbstractSegment.",
            "line": " dist/js/jsplumbtoolkit.js:11109"
        },
        {
            "message": "Missing item type\nCalculates all intersections of the given line with this segment.",
            "line": " dist/js/jsplumbtoolkit.js:11159"
        },
        {
            "message": "Missing item type\nCalculates all intersections of the given box with this segment. By default this method simply calls `lineIntersection` with each of the four\nfaces of the box; subclasses can override this if they think there's a faster way to compute the entire box at once.",
            "line": " dist/js/jsplumbtoolkit.js:11224"
        },
        {
            "message": "Missing item type\nCalculates all intersections of the given bounding box with this segment. By default this method simply calls `lineIntersection` with each of the four\nfaces of the box; subclasses can override this if they think there's a faster way to compute the entire box at once.",
            "line": " dist/js/jsplumbtoolkit.js:11242"
        },
        {
            "message": "Missing item type\nreturns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n0 to 1 inclusive.",
            "line": " dist/js/jsplumbtoolkit.js:11363"
        },
        {
            "message": "Missing item type\nreturns the gradient of the segment at the given point.",
            "line": " dist/js/jsplumbtoolkit.js:11387"
        },
        {
            "message": "Missing item type\nreturns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n0 to 1 inclusive.",
            "line": " dist/js/jsplumbtoolkit.js:11530"
        },
        {
            "message": "Missing item type\nreturns the gradient of the segment at the given point.",
            "line": " dist/js/jsplumbtoolkit.js:11539"
        },
        {
            "message": "Missing item type\nFunction: findSegmentForPoint\nReturns the segment that is closest to the given [x,y],\nnull if nothing found.  This function returns a JS\nobject with:\n\n  d   -   distance from segment\n  l   -   proportional location in segment\n  x   -   x point on the segment\n  y   -   y point on the segment\n  s   -   the segment itself.\n  connectorLocation - the location on the connector of the point, expressed as a decimal between 0 and 1 inclusive.",
            "line": " dist/js/jsplumbtoolkit.js:11647"
        },
        {
            "message": "Missing item type\nreturns [segment, proportion of travel in segment, segment index] for the segment\nthat contains the point which is 'location' distance along the entire path, where\n'location' is a decimal between 0 and 1 inclusive. in this connector type, paths\nare made up of a list of segments, each of which contributes some fraction to\nthe total length.\nFrom 1.3.10 this also supports the 'absolute' property, which lets us specify a location\nas the absolute distance in pixels, rather than a proportion of the total path.",
            "line": " dist/js/jsplumbtoolkit.js:11715"
        },
        {
            "message": "Missing item type\nClass: Endpoints.Dot\nA round endpoint, with default radius 10 pixels.",
            "line": " dist/js/jsplumbtoolkit.js:11941"
        },
        {
            "message": "Missing item type\nFunction: Constructor\n\nParameters:\n\n   radius    -    radius of the endpoint.  defaults to 10 pixels.",
            "line": " dist/js/jsplumbtoolkit.js:11946"
        },
        {
            "message": "Missing item type\nClass: Endpoints.Image\nDraws an image as the Endpoint.",
            "line": " dist/js/jsplumbtoolkit.js:12011"
        },
        {
            "message": "Missing item type\nFunction: Constructor\n\nParameters:\n\n   src    -    location of the image to use.\n\n    TODO: multiple references to self. not sure quite how to get rid of them entirely. perhaps self = null in the cleanup\n    function will suffice\n\n    TODO this class still might leak memory.",
            "line": " dist/js/jsplumbtoolkit.js:12015"
        },
        {
            "message": "Missing item type\nhelper method to add a segment.",
            "line": " dist/js/jsplumbtoolkit.js:13132"
        },
        {
            "message": "Missing item type\nutility methods for other objects to use.",
            "line": " dist/js/jsplumbtoolkit.js:13637"
        },
        {
            "message": "Missing item type\nManages dragging for some instance of jsPlumb.\n\nTODO instead of this being accessed directly, it should subscribe to events on the jsPlumb instance: every method\nin here is called directly by jsPlumb. But what should happen is that we have unpublished events that this listens\nto.  The only trick is getting one of these instantiated with every jsPlumb instance: it needs to have a hook somehow.\nBasically the general idea is to pull ALL the drag code out (prototype method registrations plus this) into a\ndedicated drag script), that does not necessarily need to be included.",
            "line": " dist/js/jsplumbtoolkit.js:14290"
        },
        {
            "message": "Missing item type\nregister some element as draggable.  right now the drag init stuff is done elsewhere, and it is\npossible that will continue to be the case.",
            "line": " dist/js/jsplumbtoolkit.js:14306"
        },
        {
            "message": "Missing item type\nnotification that an endpoint was added to the given el.  we go up from that el's parent\nnode, looking for a parent that has been registered as a draggable. if we find one, we add this\nel to that parent's list of elements to update on drag (if it is not there already)",
            "line": " dist/js/jsplumbtoolkit.js:14388"
        },
        {
            "message": "Missing item type\ngets the size for the element, in an array : [ width, height ].",
            "line": " dist/js/jsplumbtoolkit.js:14827"
        },
        {
            "message": "Missing item type",
            "line": " dist/js/jsplumbtoolkit.js:15636"
        },
        {
            "message": "Missing item type\nGets all the Groups managed by the jsPlumb instance.",
            "line": " dist/js/jsplumbtoolkit.js:16034"
        },
        {
            "message": "Missing item type\nExtract a value from, or set a value into, an Object.",
            "line": " dist/js/jsplumbtoolkit.js:16877"
        },
        {
            "message": "Missing item type\nResolves the content for some template, via id.",
            "line": " dist/js/jsplumbtoolkit.js:16982"
        },
        {
            "message": "Missing item type\nDefault implementation of TemplateResolver, for use in browsers.",
            "line": " dist/js/jsplumbtoolkit.js:16986"
        },
        {
            "message": "Missing item type\nAdd a command - this is called during execution of a template. See pushCommands below.",
            "line": " dist/js/jsplumbtoolkit.js:17786"
        },
        {
            "message": "Missing item type\nAt the end of an execution this is called - any commands found during the execution are transferred to the fragment\nthat was created.",
            "line": " dist/js/jsplumbtoolkit.js:17805"
        },
        {
            "message": "Missing item type\nTraces the given overlay along the Connection.",
            "line": " dist/js/jsplumbtoolkit.js:18913"
        },
        {
            "message": "Missing item type\nModels a selection of Nodes/Ports end Edges.",
            "line": " dist/js/jsplumbtoolkit.js:19208"
        },
        {
            "message": "Missing item type\nGets all the nodes, edges and groups.",
            "line": " dist/js/jsplumbtoolkit.js:19672"
        },
        {
            "message": "Missing item type\nSets whether or not Nodes are Graphs themselves, and can have child Nodes. If you enable this\nthen you cannot use slashes (/) in your Node ids, as they will be treated as components of a path\nto a Node in a nested Graph.",
            "line": " dist/js/jsplumbtoolkit.js:20638"
        },
        {
            "message": "Missing item type\nAdds a Group to the Graph.",
            "line": " dist/js/jsplumbtoolkit.js:20877"
        },
        {
            "message": "Missing item type\nFor some given node, get a subset of edges that match the given filter function.",
            "line": " dist/js/jsplumbtoolkit.js:21058"
        },
        {
            "message": "Missing item type\nGets every edge in the Graph.",
            "line": " dist/js/jsplumbtoolkit.js:21096"
        },
        {
            "message": "Missing item type\nCalculates \"clusters\" of nodes (and groups), where a 'cluster' is a set of Nodes/Groups that\nare connected. Direction of connections is not taken into account. Nodes that are children of Groups are\nincluded in all cluster calculations, which might cause some weird situations, but this functionality\nis mostly intended just for Nodes anyway.",
            "line": " dist/js/jsplumbtoolkit.js:21421"
        },
        {
            "message": "Missing item type\nfinds the Vertex in the 'dist' table that has not yet been computed and has the smallest cost so far.",
            "line": " dist/js/jsplumbtoolkit.js:21465"
        },
        {
            "message": "Missing item type\nassembles a path to the given target, using data from the 'dist' and 'previous' tables.  the source of the path is the source that was most recently passed in to the\nDjikstra.compute method.",
            "line": " dist/js/jsplumbtoolkit.js:21499"
        },
        {
            "message": "Missing item type\nAn implementation of the Djikstra shortest path algorithm. The algorithm has been modified\nslightly to handle Ports on Nodes.",
            "line": " dist/js/jsplumbtoolkit.js:21607"
        },
        {
            "message": "Missing item type\nGets a new instance of the jsPlumb Toolkit.",
            "line": " dist/js/jsplumbtoolkit.js:23946"
        },
        {
            "message": "Missing item type\nModels a Path - the series of edges and intermediate nodes between two nodes or ports\nin some toolkit of the Toolkit.",
            "line": " dist/js/jsplumbtoolkit.js:24474"
        },
        {
            "message": "Missing item type",
            "line": " dist/js/jsplumbtoolkit.js:24491"
        },
        {
            "message": "Missing item type\ngets the Edge at the given index in the Path.",
            "line": " dist/js/jsplumbtoolkit.js:24636"
        },
        {
            "message": "Missing item type\nSet the layout on which to base this layout.",
            "line": " dist/js/jsplumbtoolkit.js:26000"
        },
        {
            "message": "Missing item type\nGets the position for the given Node/Group as dictated by either the `left`/`top` properties, or some other nominated pair, in the Node/Group's data.\nThis position is what the Absolute layout uses itself, and this method exposes the absolute position for subclasses that wish to make use\nof the absolute backing.",
            "line": " dist/js/jsplumbtoolkit.js:26073"
        },
        {
            "message": "Missing item type",
            "line": " dist/js/jsplumbtoolkit.js:26203"
        },
        {
            "message": "Missing item type",
            "line": " dist/js/jsplumbtoolkit.js:26207"
        },
        {
            "message": "Missing item type\nGets the orientation of the layout - \"horizontal\" or \"vertical\".",
            "line": " dist/js/jsplumbtoolkit.js:26719"
        },
        {
            "message": "Missing item type",
            "line": " dist/js/jsplumbtoolkit.js:27098"
        },
        {
            "message": "Missing item type",
            "line": " dist/js/jsplumbtoolkit.js:27102"
        },
        {
            "message": "Missing item type\nAdapter for a normal DOM element",
            "line": " dist/js/jsplumbtoolkit.js:27597"
        },
        {
            "message": "Missing item type\nCalled by a layout at the end of the layout cycle. Positions some element. For the canvas adapter this means\nthe view layer needs to be told to position the element, the panzoom widget needs to be informed of the node\nmoving, and the surface should fire a nodeMoved event.",
            "line": " dist/js/jsplumbtoolkit.js:27690"
        },
        {
            "message": "Missing item type\nSwitches debug on/off. Currently debug is limited to information about connections that are being dragged.",
            "line": " dist/js/jsplumbtoolkit.js:27891"
        },
        {
            "message": "Missing item type\nDestroy the renderer - unbind all event listeners from the Toolkit, deregister the renderer, and\ninstruct the subclass to clean itself up.",
            "line": " dist/js/jsplumbtoolkit.js:30859"
        },
        {
            "message": "Missing item type\nWheel Listener\n\nCopyright 2020 jsPlumb\nhttps://jsplumbtoolkit.com\n\nThis software is not free.\n\nNormalises wheel events across browsers.",
            "line": " dist/js/jsplumbtoolkit.js:30985"
        },
        {
            "message": "Missing item type\nPinch listener for all touch browsers - ipad, android, and windows laptops/surfaces. Needless to say,\nevery browser does it differently. IE10+ uses PointerEvents; ipad safari/windows chrome/ipad chrome/\nandroid chrome use TouchEvents.  The listener posts pinchstart, pinch happening, and pinch end events.",
            "line": " dist/js/jsplumbtoolkit.js:31102"
        },
        {
            "message": "Missing item type\nSet the size of some element. Does nothing if the element is not registered.",
            "line": " dist/js/jsplumbtoolkit.js:31769"
        },
        {
            "message": "Missing item type\nReturns whether or not the widget clamps the movement of the canvas during pan/zoom/",
            "line": " dist/js/jsplumbtoolkit.js:33100"
        },
        {
            "message": "Missing item type\nAppends an element to the viewport so that it floats above the content that is being zoomed and panned.\nThe element will have `position:absolute` set on it. You can float any element you like, but note that the\nresponsibility for setting an appropriate z index is yours.",
            "line": " dist/js/jsplumbtoolkit.js:33374"
        },
        {
            "message": "Missing item type\nGets the current background layer.",
            "line": " dist/js/jsplumbtoolkit.js:33617"
        },
        {
            "message": "Missing item type\nCleans up the pan zoom widget - removes all event bindings, and all elements from the DOM.",
            "line": " dist/js/jsplumbtoolkit.js:33625"
        },
        {
            "message": "Missing item type\nSets whether or not the content is clamped such that part of it is always visible.",
            "line": " dist/js/jsplumbtoolkit.js:34770"
        },
        {
            "message": "Missing item type\nReturns whether or not the widget clamps the movement of the canvas during pan/zoom/",
            "line": " dist/js/jsplumbtoolkit.js:34776"
        },
        {
            "message": "Missing item type\nSets the size of some Node/Group.",
            "line": " dist/js/jsplumbtoolkit.js:34782"
        },
        {
            "message": "Missing item type\nSets the pan and zoom for the Surface in one pass.",
            "line": " dist/js/jsplumbtoolkit.js:34945"
        },
        {
            "message": "Missing item type\nTraces the given overlay along either a given path, or the shortest path\nfrom a specified `source` to a specified `target` (if such a path exists).\nIf there is no path nothing happens (except for a debug trace, if you have debugging enabled on\nthe Toolkit instance via `toolkit.setDebugEnabled(true)`)",
            "line": " dist/js/jsplumbtoolkit.js:35195"
        },
        {
            "message": "Missing item type\nReturns a map of element ids -> positions.",
            "line": " dist/js/jsplumbtoolkit.js:35340"
        },
        {
            "message": "Missing item type\nPrivate method called when the superclass wishes to destroy the component. We want to remove everything we added to the container,\nunbind any event bindings, and remove all classes we added too.",
            "line": " dist/js/jsplumbtoolkit.js:35687"
        },
        {
            "message": "Missing item type\nprivate method, optional. called by superclass to find the element that corresponds to the area in a group element into which the child\nnodes are drawn. if this is not defined then the superclass will just use the element group the groupMap it maintains.",
            "line": " dist/js/jsplumbtoolkit.js:35712"
        },
        {
            "message": "Missing item type\nSets whether or not the miniview is visible. Strictly speaking you don't need to use this method;\nyou can just control the miniview's container via your own CSS or whatever. But the Surface uses this\noccasionally, and there is also the concept of having the miniview initially invisible until the\nrelated surface contains some data.",
            "line": " dist/js/jsplumbtoolkit.js:36186"
        },
        {
            "message": "Missing item type\nUpdate the host layout for this miniview",
            "line": " dist/js/jsplumbtoolkit.js:36395"
        },
        {
            "message": "Missing item type\nDestroy the miniview - remove classes attached to the container, remove DOM elements, unbind event listeners.",
            "line": " dist/js/jsplumbtoolkit.js:36458"
        },
        {
            "message": "Missing item type\nClears the given set",
            "line": " dist/js/jsplumbtoolkit.js:37244"
        },
        {
            "message": "Missing item type\napplies the given data object to the given element, using `jtk-att` as the match attributes",
            "line": " dist/js/jsplumbtoolkit.js:37249"
        },
        {
            "message": "Missing item type\nextracts a data object from the given element, using `jtk-att` as the match attributes",
            "line": " dist/js/jsplumbtoolkit.js:37254"
        }
    ]
}